import "Gtk/gtk.alusus";
import "Srl/String.alusus";

def WidgetGuide: module
{
  def window: ptr[Gtk.AppWindow];

  def start: function
  {
    def app: ptr[Gtk.App];
    def status: Int;

    app = Gtk.App.new("org.alusus.gtk-widget-guide", 0);
    Glib.connectSignal(app, Gtk.Signal.ACTIVATE, activate~ptr~cast[ptr[function]], 0, 0, 0);
    status = Gtk.App.exec(app, 0, 0);
    Glib.unref(app);
  };

  def activate: function (app: ptr[Gtk.App], data: ptr)
  {
    // Create the main window.
    window = Gtk.AppWindow.new(app);
    Gtk.Window.setTitle(window, "Alusus GTK Widgets Guide");
    Gtk.Window.setDefaultSize(window, 640, 480);

    // Create the header bar with menu, About, and Quit buttons.
    Gtk.Window.setTitlebar(window, createHeaderBar());

    // Create a paned element.
    def paned: ptr[Gtk.Paned];
    paned = Gtk.Paned.new(Gtk.Orientation.HORIZONTAL);
    Gtk.Container.add(window, paned);    
    Gtk.Paned.setPosition(paned, 150);

    // Create a box for the second side of the pane.
    def box: ptr[Gtk.Box];
    box = Gtk.Box.new(Gtk.Orientation.VERTICAL, 10);
    Gtk.Paned.pack2(paned, box, 1, 1);

    // Fill the second side of the paned.
    def label: ptr[Gtk.Label];
    def textBuffer: ptr[Gtk.TextBuffer];
    label = createLogoAndLabel(box);
    createEntry(box, label);
    textBuffer = createTextView(box);
    createTextViewButtons(box, textBuffer);
    createToggleButton(box, label);
    createCheckButton(box, label);

    // Fill the first side of the paned.
    createListBox(paned, label);

    // Show the window.
    Gtk.Widget.showAll(window);
  };

  def createHeaderBar: function () => ptr[Gtk.HeaderBar]
  {
    def headerBar: ptr[Gtk.HeaderBar];
    headerBar = Gtk.HeaderBar.new();
    Gtk.HeaderBar.setTitle(headerBar, "Alusus GTK Widgets Guide");

    def aboutButton: ptr[Gtk.Button];
    aboutButton = Gtk.Button.newWithLabel("About");
    Glib.connectSignal(aboutButton, Gtk.Signal.CLICKED, onAboutClicked~ptr~cast[ptr[function]], 0, 0, 0);
    Gtk.HeaderBar.packStart(headerBar, aboutButton);

    def quitButton: ptr[Gtk.Button];
    quitButton = Gtk.Button.newWithLabel("Quit");
    Glib.connectSignal(quitButton, Gtk.Signal.CLICKED, onQuitClicked~ptr~cast[ptr[function]], 0, 0, 0);
    Gtk.HeaderBar.packEnd(headerBar, quitButton);

    createMenu(headerBar);

    return headerBar;
  };

  def createMenu: function (headerBar: ptr[Gtk.HeaderBar])
  {
    def menu: ptr[Gtk.Menu];
    menu = Gtk.Menu.new();

    def item: ptr[Gtk.MenuItem];
    item = Gtk.MenuItem.new("About");
    Glib.connectSignal(item, Gtk.Signal.ACTIVATE, onAboutClicked~ptr~cast[ptr[function]], 0, 0, 0);
    Gtk.MenuShell.append(menu, item);
    Gtk.Widget.show(item);
    item = Gtk.MenuItem.new("Quit");
    Glib.connectSignal(item, Gtk.Signal.ACTIVATE, onQuitClicked~ptr~cast[ptr[function]], 0, 0, 0);
    Gtk.MenuShell.append(menu, item);
    Gtk.Widget.show(item);
    
    def button: ptr[Gtk.MenuButton];
    button = Gtk.MenuButton.new();
    Gtk.MenuButton.setPopup(button, menu);
    Gtk.HeaderBar.packEnd(headerBar, button);
  };

  def createListBox: function (paned: ptr[Gtk.Paned], label: ptr[Gtk.Label])
  {
    def listBox: ptr[Gtk.ListBox];
    listBox = Gtk.ListBox.new();
    Gtk.Paned.pack1(paned, listBox, 0, 1);
    
    def str: array[Char, 100];
    def i: Int;
    for i = 1, i <= 10, ++i {
      Srl.String.print(str~ptr, "Row %d", i);
      def label: ptr[Gtk.Label];
      label = Gtk.Label.new(str~ptr);
      Gtk.ListBox.insert(listBox, label, -1);
    };
    
    Glib.connectSignal(listBox, Gtk.Signal.ROW_SELECTED, onListBoxSelectionChanged~ptr~cast[ptr[function]], label, 0, 0);
  };

  def createLogoAndLabel: function (box: ptr[Gtk.Box]) => ptr[Gtk.Label]
  {
    def hBox: ptr[Gtk.Box];
    def image: ptr[Gtk.Image];
    def label: ptr[Gtk.Label];
    hBox = Gtk.Box.new(Gtk.Orientation.HORIZONTAL, 20);
    label = Gtk.Label.new("Hello World!");
    image = Gtk.Image.new("../../Doc/Resources/logo.gif");
    Gtk.Box.packStart(hBox, label, 1, 0, 0);
    Gtk.Box.packEnd(hBox, image, 1, 0, 0);
    Gtk.Box.packStart(box, hBox, 1, 0, 0);
    return label;
  };

  def createEntry: function (box: ptr[Gtk.Box], label: ptr[Gtk.Label])
  {
    def entry: ptr[Gtk.Entry];
    entry = Gtk.Entry.new();

    Gtk.Box.packStart(box, entry, 1, 0, 0);
    Glib.connectSignal(entry, Gtk.Signal.CHANGED, onEntryChanged~ptr~cast[ptr[function]], label, 0, 0);
  };

  def createTextView: function (box: ptr[Gtk.Box]) => ptr[Gtk.TextBuffer]
  {
    def textView: ptr[Gtk.TextView];
    def textBuffer: ptr[Gtk.TextBuffer];
    textBuffer = Gtk.TextBuffer.new(0);
    textView = Gtk.TextView.new(textBuffer);
    Gtk.TextView.setWrapMode(textView, Gtk.WrapMode.WORD);
    Gtk.Box.packStart(box, textView, 1, 1, 0);
    return textBuffer;
  };

  def createTextViewButtons: function (box: ptr[Gtk.Box], buffer: ptr[Gtk.TextBuffer])
  {
    def buttonBox: ptr[Gtk.ButtonBox];
    def sayButton: ptr[Gtk.Button];
    def clearButton: ptr[Gtk.Button];
    buttonBox = Gtk.ButtonBox.new(Gtk.Orientation.HORIZONTAL);
    Gtk.ButtonBox.setLayout(buttonBox, Gtk.ButtonBoxStyle.SPREAD);
    sayButton = Gtk.Button.newWithLabel("Say");
    Glib.connectSignal(sayButton, Gtk.Signal.CLICKED, onSayClicked~ptr~cast[ptr[function]], buffer, 0, 0);
    Gtk.Container.add(buttonBox, sayButton);
    clearButton = Gtk.Button.newWithLabel("Clear");
    Glib.connectSignal(clearButton, Gtk.Signal.CLICKED, onClearClicked~ptr~cast[ptr[function]], buffer, 0, 0);
    Gtk.Container.add(buttonBox, clearButton);
    Gtk.Box.packStart(box, buttonBox, 1, 0, 0);
  };

  def createToggleButton: function (box: ptr[Gtk.Box], label: ptr[Gtk.Label])
  {
    def button: ptr[Gtk.ToggleButton];
    button = Gtk.ToggleButton.new("Toggle");
    Gtk.Box.packStart(box, button, 1, 0, 0);
    Glib.connectSignal(button, Gtk.Signal.TOGGLED, onToggleChanged~ptr~cast[ptr[function]], label, 0, 0);
  };

  def createCheckButton: function (box: ptr[Gtk.Box], label: ptr[Gtk.Label])
  {
    def button: ptr[Gtk.CheckButton];
    button = Gtk.CheckButton.new("Check");
    Gtk.Box.packStart(box, button, 1, 0, 0);
    Glib.connectSignal(button, Gtk.Signal.TOGGLED, onToggleChanged~ptr~cast[ptr[function]], label, 0, 0);
  };

  def onListBoxSelectionChanged: function (listBox: ptr[Gtk.ListBox], item: ptr[Gtk.Bin], label: ptr[Gtk.Label])
  {
    def str: array[Char, 100];
    Srl.String.print(str~ptr, "Selected item: %s", Gtk.Label.getText(Gtk.Bin.getChild(item)~cast[ptr[Gtk.Label]]));
    Gtk.Label.setText(label, str~ptr);
  };

  def onEntryChanged: function (editable: ptr[Gtk.Editable], label: ptr[Gtk.Label])
  {
    def str: array[Char, 100];
    Srl.String.print(str~ptr, "Entered text: %s", Gtk.Editable.getChars(editable, 0, -1));
    Gtk.Label.setText(label, str~ptr);
  };

  def onAboutClicked: function (widget: ptr[Gtk.Widget], data: ptr)
  {
    def dialog: ptr[Gtk.MessageDialog];
    dialog = Gtk.MessageDialog.new(
      window~cast[ptr[Gtk.Window]], 0, Gtk.MessageType.INFO, Gtk.ButtonsType.CLOSE, "Alusus GTK Widget Guide.\nauthor: Sarmad Abdullah"
    );
    Gtk.Dialog.exec(dialog);
    Gtk.Widget.destroy(dialog);
  };

  def onSayClicked: function (widget: ptr[Gtk.Widget], textBuffer: ptr[Gtk.TextBuffer])
  {
    // Get the text from the buffer.
    def text: ptr[Char];
    def startIter: Gtk.TextIter;
    def endIter: Gtk.TextIter;
    Gtk.TextBuffer.getStartIter(textBuffer, startIter~ptr);
    Gtk.TextBuffer.getEndIter(textBuffer, endIter~ptr);
    text = Gtk.TextBuffer.getText(textBuffer, startIter~ptr, endIter~ptr, 1);

    def dialog: ptr[Gtk.MessageDialog];
    dialog = Gtk.MessageDialog.new(
      window~cast[ptr[Gtk.Window]], 0, Gtk.MessageType.INFO, Gtk.ButtonsType.CLOSE, text
    );
    Gtk.Dialog.exec(dialog);
    Gtk.Widget.destroy(dialog);
  };

  def onClearClicked: function (widget: ptr[Gtk.Widget], textBuffer: ptr[Gtk.TextBuffer])
  {
    Gtk.TextBuffer.setText(textBuffer, "", 0);
  };

  def onToggleChanged: function (toggle: ptr[Gtk.ToggleButton], label: ptr[Gtk.Label])
  {
    def active: Bool;
    active = Gtk.ToggleButton.getActive(toggle);
    if active Gtk.Label.setText(label, "Toggle is now ON")
    else Gtk.Label.setText(label, "Toggle is now OFF");
  };

  def onQuitClicked: function (widget: ptr[Gtk.Widget], data: ptr)
  {
    Gtk.Widget.destroy(window);
  };
};

run WidgetGuide.start;

