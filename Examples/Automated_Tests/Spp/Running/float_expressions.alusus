import "libalusus_spp.so";

def Main: module
{
  def print: @expname[printf] function (fmt: ptr[Int[8]], args: ...Float[64])=>Int[64];

  def start: function ()=>Void
  {
    print("1.2+1.2=%f\n", 1.2+1.2);
    print("5.5-2.5=%f\n", 5.5-2.5);
    print("7.2*3.5=%f\n", 7.2*3.5);
    print("10.4/2.0=%f\n", 10.4/2.0);

    print("1.0+2.0*3.0=%f\n", 1.0+2.0*3.0);
    print("10.0-6.0/2.0=%f\n", 10.0-6.0/2.0);
    print("(1.0+2.0)*3.0=%f\n", (1.0+2.0)*3.0);
    print("(10.0-6.0)/2.0=%f\n", (10.0-6.0)/2.0);

    print("1f32 + 1f32 = %f\n", 1f32 + 1f32);
    print("1f64 + 1f64 = %f\n", 1f64 + 1f64);
    print("1f64 + 1f32 = %f\n", 1f64 + 1f32);
    print("1f32 + 1f64 = %f\n", 1f32 + 1f64);

    def f32: Float[32];
    def f64: Float[64];
    f32 = 5.0;
    f64 = 8.0;

    print("++f32 = %f\n", ++f32);
    print("++f32 = %f\n", ++f32);
    print("--f32 = %f\n", --f32);
    print("--f32 = %f\n", --f32);
    print("f32++ = %f\n", f32++);
    print("f32++ = %f\n", f32++);
    print("f32-- = %f\n", f32--);
    print("f32-- = %f\n", f32--);

    print("++f64 = %f\n", ++f64);
    print("++f64 = %f\n", ++f64);
    print("--f64 = %f\n", --f64);
    print("--f64 = %f\n", --f64);
    print("f64++ = %f\n", f64++);
    print("f64++ = %f\n", f64++);
    print("f64-- = %f\n", f64--);
    print("f64-- = %f\n", f64--);

    f32 = 0.5;
    f32 += 0.7; print("f32 += 0.7 => %f\n", f32);
    f32 -= 0.2; print("f32 -= 0.2 => %f\n", f32);
    f32 *= 2.0; print("f32 *= 2.0 => %f\n", f32);
    f32 /= 0.5; print("f32 /= 0.5 => %f\n", f32);

    f64 = 0.15;
    f64 += 0.07; print("f64 += 0.07 => %f\n", f64);
    f64 -= 0.02; print("f64 -= 0.02 => %f\n", f64);
    f64 *= 2.0; print("f64 *= 2.0 => %f\n", f64);
    f64 /= 0.5; print("f64 /= 0.5 => %f\n", f64);
  }
};

run Main.start;
