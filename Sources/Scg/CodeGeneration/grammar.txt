program : statement { ";" statement}
statement : command | expression
command : "def" expression | "print" expression | "return" expression | "if" expression set | "for" expression set
inner_command : "function" set
expression : list_expr { "::" list_expr }
list_expr : colon_pair_expr {"," colon_pair_expr}
colon_pair_expr : assign_expr {":" assign_expr}
assign_expr : log_expr {assign log_expr}
log_expr : comp_expr {log comp_expr}
comp_expr : add_expr {comp_op add_expr}
add_expr : mul_expr {add_op mul_expr}
mul_expr : bitwise_expr {mul bitwise_expr}
bitwise_expr : unary_expr {bitwise_op unary_expr}
unary_expr : prefix_op functional_expr
functional_expr : parameter { operand }
operand : "(" [expression] ")" | "[" [expression] "]"
parameter : identifier | literal | inner_command | "(" expression ")"
literal : int_literal | float_literal | char_literal | str_literal
assign : "=" | "+=" | "-="
log : "||" | "&&"
comp_op : "==" | "<" | ">" | "<=" | ">="
add_op : "+" | "-"
mul : "*" | "/"
bitwise_op : "|" | "&" | ">>" | "<<"
prefix_op : "-"
set : "{" [statement {";" statement}] "}"
