/**
 * @file Scg/Functions/Function.h
 *
 * @copyright Copyright (C) 2014 Rafid Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <http://alusus.net/alusus_license_1_0>.
 */
//==============================================================================

#ifndef __ExternalFunction_h__
#define __ExternalFunction_h__

// Scg header files
#include <BuiltInFunctions/Function.h>
#include <Functions/FunctionSignature.h>
#include <Types/ValueType.h>
#include <Types/ValueTypeSpec.h>
#include <Values/Value.h>

#include <llvm_fwd.h>

namespace Scg
{
class Block;
class ValueTypeSpec;
}

namespace Scg
{
/**
 * Represents a function definition, i.e. a prototype and body.
 */
class ExternalFunction : public Function
{
  //! A string containing the name of the function being linked to.
  std::string name;
  //! The return value type of the function being linked to.
  ValueTypeSpec *returnTypeSpec;
  //! Whether the function being linked to has a variable number of arguments.
  bool isVarArgs = false;
  //! A pointer to the LLVM function representing this function.
  llvm::Function *llvmFunction = nullptr;
  /*! An array containing the Alusus variables representing the arguments of the
      function. */
  VariableArray args;

public:
  /**
  * Constructs a link to an external function with the given name, return type
  * specification, argument type specification.
  * @param[in] name           The name of the function.
  * @param[in] returnTypeSpec The type specification of the function.
  * @param[in] argTypeSpecs   The type specifications of the arguments of the
  *                           function being linked to.
  */
  ExternalFunction(const std::string &name, ValueTypeSpec *returnTypeSpec,
      const ValueTypeSpecArray &argTypeSpecs, bool isVarArgs = false);

  //! Class destructor.
  ~ExternalFunction();

  //! @copydoc Function::GetName().
  virtual const std::string &GetName() const { return name; }

  //! @copydoc Expression::GetValueTypeSpec().
  virtual const ValueTypeSpec *GetValueTypeSpec() const override { return returnTypeSpec; }

//   //! @copydoc Function::GetArgumentCount()
//   virtual ExpressionArray::size_type GetArgumentCount() const override
//   {
//     return GetArgumentTypes().size();
//   }

  //! @copydoc Function::IsVarArgs()
  virtual bool IsVarArgs() const { return isVarArgs; }

  //! @copydoc ExternalFunction::CreateLLVMInstruction()
  virtual llvm::Value *CreateLLVMInstruction(llvm::IRBuilder<> *irb,
      const std::vector<llvm::Value*> &args) const override;

  // @{
  /**
   * Retrieves the LLVM function generated by this function.
   * @note This function should only be used during the after the call
   * to GenerateCode().
   * @return The LLVM function generated by this function.
   */
  const llvm::Function *GetLlvmFunction() const { return llvmFunction; }
  llvm::Function *GetLlvmFunction() { return llvmFunction; }
  // @}

private:
  /**
   * Called by PreGenerateCode() if this object represents a link to an
   * external function.
   */
  void CreateLinkToExternalFunction();

public:
  //! @copydoc Expression::PreGenerateCode()
  virtual CodeGenerationStage PreGenerateCode();

  //! @copydoc Expression::ToString()
  virtual std::string ToString();
};
}

#endif // __ExternalFunction_h__
