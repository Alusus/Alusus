/**
 * @file Scg/Functions/ExternalFunction.h
 *
 * @copyright Copyright (C) 2016 Rafid Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <http://alusus.net/alusus_license_1_0>.
 */
//==============================================================================

#ifndef SCG_EXTERNALFUNCTION_H
#define SCG_EXTERNALFUNCTION_H

#include "core.h"
#include <Functions/Function.h>
#include <Types/ValueType.h>
#include <Types/ValueTypeSpec.h>
#include <Values/Value.h>

#include <llvm_fwd.h>

namespace Scg
{

class CodeGenUnit;

/**
 * Represents a function definition, i.e. a prototype and body.
 */
class ExternalFunction : public Function
{
  //============================================================================
  // Type Info

  TYPE_INFO(ExternalFunction, Function, "Scg", "Scg", "alusus.net");


  //============================================================================
  // Member Variables

  //! A string containing the name of the function being linked to.
  private: std::string name;
  //! The return value type of the function being linked to.
  private: SharedPtr<ValueTypeSpec> returnTypeSpec;
  //! Whether the function being linked to has a variable number of arguments.
  private: bool varArgs = false;
  //! A pointer to the LLVM function representing this function.
  private: llvm::Function *llvmFunction = nullptr;


  //============================================================================
  // Constructors & Destructor

  /**
  * Constructs a link to an external function with the given name, return type
  * specification, argument type specification.
  * @param[in] name           The name of the function.
  * @param[in] returnTypeSpec The type specification of the function.
  * @param[in] argTypeSpecs   The type specifications of the arguments of the
  *                           function being linked to.
  */
  public: ExternalFunction(const std::string &name, SharedPtr<ValueTypeSpec> const &returnTypeSpec,
                           const ValueTypeSpecArray &argTypeSpecs, bool varArgs = false);


  //============================================================================
  // Member Functions

  //! @copydoc Function::getName().
  public: virtual std::string const& getName() const
  {
    return this->name;
  }

  //! @copydoc AstNode::getValueTypeSpec().
  public: virtual SharedPtr<ValueTypeSpec> const& getValueTypeSpec() const override
  {
    return this->returnTypeSpec;
  }

  //! @copydoc Function::isVarArgs()
  public: virtual bool isVarArgs() const
  {
    return this->varArgs;
  }

  //! @copydoc ExternalFunction::createLLVMInstruction()
  public: virtual llvm::Value *createLLVMInstruction(llvm::IRBuilder<> *irb,
      const std::vector<llvm::Value*> &args) const override;

  /**
   * Retrieves the LLVM function generated by this function.
   * @note This function should only be used during the after the call
   * to GenerateCode().
   * @return The LLVM function generated by this function.
   */
  public: const llvm::Function *getLlvmFunction() const
  {
    return llvmFunction;
  }
  public: llvm::Function *getLlvmFunction()
  {
    return llvmFunction;
  }

  /**
   * Called by preGenerateCode() if this object represents a link to an
   * external function.
   */
  private: void createLinkToExternalFunction(CodeGenUnit *codeGenUnit);

  //! @copydoc AstNode::preGenerateCode()
  public: virtual CodeGenerationStage preGenerateCode(CodeGenUnit *codeGenUnit);

  //! @copydoc AstNode::toString()
  public: virtual std::string toString();

}; // class

} // namespace

#endif
