/**
 * @file Scg/Functions/Function.h
 *
 * @copyright Copyright (C) 2014 Rafid Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <http://alusus.net/alusus_license_1_0>.
 */
//==============================================================================

#ifndef __UserDefinedFunction_h__
#define __UserDefinedFunction_h__

// Scg header files
#include <BuiltInFunctions/Function.h>
#include <Functions/FunctionSignature.h>
#include <Types/ValueType.h>
#include <Types/ValueTypeSpec.h>
#include <Values/Value.h>

#include <llvm_fwd.h>

namespace Scg
{
class Block;
class ValueTypeSpec;
}

namespace Scg
{
/**
 * Represents a function definition, i.e. a prototype and body.
 */
class UserDefinedFunction : public Function
{
  //! A string containing the name of the function being defined or linked to.
  std::string name;
  //! The return value type of the function being defined or linked to.
  ValueTypeSpec *returnTypeSpec;
  /*! An array containing the definitions (types and names) of the arguments of
    the function being defined. */
  VariableDefinitionArray argDefs;
  //! Whether the function being linked to has a variable number of arguments.
  bool varArgs = false;
  //! A pointer to the LLVM function representing this function.
  llvm::Function *llvmFunction = nullptr;
  /*! An array containing the Alusus variables representing the arguments of the
    function. */
  VariableArray args;

public:
  /**
   * Construct a function with the given name, arguments, and body.
   * @param[in] name            The name of the function.
   * @param[in] returnTypeSpec  The type specification of the return value.
   * @param[in] arguments       The arguments of the function.
   * @param[in] body            The body of the function.
   */
  UserDefinedFunction(const std::string &name, ValueTypeSpec *returnTypeSpec,
                      const VariableDefinitionArray &argDefs, Block *body);

  //! Class destructor.
  ~UserDefinedFunction();

  // TODO: Document these functions.

  //! @copydoc Function::getName().
  virtual const std::string &getName() const
  {
    return name;
  }

  // FIXME: Implement the functions below.

  //! @copydoc Expression::getValueTypeSpec().
  virtual const ValueTypeSpec *getValueTypeSpec() const override
  {
    return returnTypeSpec;
  }

  const VariableDefinitionArray &getArgumentDefinitions() const
  {
    return argDefs;
  }

  //  //! @copydoc Expression::GetArgumentType().
  //  virtual const ValueType *GetArgumentType(int n) const
  //  {
  //    return argTypes[n];
  //  }
  //
  //  //! @copydoc Function::GetArgumentCount()
  //  virtual ExpressionArray::size_type GetArgumentCount() const override
  //  {
  //    return getArgumentDefinitions().size();
  //  }

  //! @copydoc Function::isVarArgs()
  virtual bool isVarArgs() const
  {
    return varArgs;
  }

  //! @copydoc ExternalFunction::createLLVMInstruction()
  virtual llvm::Value *createLLVMInstruction(llvm::IRBuilder<> *irb,
      const std::vector<llvm::Value*> &args) const override;

  // @{
  /**
   * Retrieves the LLVM function generated by this function.
   * @note This function should only be used during the after the call
   * to generateCode().
   * @return The LLVM function generated by this function.
   */
  const llvm::Function *getLlvmFunction() const
  {
    return llvmFunction;
  }
  llvm::Function *getLlvmFunction()
  {
    return llvmFunction;
  }
  // @}

  /**
   * Get the expression representing the left-hand side of the binary operator.
   *
   * @return A pointer to the left-hand side expression.
   */
  const Block *getBody() const
  {
    return (Block*)children[0];
  }
  Block *getBody()
  {
    return (Block*)children[0];
  }

private:
  /**
   * Called by preGenerateCode() if this object represents a function.
   */
  void createFunction();

public:
  //! @copydoc Expression::preGenerateCode()
  virtual CodeGenerationStage preGenerateCode();

  //! @copydoc Expression::generateCode()
  virtual CodeGenerationStage generateCode();

  //! @copydoc Expression::toString()
  virtual std::string toString();

private:
  virtual void setFunction(UserDefinedFunction *function);
};
}

#endif // __UserDefinedFunction_h__
