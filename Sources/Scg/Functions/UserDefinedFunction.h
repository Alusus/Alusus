/**
 * @file Scg/Functions/UserDefinedFunction.h
 *
 * @copyright Copyright (C) 2016 Rafid Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <http://alusus.net/alusus_license_1_0>.
 */
//==============================================================================

#ifndef SCG_USERDEFINEDFUNCTION_H
#define SCG_USERDEFINEDFUNCTION_H

// Scg header files
#include <Functions/Function.h>
#include <Types/ValueType.h>
#include <Types/ValueTypeSpec.h>
#include <Values/Value.h>

#include <llvm_fwd.h>

namespace Scg
{

class Block;
class ValueTypeSpec;
class CodeGenUnit;

/**
 * Represents a function definition, i.e. a prototype and body.
 */
class UserDefinedFunction : public Function, public virtual Core::Data::Container
{
  //============================================================================
  // Type Info

  TYPE_INFO(UserDefinedFunction, Function, "Scg", "Scg", "alusus.net");
  IMPLEMENT_INTERFACES_1(Function, Core::Data::Container);


  //============================================================================
  // Member Variables

  //! A string containing the name of the function being defined or linked to.
  private: std::string name;
  //! The return value type of the function being defined or linked to.
  private: SharedPtr<ValueTypeSpec> returnTypeSpec;
  /*! An array containing the definitions (types and names) of the arguments of
    the function being defined. */
  private: VariableDefinitionArray argDefs;
  //! Whether the function being linked to has a variable number of arguments.
  private: bool varArgs = false;
  private: SharedPtr<Block> body;
  //! A pointer to the LLVM function representing this function.
  private: llvm::Function *llvmFunction = nullptr;
  /*! An array containing the Alusus variables representing the arguments of the
      function. */
  private: VariableArray args;


  //============================================================================
  // Constructors & Destructor

  /**
   * Construct a function with the given name, arguments, and body.
   * @param[in] name            The name of the function.
   * @param[in] returnTypeSpec  The type specification of the return value.
   * @param[in] arguments       The arguments of the function.
   * @param[in] body            The body of the function.
   */
  public: UserDefinedFunction(std::string const &name, SharedPtr<ValueTypeSpec> const &returnTypeSpec,
                              VariableDefinitionArray const &argDefs, SharedPtr<Block> const &body);

  public: virtual ~UserDefinedFunction();


  //============================================================================
  // Member Functions

  //! @copydoc Function::getName().
  public: virtual const std::string &getName() const
  {
    return name;
  }

  // FIXME: Implement the functions below.

  //! @copydoc AstNode::getValueTypeSpec().
  public: virtual SharedPtr<ValueTypeSpec> const& getValueTypeSpec() const override
  {
    return this->returnTypeSpec;
  }

  public: const VariableDefinitionArray &getArgumentDefinitions() const
  {
    return argDefs;
  }

  //! @copydoc Function::isVarArgs()
  public: virtual bool isVarArgs() const
  {
    return varArgs;
  }

  //! @copydoc ExternalFunction::createLLVMInstruction()
  public: virtual llvm::Value *createLLVMInstruction(llvm::IRBuilder<> *irb,
      const std::vector<llvm::Value*> &args) const override;

  /**
   * Retrieves the LLVM function generated by this function.
   * @note This function should only be used during the after the call
   * to generateCode().
   * @return The LLVM function generated by this function.
   */
  public: llvm::Function* getLlvmFunction() const
  {
    return llvmFunction;
  }

  /**
   * Get the expression representing the left-hand side of the binary operator.
   *
   * @return A pointer to the left-hand side expression.
   */
  public: SharedPtr<Block> const& getBody() const
  {
    return this->body;
  }

  /**
   * Called by preGenerateCode() if this object represents a function.
   */
  private: void createFunction(CodeGenUnit *codeGenUnit);

  //! @copydoc AstNode::preGenerateCode()
  public: virtual CodeGenerationStage preGenerateCode(CodeGenUnit *codeGenUnit);

  //! @copydoc AstNode::generateCode()
  public: virtual CodeGenerationStage generateCode(CodeGenUnit *codeGenUnit);

  //! @copydoc AstNode::toString()
  public: virtual std::string toString();


  //============================================================================
  // Container Implementation

  public: virtual void set(Int index, IdentifiableObject *val)
  {
  }

  public: virtual void remove(Int index)
  {
  }

  public: virtual Word getCount() const
  {
    return 1;
  }

  public: virtual IdentifiableObject* get(Int index) const
  {
    return this->body.get();
  }

}; // class

} // namespace

#endif
