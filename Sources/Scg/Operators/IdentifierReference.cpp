/**
 * @file Scg/Operators/IdentifierReference.cpp
 *
 * @copyright Copyright (C) 2014 Rafid Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <http://alusus.net/alusus_license_1_0>.
 */
//==============================================================================

#include <prerequisites.h>
// LLVM header files
#include <llvm/IR/IRBuilder.h>
// Scg files
#include <CodeGenUnit.h>
#include <Containers/Block.h>
#include <Containers/Module.h>
#include <Operators/IdentifierReference.h>
#include <Types/PointerType.h>

namespace Scg
{

SharedPtr<ValueTypeSpec> const& IdentifierReference::getValueTypeSpec() const
{
  BLOCK_CHECK;

  if (this->valueType == 0) {
    Variable const *var;
    ValueType *type;

    auto module = this->findOwner<Module>();
    if ((var = this->findOwner<Block>()->getVariable(this->name)) != 0) {
      this->valueType = PointerType::get(var->getValueTypeSpec()->toValueType(*module));
    } else if ((type = module->tryGetValueTypeByName(this->name)) != 0) {
      this->valueType = type;
    } else {
      throw EXCEPTION(UndefinedVariableException,
                      ("Referencing undefined identifier: " + this->name).c_str());
    }
  }

  return this->valueType->getValueTypeSpec();
}


AstNode::CodeGenerationStage IdentifierReference::generateCode(CodeGenUnit *codeGenUnit)
{
  BLOCK_CHECK;

  // Look up the variable.
  auto var = this->findOwner<Block>()->getVariable(this->name);

  if (!var) {
    throw EXCEPTION(UndefinedVariableException,
                    ("Undefined variable: " + this->name).c_str());
  }

  // The LLVM Alloca instruction used to allocate the variable is a pointer to
  // the variable, so we just use it as the value generated by this expression.
  this->generatedLlvmValue = var->getLlvmValue();

  return AstNode::generateCode(codeGenUnit);
}


std::string IdentifierReference::toString()
{
  // TODO: Do we need to use std::stringstream?
  return this->name + "~ptr";
}

} // namespace
