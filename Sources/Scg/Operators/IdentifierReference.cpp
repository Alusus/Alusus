/**
 * @file Scg/Operators/IdentifierReference.cpp
 *
 * @copyright Copyright (C) 2014 Rafid Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <http://alusus.net/alusus_license_1_0>.
 */
//==============================================================================

#include <prerequisites.h>
// LLVM header files
#include <llvm/IR/IRBuilder.h>
// Scg files
#include <Containers/Block.h>
#include <Containers/Module.h>
#include <Operators/IdentifierReference.h>
#include <Types/PointerType.h>

namespace Scg
{
const ValueTypeSpec *IdentifierReference::getValueTypeSpec() const
{
  BLOCK_CHECK;

  if (this->valueType == 0) {
    Variable const *var;
    ValueType *type;

    if ((var = getBlock()->getVariable(this->name)) != 0) {
      this->valueType = PointerType::get(var->getValueTypeSpec()->toValueType(*getModule()));
    } else if ((type = getModule()->tryGetValueTypeByName(this->name)) != 0) {
      this->valueType = type;
    } else {
      throw EXCEPTION(UndefinedVariableException,
                      ("Referencing undefined identifier: " + this->name).c_str());
    }
  }

  return this->valueType->getValueTypeSpec();
}

//------------------------------------------------------------------------------

Expression::CodeGenerationStage IdentifierReference::generateCode()
{
  BLOCK_CHECK;

  // Look up the variable.
  auto var = getBlock()->getVariable(this->name);

  if (!var) {
    throw EXCEPTION(UndefinedVariableException,
                    ("Undefined variable: " + this->name).c_str());
  }

  // The LLVM Alloca instruction used to allocate the variable is a pointer to
  // the variable, so we just use it as the value generated by this expression.
  this->generatedLlvmValue = var->getLlvmValue();

  return Expression::generateCode();
}

//----------------------------------------------------------------------------

std::string IdentifierReference::toString()
{
  // TODO: Do we need to use std::stringstream?
  return this->name + "~ptr";
}
}
