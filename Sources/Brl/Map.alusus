/**
 * @file Brl/Map.alusus
 * Contains the Map type.
 *
 * @copyright Copyright (C) 2020 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "Array";
import "ArrayIndex";
import "System";

@merge module Brl
{
    type Map [T1: type, T2: type] {
        def keys: Array[T1];
        def values: Array[T2];
        def keysIndex: ref[ArrayIndex[T1]];

        handler this~init() {
            this.keysIndex~ptr = 0;
        };

        handler this~init(useIndex: Bool) {
            if useIndex this.keysIndex~no_deref = ArrayIndex[T1].constructToNew(this.keys)
            else this.keysIndex~ptr = 0;
        };

        handler this~init(map: ref[Map[T1, T2]]) {
            this.keysIndex~ptr = 0;
            this.keys = map.keys;
            this.values = map.values;
        };

        handler this~init(map: ref[Map[T1, T2]], useIndex: Bool) {
            this.keys = map.keys;
            this.values = map.values;
            if useIndex {
                this.keysIndex~no_deref = ArrayIndex[T1].constructToNew(this.keys);
                if map.keysIndex~ptr != 0 this.keysIndex.indicies = map.keysIndex.indicies
                else this.keysIndex.add(-1);
            } else {
                this.keysIndex~ptr = 0;
            }
        };

        handler this~terminate() {
            if this.keysIndex~ptr != 0 ArrayIndex[T1].release(this.keysIndex);
        };

        handler this = ref[Map[T1, T2]] {
            this.keys = value.keys;
            this.values = value.values;
            if this.keysIndex~ptr != 0 {
                if map.keysIndex~ptr != 0 this.keysIndex.indicies = map.keysIndex.indicies
                else {
                    this.keysIndex.clear();
                    this.keysIndex.add(-1);
                }
            }
        };

        handler this(key: T1): ref[T2] {
            def i: Int = this.findPos(key);
            if i == -1 {
                i = this.keys.getLength();
                this.keys.add(key);
                this.values.add(T2());
                if this.keysIndex~ptr != 0 this.keysIndex.add(-1);
            }
            return this.values(i);
        };

        func keyAt(i: Int): ref[T1] {
            if i < 0 || i >= this.keys.getLength() {
                System.fail(1, "Argument `i` is out of range.");
            }
            return this.keys(i);
        }

        func valAt(i: Int): ref[T2] {
            if i < 0 || i >= this.keys.getLength() {
                System.fail(1, "Argument `i` is out of range.");
            }
            return this.values(i);
        }

        func set(key: T1, value: T2): ref[Map[T1, T2]] {
            def pos: Int = this.findPos(key);
            if pos == -1 {
                this.keys.add(key);
                this.values.add(value);
                if this.keysIndex~ptr != 0 this.keysIndex.add(-1);
            } else {
                this.values(pos) = value;
            }
            return this;
        };

        func setAt(i: Int, value: T2): ref[Map[T1, T2]] {
            if i < 0 || i >= this.keys.getLength() {
                System.fail(1, "Argument `i` is out of range.");
            }
            this.values(i) = value;
            return this;
        }

        func remove(key: T1): Bool {
            def pos: Int = this.findPos(key);
            if pos == -1 return false;
            return this.removeAt(pos);
        };

        func removeAt(i: Int) {
            if i < 0 || i >= this.keys.getLength() {
                System.fail(1, "Argument `i` is out of range.");
            }
            this.keys.remove(i);
            this.values.remove(i);
            if this.keysIndex~ptr != 0 this.keysIndex.remove(-1);
        };

        func clear() {
            this.keys.clear();
            this.values.clear();
            this.keysIndex.clear();
        };

        func getLength(): Int {
            return this.keys.getLength();
        };

        func findPos (key: T1): Int {
            if this.keysIndex~ptr == 0 {
                return this.keys.findPos(key);
            } else {
                return this.keysIndex.findPos(key);
            };
        };
    };
};
