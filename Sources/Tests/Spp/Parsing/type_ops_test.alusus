import "alusus_spp";

class T {
  def i: Int;

  handler this~init() {};
  handler this~init(a: Int, b: Float) {};
  handler this~init(a, b) {};
  handler this~init {};
  handler this~init[] {};

  handler this~terminate() {};
  handler this~terminate(a: Int) {};
  handler this~terminate {};
  handler this~terminate[] {};

  handler this = Int this.i = value;
  handler this = (v:Int) this.i = v;

  handler this += Int this.i += value;
  handler this /= Int this.i /= value;

  handler this = ref[this_type] this.i = value.i;
  handler this = (v:ref[this_type]) this.i = v.i;

  handler this > Int return this.i > value;

  handler this - Int : Int return this.i - value;
  handler this * Int : A {
    def ret: A;
    ret.i = this.i * value;
    return ret;
  };

  handler this << Int : Int { return this.i << value };

  handler this $ Int : Int return this.i $ value;

  handler this~cast[Int] return this.i;
  handler this~cast return this.i;

  handler notThis = Int notThis.i += value;
  handler notThis == Int return notThis.i == value;
  handler notThis + Int: Int return notThis.i + value;
  handler notThis~cast[Int] return notThis.i;
  handler notThis() {}

  handler this = [v: Int] this.i = value;
  handler this = (this: Int) this.i = 5;

  handler this() return this.i;
  handler this(Int) this.i += value;
  handler this(f: float) => Float[64] {
    return this.i + (f+0.5);
  };


  handler this.myprop = Int this.i = value;
  handler this.myprop = (v:Int) this.i = v;

  handler this.myprop += Int this.i += value;
  handler this.myprop /= Int this.i /= value;

  handler this.myprop = ref[this_type] this.i = value.i;
  handler this.myprop = (v:ref[this_type]) this.i = v.i;

  handler this.myprop > Int return this.i > value;

  handler this.myprop - Int : Int return this.i - value;
  handler this.myprop * Int : A {
    def ret: A;
    ret.i = this.i * value;
    return ret;
  };

  handler this.myprop << Int : Int { return this.i << value };

  handler this.myprop $ Int : Int return this.i $ value;

  handler this.myprop:Int return this.i;

  handler this.myprop() return this.i;
  handler this.myprop(Int) this.i += value;
  handler this.myprop(f: float) => Float[64] {
    return this.i + (f+0.5);
  };

  @expname[f2]
  @customMod["hello"]
  handler this.f1(d: Int) {
  }

  handler this.myprop();
  handler this~init(p: ptr) as_ptr {};
  handler (this:prop):int { return 0 };
  handler this.prop { return 0 }
  handler that~init() {}
  handler this~init(p: ptr, p: ptr) {}
  handler this(a: Int, b: Int) {}
  handler this = [v: Int] {}
  handler that.prop() {}
  handler this."prop"() {}
  handler (that:Parent)() {}
  handler (that:Parent).prop() {}
  handler (this->Parent).prop() {}

  handler this_type() {}
  handler this_type(): ref[T] {}
  handler this_type(n: Int): ref[T] {}

  handler [T: type] this.myprop(a: T): T {}
  handler [T: type] this.myprop(a: T): T as_ptr {}
  handler [T: type] this.myprop(a: T): T as_ptr;
  handler [T: type] this.myprop(a: T): T set_ptr {}

  handler [T: type] myprop(a: T): T {}
};

dump_ast T;
