ERROR CP1001 @ (26,25): Parser syntax error.
ERROR SPPH1010 @ (27,3): Invalid for statement.
ERROR CP1001 @ (28,40): Parser syntax error.
------------------ Parsed Data Dump ------------------
Function  [Main.Function]
 type: FunctionType member: 0 [Main.Function]
  argTypes: NULL
  retType: Identifier: Void [Main.ParamOnlySubject.Identifier]
 body: Block [Main.BlockStatements.StmtList]
  ForStatement [Main.For]
   initializer: AssignmentOperator = [Main.Expression.AssignmentExp]
    first: Identifier: i [Main.BlockSubject.Identifier]
    second: IntegerLiteral: 0 [Main.BlockSubject.Literal]
   condition: ComparisonOperator < [Main.Expression.ComparisonExp]
    first: Identifier: i [Main.BlockSubject.Identifier]
    second: IntegerLiteral: 10 [Main.BlockSubject.Literal]
   updater: PostfixOperator ++ [Main.Expression.UnaryExp]
    operand: Identifier: i [Main.BlockSubject.Identifier]
   body: ParamPass () [Main.Expression.ParamPassExp]
    operand: Identifier: doSomething [Main.BlockSubject.Identifier]
    param: Identifier: i [Main.BlockSubject.Identifier]
  ForStatement [Main.For]
   initializer: NULL
   condition: ComparisonOperator < [Main.Expression.ComparisonExp]
    first: Identifier: i [Main.BlockSubject.Identifier]
    second: IntegerLiteral: 10 [Main.BlockSubject.Literal]
   updater: PostfixOperator ++ [Main.Expression.UnaryExp]
    operand: Identifier: i [Main.BlockSubject.Identifier]
   body: ParamPass () [Main.Expression.ParamPassExp]
    operand: Identifier: doSomething [Main.BlockSubject.Identifier]
    param: Identifier: i [Main.BlockSubject.Identifier]
  ForStatement [Main.For]
   initializer: Bracket () [Main.BlockSubject.Sbj]
    operand: List [Main.Expression.ListExp]
     AssignmentOperator = [Main.Expression.AssignmentExp]
      first: Identifier: i [Main.BlockSubject.Identifier]
      second: IntegerLiteral: 0 [Main.BlockSubject.Literal]
     AssignmentOperator = [Main.Expression.AssignmentExp]
      first: Identifier: j [Main.BlockSubject.Identifier]
      second: IntegerLiteral: 0 [Main.BlockSubject.Literal]
   condition: ComparisonOperator < [Main.Expression.ComparisonExp]
    first: Identifier: i [Main.BlockSubject.Identifier]
    second: IntegerLiteral: 10 [Main.BlockSubject.Literal]
   updater: Bracket () [Main.BlockSubject.Sbj]
    operand: List [Main.Expression.ListExp]
     PrefixOperator ++ [Main.Expression.UnaryExp]
      operand: Identifier: i [Main.BlockSubject.Identifier]
     AssignmentOperator += [Main.Expression.AssignmentExp]
      first: Identifier: j [Main.BlockSubject.Identifier]
      second: IntegerLiteral: 2 [Main.BlockSubject.Literal]
   body: ParamPass () [Main.Expression.ParamPassExp]
    operand: Identifier: doSomething [Main.BlockSubject.Identifier]
    param: Identifier: j [Main.BlockSubject.Identifier]
  ForStatement [Main.For]
   initializer: AssignmentOperator = [Main.Expression.AssignmentExp]
    first: Identifier: i [Main.BlockSubject.Identifier]
    second: IntegerLiteral: 0 [Main.BlockSubject.Literal]
   condition: ComparisonOperator < [Main.Expression.ComparisonExp]
    first: Identifier: i [Main.BlockSubject.Identifier]
    second: IntegerLiteral: 10 [Main.BlockSubject.Literal]
   updater: PostfixOperator ++ [Main.Expression.UnaryExp]
    operand: Identifier: i [Main.BlockSubject.Identifier]
   body: Block [Main.BlockStatements.StmtList]
    ParamPass () [Main.Expression.ParamPassExp]
     operand: Identifier: doSomething1 [Main.BlockSubject.Identifier]
     param: Identifier: i [Main.BlockSubject.Identifier]
    ParamPass () [Main.Expression.ParamPassExp]
     operand: Identifier: doSomething2 [Main.BlockSubject.Identifier]
     param: Identifier: i [Main.BlockSubject.Identifier]
  ForStatement [Main.For]
   initializer: NULL
   condition: ComparisonOperator < [Main.Expression.ComparisonExp]
    first: Identifier: i [Main.BlockSubject.Identifier]
    second: IntegerLiteral: 10 [Main.BlockSubject.Literal]
   updater: PostfixOperator ++ [Main.Expression.UnaryExp]
    operand: Identifier: i [Main.BlockSubject.Identifier]
   body: Block [Main.BlockStatements.StmtList]
    ParamPass () [Main.Expression.ParamPassExp]
     operand: Identifier: doSomething1 [Main.BlockSubject.Identifier]
     param: Identifier: i [Main.BlockSubject.Identifier]
    ParamPass () [Main.Expression.ParamPassExp]
     operand: Identifier: doSomething2 [Main.BlockSubject.Identifier]
     param: Identifier: i [Main.BlockSubject.Identifier]
  ForStatement [Main.For]
   initializer: Bracket () [Main.BlockSubject.Sbj]
    operand: List [Main.Expression.ListExp]
     AssignmentOperator = [Main.Expression.AssignmentExp]
      first: Identifier: i [Main.BlockSubject.Identifier]
      second: IntegerLiteral: 0 [Main.BlockSubject.Literal]
     AssignmentOperator = [Main.Expression.AssignmentExp]
      first: Identifier: j [Main.BlockSubject.Identifier]
      second: IntegerLiteral: 0 [Main.BlockSubject.Literal]
   condition: ComparisonOperator < [Main.Expression.ComparisonExp]
    first: Identifier: i [Main.BlockSubject.Identifier]
    second: IntegerLiteral: 10 [Main.BlockSubject.Literal]
   updater: Bracket () [Main.BlockSubject.Sbj]
    operand: List [Main.Expression.ListExp]
     PrefixOperator ++ [Main.Expression.UnaryExp]
      operand: Identifier: i [Main.BlockSubject.Identifier]
     AssignmentOperator += [Main.Expression.AssignmentExp]
      first: Identifier: j [Main.BlockSubject.Identifier]
      second: IntegerLiteral: 2 [Main.BlockSubject.Literal]
   body: Block [Main.BlockStatements.StmtList]
    ParamPass () [Main.Expression.ParamPassExp]
     operand: Identifier: doSomething1 [Main.BlockSubject.Identifier]
     param: Identifier: j [Main.BlockSubject.Identifier]
    ParamPass () [Main.Expression.ParamPassExp]
     operand: Identifier: doSomething2 [Main.BlockSubject.Identifier]
     param: Identifier: j [Main.BlockSubject.Identifier]
------------------------------------------------------
