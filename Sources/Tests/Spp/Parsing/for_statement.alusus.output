ERROR CP1001 @ (26,25): Parser syntax error.
ERROR SPPH1010 @ (27,3): Invalid for statement.
ERROR CP1001 @ (28,40): Parser syntax error.
------------------ Parsed Data Dump ------------------
Function  [Main.Function]
 type: FunctionType [Main.Function]
  argTypes: NULL
  retType: Identifier: Void [Subject.Identifier]
 body: Block [Main.BlockStatements.StmtList]
  ForStatement [Main.For]
   initializer: AssignmentOperator = [Expression.AssignmentExp]
    first: Identifier: i [Subject.Identifier]
    second: IntegerLiteral: 0 [Subject.Literal]
   condition: ComparisonOperator < [Expression.ComparisonExp]
    first: Identifier: i [Subject.Identifier]
    second: IntegerLiteral: 10 [Subject.Literal]
   updater: PostfixOperator ++ [Expression.UnaryExp]
    operand: Identifier: i [Subject.Identifier]
   body: ParamPass () [Expression.ParamPassExp]
    operand: Identifier: doSomething [Subject.Identifier]
    param: Identifier: i [Subject.Identifier]
  ForStatement [Main.For]
   initializer: NULL
   condition: ComparisonOperator < [Expression.ComparisonExp]
    first: Identifier: i [Subject.Identifier]
    second: IntegerLiteral: 10 [Subject.Literal]
   updater: PostfixOperator ++ [Expression.UnaryExp]
    operand: Identifier: i [Subject.Identifier]
   body: ParamPass () [Expression.ParamPassExp]
    operand: Identifier: doSomething [Subject.Identifier]
    param: Identifier: i [Subject.Identifier]
  ForStatement [Main.For]
   initializer: Bracket () [Subject.Sbj]
    operand: List [Expression.ListExp]
     AssignmentOperator = [Expression.AssignmentExp]
      first: Identifier: i [Subject.Identifier]
      second: IntegerLiteral: 0 [Subject.Literal]
     AssignmentOperator = [Expression.AssignmentExp]
      first: Identifier: j [Subject.Identifier]
      second: IntegerLiteral: 0 [Subject.Literal]
   condition: ComparisonOperator < [Expression.ComparisonExp]
    first: Identifier: i [Subject.Identifier]
    second: IntegerLiteral: 10 [Subject.Literal]
   updater: Bracket () [Subject.Sbj]
    operand: List [Expression.ListExp]
     PrefixOperator ++ [Expression.UnaryExp]
      operand: Identifier: i [Subject.Identifier]
     AssignmentOperator += [Expression.AssignmentExp]
      first: Identifier: j [Subject.Identifier]
      second: IntegerLiteral: 2 [Subject.Literal]
   body: ParamPass () [Expression.ParamPassExp]
    operand: Identifier: doSomething [Subject.Identifier]
    param: Identifier: j [Subject.Identifier]
  ForStatement [Main.For]
   initializer: AssignmentOperator = [Expression.AssignmentExp]
    first: Identifier: i [Subject.Identifier]
    second: IntegerLiteral: 0 [Subject.Literal]
   condition: ComparisonOperator < [Expression.ComparisonExp]
    first: Identifier: i [Subject.Identifier]
    second: IntegerLiteral: 10 [Subject.Literal]
   updater: PostfixOperator ++ [Expression.UnaryExp]
    operand: Identifier: i [Subject.Identifier]
   body: Block [Main.BlockStatements.StmtList]
    ParamPass () [Expression.ParamPassExp]
     operand: Identifier: doSomething1 [Subject.Identifier]
     param: Identifier: i [Subject.Identifier]
    ParamPass () [Expression.ParamPassExp]
     operand: Identifier: doSomething2 [Subject.Identifier]
     param: Identifier: i [Subject.Identifier]
  ForStatement [Main.For]
   initializer: NULL
   condition: ComparisonOperator < [Expression.ComparisonExp]
    first: Identifier: i [Subject.Identifier]
    second: IntegerLiteral: 10 [Subject.Literal]
   updater: PostfixOperator ++ [Expression.UnaryExp]
    operand: Identifier: i [Subject.Identifier]
   body: Block [Main.BlockStatements.StmtList]
    ParamPass () [Expression.ParamPassExp]
     operand: Identifier: doSomething1 [Subject.Identifier]
     param: Identifier: i [Subject.Identifier]
    ParamPass () [Expression.ParamPassExp]
     operand: Identifier: doSomething2 [Subject.Identifier]
     param: Identifier: i [Subject.Identifier]
  ForStatement [Main.For]
   initializer: Bracket () [Subject.Sbj]
    operand: List [Expression.ListExp]
     AssignmentOperator = [Expression.AssignmentExp]
      first: Identifier: i [Subject.Identifier]
      second: IntegerLiteral: 0 [Subject.Literal]
     AssignmentOperator = [Expression.AssignmentExp]
      first: Identifier: j [Subject.Identifier]
      second: IntegerLiteral: 0 [Subject.Literal]
   condition: ComparisonOperator < [Expression.ComparisonExp]
    first: Identifier: i [Subject.Identifier]
    second: IntegerLiteral: 10 [Subject.Literal]
   updater: Bracket () [Subject.Sbj]
    operand: List [Expression.ListExp]
     PrefixOperator ++ [Expression.UnaryExp]
      operand: Identifier: i [Subject.Identifier]
     AssignmentOperator += [Expression.AssignmentExp]
      first: Identifier: j [Subject.Identifier]
      second: IntegerLiteral: 2 [Subject.Literal]
   body: Block [Main.BlockStatements.StmtList]
    ParamPass () [Expression.ParamPassExp]
     operand: Identifier: doSomething1 [Subject.Identifier]
     param: Identifier: j [Subject.Identifier]
    ParamPass () [Expression.ParamPassExp]
     operand: Identifier: doSomething2 [Subject.Identifier]
     param: Identifier: j [Subject.Identifier]
------------------------------------------------------
