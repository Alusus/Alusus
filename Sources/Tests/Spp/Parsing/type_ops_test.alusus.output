[0;31mERROR SPPH1006: Invalid function arg name.[0m
  type_ops_test.alusus (8,24)
[0;31mERROR CP1001: Parser syntax error.[0m
  type_ops_test.alusus (9,21)
[0;31mERROR CP1001: Parser syntax error.[0m
  type_ops_test.alusus (10,20)
[0;31mERROR CP1001: Parser syntax error.[0m
  type_ops_test.alusus (13,26)
[0;31mERROR CP1001: Parser syntax error.[0m
  type_ops_test.alusus (14,26)
[0;31mERROR CP1001: Parser syntax error.[0m
  type_ops_test.alusus (15,25)
[0;31mERROR CP1001: Parser syntax error.[0m
  type_ops_test.alusus (40,21)
[0;31mERROR SPPH1020: Operation target must be `this`.[0m
  type_ops_test.alusus (42,11)
[0;31mERROR SPPH1020: Operation target must be `this`.[0m
  type_ops_test.alusus (43,11)
[0;31mERROR SPPH1020: Operation target must be `this`.[0m
  type_ops_test.alusus (44,11)
[0;31mERROR SPPH1020: Operation target must be `this`.[0m
  type_ops_test.alusus (45,11)
[0;31mERROR SPPH1020: Operation target must be `this`.[0m
  type_ops_test.alusus (46,11)
[0;31mERROR SPPH1022: Invalid use of square brackets.[0m
  type_ops_test.alusus (48,18)
[0;31mERROR SPPH1014: Invalid handler statement.[0m
  type_ops_test.alusus (49,19)
[0;31mERROR SPPH1018: ~init operations cannot be pointer based.[0m
  type_ops_test.alusus (94,3)
[0;31mERROR SPPH1014: Invalid handler statement.[0m
  type_ops_test.alusus (95,3)
[0;31mERROR SPPH1019: Property getter is missing the return type.[0m
  type_ops_test.alusus (96,11)
[0;31mERROR SPPH1020: Operation target must be `this`.[0m
  type_ops_test.alusus (97,11)
[0;31mERROR SPPH1006: Invalid function arg name.[0m
  type_ops_test.alusus (98,29)
[0;31mERROR SPPH1022: Invalid use of square brackets.[0m
  type_ops_test.alusus (100,18)
[0;31mERROR SPPH1020: Operation target must be `this`.[0m
  type_ops_test.alusus (101,11)
[0;31mERROR SPPH1023: Invalid type property identifier.[0m
  type_ops_test.alusus (102,11)
[0;31mERROR SPPH1020: Operation target must be `this`.[0m
  type_ops_test.alusus (103,11)
[0;31mERROR SPPH1020: Operation target must be `this`.[0m
  type_ops_test.alusus (104,11)
[0;31mERROR SPPH1014: Invalid handler statement.[0m
  type_ops_test.alusus (105,11)
[0;31mERROR SPPH1025: Template handler statement must not be a pointer.[0m
  type_ops_test.alusus (112,3)
[0;31mERROR SPPH1025: Template handler statement must not be a pointer.[0m
  type_ops_test.alusus (113,3)
[0;31mERROR SPPH1025: Template handler statement must not be a pointer.[0m
  type_ops_test.alusus (114,3)
[0;31mERROR SPPH1020: Operation target must be `this`.[0m
  type_ops_test.alusus (116,21)
------------------ Parsed Data Dump ------------------
UserType [Main.Type]
 body: Block [Main.BlockStatements.StmtList]
  Definition [Main.Def] i: Identifier: Int [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] ~init
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ~init
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
      retType: NULL
     body: Block [Main.BlockStatements.StmtList]
  Definition [Main.LeadingCmdGrp] ~init
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ~init
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       a: Identifier: Int [Main.BlockSubject.Identifier]
       b: Identifier: Float [Main.BlockSubject.Identifier]
      retType: NULL
     body: Block [Main.BlockStatements.StmtList]
  Block [Main.BlockStatements.StmtList]
  Bracket [] [Main.BlockSubject.Sbj]
   operand: NULL
  Block [Main.BlockStatements.StmtList]
  Definition [Main.LeadingCmdGrp] ~terminate
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ~terminate
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
      retType: NULL
     body: Block [Main.BlockStatements.StmtList]
  Definition [Main.LeadingCmdGrp] ~terminate
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ~terminate
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
      retType: NULL
     body: Block [Main.BlockStatements.StmtList]
  Block [Main.BlockStatements.StmtList]
  Bracket [] [Main.BlockSubject.Sbj]
   operand: NULL
  Block [Main.BlockStatements.StmtList]
  Definition [Main.LeadingCmdGrp] =
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: =
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: ParamPass []
       operand: Identifier: ref
       param: ThisTypeRef
     body: Block
      AssignmentOperator = [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: Identifier: value [Main.Keywords]
      ReturnStatement
       operand: Identifier: this
  Definition [Main.LeadingCmdGrp] =
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: =
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       v: Identifier: Int [Main.BlockSubject.Identifier]
      retType: ParamPass []
       operand: Identifier: ref
       param: ThisTypeRef
     body: Block
      AssignmentOperator = [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: Identifier: v [Main.BlockSubject.Identifier]
      ReturnStatement
       operand: Identifier: this
  Definition [Main.LeadingCmdGrp] +=
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: +=
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: ParamPass []
       operand: Identifier: ref
       param: ThisTypeRef
     body: Block
      AssignmentOperator += [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: Identifier: value [Main.Keywords]
      ReturnStatement
       operand: Identifier: this
  Definition [Main.LeadingCmdGrp] /=
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: /=
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: ParamPass []
       operand: Identifier: ref
       param: ThisTypeRef
     body: Block
      AssignmentOperator /= [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: Identifier: value [Main.Keywords]
      ReturnStatement
       operand: Identifier: this
  Definition [Main.LeadingCmdGrp] =
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: =
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: ParamPass [] [Main.Expression.ParamPassExp]
        operand: Identifier: ref [Main.BlockSubject.Identifier]
        param: ThisTypeRef [Main.ThisTypeRef]
      retType: ParamPass []
       operand: Identifier: ref
       param: ThisTypeRef
     body: Block
      AssignmentOperator = [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: value [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
      ReturnStatement
       operand: Identifier: this
  Definition [Main.LeadingCmdGrp] =
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: =
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       v: ParamPass [] [Main.Expression.ParamPassExp]
        operand: Identifier: ref [Main.BlockSubject.Identifier]
        param: ThisTypeRef [Main.ThisTypeRef]
      retType: ParamPass []
       operand: Identifier: ref
       param: ThisTypeRef
     body: Block
      AssignmentOperator = [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: v [Main.BlockSubject.Identifier]
        second: Identifier: i [Main.BlockSubject.Identifier]
      ReturnStatement
       operand: Identifier: this
  Definition [Main.LeadingCmdGrp] >
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: >
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: ParamPass []
       operand: Identifier: Word
       param: IntegerLiteral: 1
     body: Block
      ReturnStatement [Main.Return]
       operand: ComparisonOperator > [Main.Expression.ComparisonExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] -
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: -
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block
      ReturnStatement [Main.Return]
       operand: AdditionOperator - [Main.Expression.AddExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] *
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: *
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: A [Main.BlockSubject.Identifier]
     body: Block [Main.BlockStatements.StmtList]
      Definition [Main.Def] ret: Identifier: A [Main.BlockSubject.Identifier]
      AssignmentOperator = [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: ret [Main.BlockSubject.Identifier]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: MultiplicationOperator * [Main.Expression.MulExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Identifier: value [Main.Keywords]
      ReturnStatement [Main.Return]
       operand: Identifier: ret [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] <<
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: <<
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block [Main.BlockStatements.StmtList]
      ReturnStatement [Main.Return]
       operand: BitwiseOperator << [Main.Expression.BitwiseExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] $
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: $
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block
      ReturnStatement [Main.Return]
       operand: BitwiseOperator $ [Main.Expression.BitwiseExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] ~cast
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ~cast
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block
      ReturnStatement [Main.Return]
       operand: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
  ReturnStatement [Main.Return]
   operand: LinkOperator . [Main.Expression.LinkExp]
    first: Identifier: this [Main.Keywords]
    second: Identifier: i [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] ()
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
      retType: NULL
     body: Block
      ReturnStatement [Main.Return]
       operand: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] ()
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: NULL
     body: Block
      AssignmentOperator += [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] ()
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       f: Identifier: float [Main.BlockSubject.Identifier]
      retType: ParamPass [] [Main.Expression.ParamPassExp]
       operand: Identifier: Float [Main.BlockSubject.Identifier]
       param: IntegerLiteral: 64 [Main.BlockSubject.Literal]
     body: Block [Main.BlockStatements.StmtList]
      ReturnStatement [Main.Return]
       operand: AdditionOperator + [Main.Expression.AddExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Bracket () [Main.BlockSubject.Sbj]
         operand: AdditionOperator + [Main.Expression.AddExp]
          first: Identifier: f [Main.BlockSubject.Identifier]
          second: FloatLiteral: 0.5 [Main.BlockSubject.Literal]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: =
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block
      AssignmentOperator = [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: =
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       v: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block
      AssignmentOperator = [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: Identifier: v [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: +=
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block
      AssignmentOperator += [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: /=
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block
      AssignmentOperator /= [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: =
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: ParamPass [] [Main.Expression.ParamPassExp]
        operand: Identifier: ref [Main.BlockSubject.Identifier]
        param: ThisTypeRef [Main.ThisTypeRef]
      retType: ParamPass [] [Main.Expression.ParamPassExp]
       operand: Identifier: ref [Main.BlockSubject.Identifier]
       param: ThisTypeRef [Main.ThisTypeRef]
     body: Block
      AssignmentOperator = [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: value [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: =
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       v: ParamPass [] [Main.Expression.ParamPassExp]
        operand: Identifier: ref [Main.BlockSubject.Identifier]
        param: ThisTypeRef [Main.ThisTypeRef]
      retType: ParamPass [] [Main.Expression.ParamPassExp]
       operand: Identifier: ref [Main.BlockSubject.Identifier]
       param: ThisTypeRef [Main.ThisTypeRef]
     body: Block
      AssignmentOperator = [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: v [Main.BlockSubject.Identifier]
        second: Identifier: i [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: >
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: ParamPass []
       operand: Identifier: Word
       param: IntegerLiteral: 1
     body: Block
      ReturnStatement [Main.Return]
       operand: ComparisonOperator > [Main.Expression.ComparisonExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: -
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block
      ReturnStatement [Main.Return]
       operand: AdditionOperator - [Main.Expression.AddExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: *
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: A [Main.BlockSubject.Identifier]
     body: Block [Main.BlockStatements.StmtList]
      Definition [Main.Def] ret: Identifier: A [Main.BlockSubject.Identifier]
      AssignmentOperator = [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: ret [Main.BlockSubject.Identifier]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: MultiplicationOperator * [Main.Expression.MulExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Identifier: value [Main.Keywords]
      ReturnStatement [Main.Return]
       operand: Identifier: ret [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: <<
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block [Main.BlockStatements.StmtList]
      ReturnStatement [Main.Return]
       operand: BitwiseOperator << [Main.Expression.BitwiseExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: $
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block
      ReturnStatement [Main.Return]
       operand: BitwiseOperator $ [Main.Expression.BitwiseExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: 
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
      retType: Identifier: Int [Main.BlockSubject.Identifier]
     body: Block
      ReturnStatement [Main.Return]
       operand: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
      retType: NULL
     body: Block
      ReturnStatement [Main.Return]
       operand: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       value: Identifier: Int [Main.BlockSubject.Identifier]
      retType: NULL
     body: Block
      AssignmentOperator += [Main.Expression.AssignmentExp]
       first: LinkOperator . [Main.Expression.LinkExp]
        first: Identifier: this [Main.Keywords]
        second: Identifier: i [Main.BlockSubject.Identifier]
       second: Identifier: value [Main.Keywords]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       f: Identifier: float [Main.BlockSubject.Identifier]
      retType: ParamPass [] [Main.Expression.ParamPassExp]
       operand: Identifier: Float [Main.BlockSubject.Identifier]
       param: IntegerLiteral: 64 [Main.BlockSubject.Literal]
     body: Block [Main.BlockStatements.StmtList]
      ReturnStatement [Main.Return]
       operand: AdditionOperator + [Main.Expression.AddExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: i [Main.BlockSubject.Identifier]
        second: Bracket () [Main.BlockSubject.Sbj]
         operand: AdditionOperator + [Main.Expression.AddExp]
          first: Identifier: f [Main.BlockSubject.Identifier]
          second: FloatLiteral: 0.5 [Main.BlockSubject.Literal]
  Definition [Main.LeadingCmdGrp] f1
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
    ParamPass [] [Modifier.Expression.ParamPassExp]
     operand: Identifier: customMod [Modifier.Subject.Identifier]
     param: StringLiteral: hello [Main.BlockSubject.Literal]
   target: Function f2
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       d: Identifier: Int [Main.BlockSubject.Identifier]
      retType: NULL
     body: Block [Main.BlockStatements.StmtList]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
      retType: NULL
     body: NULL
  Definition [Main.LeadingCmdGrp] ()
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: ref
        param: ThisTypeRef
       a: Identifier: Int [Main.BlockSubject.Identifier]
       b: Identifier: Int [Main.BlockSubject.Identifier]
      retType: NULL
     body: Block [Main.BlockStatements.StmtList]
  Definition [Main.LeadingCmdGrp] ()
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 0
      argTypes: Map
      retType: NULL
     body: Block [Main.BlockStatements.StmtList]
  Definition [Main.LeadingCmdGrp] ()
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 0
      argTypes: Map
      retType: ParamPass [] [Main.Expression.ParamPassExp]
       operand: Identifier: ref [Main.BlockSubject.Identifier]
       param: Identifier: T [Main.BlockSubject.Identifier]
     body: Block [Main.BlockStatements.StmtList]
  Definition [Main.LeadingCmdGrp] ()
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 0
      argTypes: Map
       n: Identifier: Int [Main.BlockSubject.Identifier]
      retType: ParamPass [] [Main.Expression.ParamPassExp]
       operand: Identifier: ref [Main.BlockSubject.Identifier]
       param: Identifier: T [Main.BlockSubject.Identifier]
     body: Block [Main.BlockStatements.StmtList]
  Definition [Main.LeadingCmdGrp] myprop
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Template
     -varDefs:
      T: Type
     -body:
      Function 
       type: FunctionType member: 1
        argTypes: Map
         this: ParamPass []
          operand: Identifier: ref
          param: ThisTypeRef
         a: Identifier: T [Main.BlockSubject.Identifier]
        retType: Identifier: T [Main.BlockSubject.Identifier]
       body: Block [Main.BlockStatements.StmtList]
     -instances:
------------------------------------------------------
