import "libalusus_spp.so";

def Main: module
{
  def print: @expname[printf] function (fmt: ptr[Word[8]], args: ...any)=>Int[64];

  def i: Int[32];
  def j: Int[32];

  def start: function ()=>Void
  {
    i = 1;
    j = 2;

    Other.i = 3;
    Other.pi = i~ptr;
    Other.Nested.i = 4;
    Other.Nested.pi = j~ptr;

    Other.f(5);
    Other.f(6.0f64);
    Other.printThem();

    Other.Nested.f(7);
    Other.Nested.f(8.0f64);
    Other.Nested.printThem();

    Other.f(Other.Nested.pi~cnt);
    Other.f(Other.Nested.i~cast[Float[64]]);
  }
};

def Other: module
{
  def i: Int[32];
  def pi: ptr[Int[32]];

  def f: function (i: Int[32]) => Void
  {
    Main.print("Other.f(Int[32]): i = %d\n", i);
  };

  def f: function (f: Float[64]) => Void
  {
    Main.print("Other.f(Float[64]): f = %f\n", f);
  };

  def printThem: function ()=>Void
  {
    Main.print("Other.i = %d\n", i);
    Main.print("Other.pi~cnt = %d\n", pi~cnt);
  };

  def Nested: module
  {
    def i: Int[32];
    def pi: ptr[Int[32]];

    def f: function (i: Int[32]) => Void
    {
      Main.print("Other.Nested.f(Int[32]): i = %d\n", i);
    };

    def f: function (f: Float[64]) => Void
    {
      Main.print("Other.Nested.f(Float[64]): f = %f\n", f);
    };

    def printThem: function ()=>Void
    {
      Main.print("Other.Nested.i = %d\n", i);
      Main.print("Other.Nested.pi~cnt = %d\n", pi~cnt);
    };
  };
};

Main.start();
