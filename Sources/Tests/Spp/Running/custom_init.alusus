import "Srl/Console.alusus";

type A
{
  def i: Int;

  handler this~init() {
    Srl.Console.print("A constructed!\n");
    this.i = 1;
  };

  handler this~init(that: ref[A]) {
    Srl.Console.print("A constructed2!\n");
    this.i = that.i * 2;
  };

  handler this~init(that: ref[A], extra: Int) {
    Srl.Console.print("A constructed3!\n");
    this~init(that);
    this.i += extra;
  };

  handler this~terminate() {
    this.i = 0;
    Srl.Console.print("A destructed!\n");
  };
};

type B
{
  def a: A;
  def a2: A;
};

type C
{
  def i: Int;
  def j: Int(17);
  Srl.Console.print("C constructed!\n");
  i = 3;
};

type D
{
    def a: A;
    Srl.Console.print("D constructed!\n");
    handler this~init() {
        Srl.Console.print("D~init()\n");
    }
    handler this~terminate() {
        Srl.Console.print("D destructed!\n");
    }
};

function testNoReturn
{
  def a: A;
  Srl.Console.print("testNoReturn: %d\n", a.i);
};

function testReturnVoid
{
  def a: A;
  Srl.Console.print("testReturnVoid: %d\n", a.i);
  return;
};

function testReturnNonVoid ()=>Int
{
  def a: A;
  Srl.Console.print("testReturnNonVoid: %d\n", a.i);
  return a.i;
};

function getA () => A
{
  def a: A;
  Srl.Console.print("getA.\n");
  return a;
};

function receiveA (a: A) {}

function testReturnA
{
  getA();
  Srl.Console.print("testReturnA.\n");
};

function testLoop
{
  def i: Int = 2;
  while i > 0 {
    def a: A;
    Srl.Console.print("testLoop: %d\n", a.i);
    --i;
  };
  Srl.Console.print("testLoop-out.\n");
};

function testBreak
{
  while 1 {
    def a: A;
    Srl.Console.print("testBreak: %d\n", a.i);
    if 1 == 1 break;
    Srl.Console.print("testBreak-after.\n");
  };
  while 1 {
    def a: A;
    while 1 {
      def b: A;
      Srl.Console.print("testBreak-nested: %d, %d\n", a.i, b.i);
      break 2;
    };
    Srl.Console.print("testBreak-afterOuter.\n");
  };
  Srl.Console.print("testBreak-out.\n");
};

function testContinue
{
  def i: Int;
  for i = 0, i < 1, ++i {
    def a: A;
    Srl.Console.print("testContinue: %d\n", a.i);
    if i == 0 continue;
    Srl.Console.print("testContinue-after.\n");
  };
  for i = 0, i < 1, ++i {
    def a: A;
    while 1 {
      def b: A;
      Srl.Console.print("testContinue-nested: %d, %d\n", a.i, b.i);
      continue 2;
    };
    Srl.Console.print("testContinue-afterOuter.\n");
  };
  Srl.Console.print("testContinue-out.\n");
};

function testAutoInit
{
  def b: B;
  Srl.Console.print("testAutoInit: %d, %d\n", b.a.i, b.a2.i);
};

function testInlinedInit
{
  def gc: C;
  Srl.Console.print("testInlinedInit: %d, %d\n", gc.i, gc.j);
};

function testInitRedirect
{
  def a1: A;
  a1.i = 5;
  def a2: A;
  a2~init(a1, 3);
  Srl.Console.print("testInitRedirect: %d\n", a2.i);
};

function testTerminate
{
  def a: A;
  Srl.Console.print("testTerminate\n");
  receiveA(a);
};

function testBothInitMethod
{
    def d: D;
    Srl.Console.print("testBothInitMethod\n");
};

testNoReturn();
Srl.Console.print("\n");

testReturnVoid();
Srl.Console.print("\n");

def n: Int = testReturnNonVoid();
Srl.Console.print("returned value: %d\n", n);
Srl.Console.print("\n");

testReturnA();
Srl.Console.print("\n");

testLoop();
Srl.Console.print("\n");

testBreak();
Srl.Console.print("\n");

testContinue();
Srl.Console.print("\n");

testAutoInit();
Srl.Console.print("\n");

def ga: A;
def i: Int;
for i = 0, i < 2, ++i {
  def a: A;
  Srl.Console.print("autoCtor on the global scope: %d %d\n", a.i, ga.i);
};
Srl.Console.print("\n");

testInlinedInit();
Srl.Console.print("\n");

testInitRedirect();
Srl.Console.print("\n");

testTerminate();
Srl.Console.print("\n");

testBothInitMethod();
