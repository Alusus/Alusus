import "alusus_spp";

def Main: module
{
  def printf: @expname[printf] function (fmt: ptr[Word[8]], args: ...any)=>Int[64];

  def print: function (str: ptr[Word[8]]) => Void
  {
    printf("%s\n", str);
  };

  def start: function () => Void
  {
    testIf(0);
    testIf(1);
    testIfDestructors(1);
  };

  def testIf: function (i: Word[1]) => Void
  {
    if i print("if-statement/no-else");

    if i { print("if-block/no-else") };

    if i print("if-statement/else-statement")
    else print("else-statement");

    if i { print("if-block/else-statement") }
    else print("else-statement");

    if i print("if-statement/else-block")
    else { print("else-block") };

    if i { print("if-block/else-block") }
    else { print("else-block") };
  };

  type A
  {
    def i: Int;
    handler this~terminate() {
      printf("A~terminate %d\n", this.i);
    }
  }

  function getA (i: Int): A
  {
    def a:A;
    a.i = i;
    return a;
  }

  def testIfDestructors: function (i: Word[1])
  {
    print("\ntestIfDestructors");
    if i == 1 getA(32);
    if i == 0 getA(33) else getA(34);
    if getA(2).i == 2 print("getA(2).i == 2");
    print("testIfDestructors complete");
  }
};

Main.start();
