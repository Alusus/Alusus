import "Srl/Console";
import "Srl/Map";
import "Srl/String";
import "Core/Data";
import "Spp";
use Srl;

func preprocessTest {
  use Srl.Console;
  preprocess {
    Srl.Console.print("Preprocess block.\n");
  }
  preprocess {
    Srl.Console.print("Preprocess block 2.\n");
  }
  Srl.Console.print("Hello");
  preprocess Srl.Console.print("Preprocess statement.\n");
  Srl.Console.print(" World!\n");
  preprocess {
    def i: Int(5);
    print("Multiline\n");
    print("preprocess block\n");
    print("def statement inside preprocess: i = %d\n", i);
    print("temp var def inside preprocess: Int(7) = %d\n", Int(7));
  }
}

preprocessTest();

Srl.Console.print("\n");

func deepPreprocessTest1 {
  Srl.Console.print("Hello ");
  preprocess {
    Srl.Console.print("Preprocess 1\n");
    deepPreprocessTest2();
  }
  Srl.Console.print("World 1\n");
}

func deepPreprocessTest2 {
  Srl.Console.print("Hello ");
  preprocess {
    Srl.Console.print("Preprocess 2\n");
    preprocess {
      Srl.Console.print("Nested preprocess\n");
    }
  }
  Srl.Console.print("World 2\n");
}

deepPreprocessTest1();

Srl.Console.print("\n");

func testAstInsertion {
    preprocess {
        def m: Map[String, ref[Core.Basic.TiObject]];
        m.set(String("name"), ast x);
        Spp.astMgr.insertAst(ast { def name: Int }, m);
        Spp.astMgr.insertAst(ast { Console.print("testAstInsertion\n") }, Map[String, ref[Core.Basic.TiObject]]());

        Spp.astMgr.insertAst(
            ast { def name: Int(sompreprocess) },
            Map[String, ref[Core.Basic.TiObject]]()
                .set(String("name"), Core.Data.Ast.Identifier("y"))
                .set(String("sompreprocess"), Core.Data.Ast.IntegerLiteral("6"))
        );
    }
    x = 7;
    Console.print("x = %d\n", x);
    x = preprocess { Spp.astMgr.insertAst(ast { 12 }, Map[String, ref[Core.Basic.TiObject]]()) };
    Console.print("x = %d\n", x);

    Console.print("y = %d\n", y);
}
testAstInsertion();

Srl.Console.print("\n");

class A {
    def i: Int;
    handler this~init() {
        this.i = 1;
        Console.print("A~init\n");
    }
    handler this~terminate() {
        Console.print("A~terminate\n");
    }
}

func testPreprocessVarDestruction {
    preprocess {
        def a: A;
        a.i = 3;
        Console.print("a.i = %d\n", a.i);
        Console.print("A().i = %d\n", A().i);
        Console.print("a.i*2 = %d\n", a.i * 2);
    }
}
testPreprocessVarDestruction();

Srl.Console.print("\n");

func do1 {
    preprocess {
        do2();
    }
}
func do2 {
    do3();
}
func do3 {
    Console.print("do3 called\n");
}
func testPreprocessNestedDeps {
    preprocess {
        do2();
        do1();
    }
}
testPreprocessNestedDeps();

Srl.Console.print("\n");

preprocess {
    Spp.astMgr.insertAst(
        ast {
            Console.print("Root preprocess insert 1\n");
            Console.print("Root preprocess insert 2\n");
        }
    )
}
