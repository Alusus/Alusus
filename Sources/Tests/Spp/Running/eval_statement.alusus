import "Srl/Console";
import "Srl/Map";
import "Srl/String";
import "Core";
import "Spp";
use Srl;

func evalTest {
  use Srl.Console;
  eval {
    Srl.Console.print("Eval block.\n");
  }
  eval {
    Srl.Console.print("Eval block 2.\n");
  }
  Srl.Console.print("Hello");
  eval Srl.Console.print("Eval statement.\n");
  Srl.Console.print(" World!\n");
  eval {
    def i: Int(5);
    print("Multiline\n");
    print("eval block\n");
    print("def statement inside eval: i = %d\n", i);
    print("temp var def inside eval: Int(7) = %d\n", Int(7));
  }
}

evalTest();

Srl.Console.print("\n");

func deepEvalTest1 {
  Srl.Console.print("Hello ");
  eval {
    Srl.Console.print("Eval 1\n");
    deepEvalTest2();
  }
  Srl.Console.print("World 1\n");
}

func deepEvalTest2 {
  Srl.Console.print("Hello ");
  eval {
    Srl.Console.print("Eval 2\n");
    eval {
      Srl.Console.print("Nested eval\n");
    }
  }
  Srl.Console.print("World 2\n");
}

deepEvalTest1();

Srl.Console.print("\n");

func testAstInsertion {
    eval {
        def m: Map[String, ptr];
        m.set(String("name"), ast x);
        Spp.astMgr.insertAst(ast { def name: Int }, m);
        Spp.astMgr.insertAst(ast { Console.print("testAstInsertion\n") }, Map[String, ptr]());

        Spp.astMgr.insertAst(
            ast { def name: Int(someval) },
            Map[String, ptr]()
                .set(String("name"), Core.Identifier("y")~ptr)
                .set(String("someval"), Core.IntegerLiteral("6")~ptr)
        );
    }
    x = 7;
    Console.print("x = %d\n", x);
    x = eval { Spp.astMgr.insertAst(ast { 12 }, Map[String, ptr]()) };
    Console.print("x = %d\n", x);

    Console.print("y = %d\n", y);
}
testAstInsertion();

Srl.Console.print("\n");

type A {
    def i: Int;
    handler this~init() {
        this.i = 1;
        Console.print("A~init\n");
    }
    handler this~terminate() {
        Console.print("A~terminate\n");
    }
}

func testEvalVarDestruction {
    eval {
        def a: A;
        a.i = 3;
        Console.print("a.i = %d\n", a.i);
        Console.print("A().i = %d\n", A().i);
        Console.print("a.i*2 = %d\n", a.i * 2);
    }
}
testEvalVarDestruction();
