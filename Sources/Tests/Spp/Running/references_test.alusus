import "Srl/Memory.alusus";

@expname[printf] func print(fmt: ptr[array[Char]], ...any) => Int;

//
// Operations on references.
//

def i: Int[32];
def ri: ref[Int[32]];
ri~ptr = i~ptr;
i = 5;
--ri;
print("Operations on references. %d\n", i);

//
// Use reference as pointer.
//

def ra: ref[array[Char]];
ra~ptr = Srl.Memory.alloc(10)~cast[ptr[array[Char]]];
ra(0) = 'a';
ra(1) = 'l';
ra(2) = 'u';
ra(3) = 0;
print("Reference as pointer. %s\n", ra~ptr);

//
// Pass reference to object.
//

function updateString(str: ref[array[Char]])
{
    str(0) = 's';
    str(1) = 'u';
    str(2) = 's';
    str(3) = 0;
};

def a: array[Char, 10];
updateString(a);
print("Pass reference to object. %s\n", a~ptr);
updateString(ra);
print("Pass reference to object from another reference. %s\n", ra~ptr);

//
// Pass ref to ref to object.
///

function replaceString(str: ref[ref[array[Char]]])
{
    str~ptr = "world";
};

def rb: ref[array[Char]];
rb~ptr = "hello";
print("Before passing reference to reference. %s\n", rb~ptr);
replaceString(rb);
print("After passing reference to reference. %s\n", rb~ptr);

//
// References to function pointers.
//

function printMessage
{
    print("Reference to function pointer.\n");
};

function testFnRef1
{
    def pf: ptr[function];
    def rf: ref[ptr[function]];
    rf~ptr = pf~ptr;
    rf = printMessage~ptr;
    rf();
    pf();
};
testFnRef1();

//
// Receive references to function pointers.
//

function getFn (fn: ref[ptr[function]])
{
    fn = printMessage~ptr;
};

function testFnRef2
{
    def pf: ptr[function];
    getFn(pf);
    pf();
};
testFnRef2();

//
// Pass reference as pointer.
//

function printNumPtr (pn: ptr[Int])
{
    print("%d\n", pn~cnt);
};
ri~ptr = i~ptr;
i = 5;
print("Passing ref[int] as ptr[int]. ");
printNumPtr(ri~ptr);

//
// Pass ref[ref] as ptr[ptr].
//

function printNumPtrPtr (pn: ptr[ptr[Int]])
{
    print("%d\n", pn~cnt~cnt);
};
def rri: ref[ref[Int]];
rri~ptr~ptr = ri~ptr~ptr;
print("Passing ref[ref[int]] as ptr[ptr[int]]. ");
printNumPtrPtr(rri~ptr~ptr);

//
// Get object from ref[ref]
//

function printNum (n: Int)
{
    print("%d\n", n);
};
print("Passing ref[ref[int]] as int. ");
printNum(rri);

//
// ~deref & ~no_deref
//

type A {
    def i: Int;
    handler this~init() {
        this.i = 7;
        print("A~init\n");
    }
    handler this~terminate() {
        print("A~terminate\n");
    }
}

function testDeref
{
    def ra: ref[ref[A]];
    ra~no_deref~init(Srl.Memory.alloc(ref[A]~no_deref~size)~cast[ptr[ref[A]]]~cnt);
    ra~deref~no_deref~init(Srl.Memory.alloc(A~size)~cast[ptr[A]]~cnt);
    ra~init();
    print("%d\n", ra.i);
    ra~terminate();
    ra~no_deref~terminate();

    def i: Int;
    def ri: ref[Int];
    ri~no_deref = i;
    i = 13;
    print("%d\n", ri);
    print("%d, %d\n", ri~size~cast[Int], ri~no_deref~size~cast[Int]);
}
testDeref();

//
// ~ptr & ~cnt
//

function testPtrAndCnt
{
    def i: Int;
    def ri: ref[Int](i);
    def rri: ref[ref[Int]](ri);
    def rrri: ref[ref[ref[Int]]];
    rrri~no_deref~init(rri~ptr~ptr~cnt~cnt);
    i = 8;
    print("%d\n", rrri);
}
testPtrAndCnt();

//
// auto create temps for references
//

function receiveTempIntRef (r: temp_ref[Int]) {
    print("receiveTempIntRef: %d\n", r)
}
receiveTempIntRef(5i32);

type B {
    def i: Int;
    handler this=temp_ref[Int] this.i = value;
};
def b: B;
b = 5i32;
print("b=%d\n", b.i);
