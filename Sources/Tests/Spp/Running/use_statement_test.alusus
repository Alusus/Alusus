import "alusus_spp";

def Std: module
{
  def printf: @expname[printf] function (fmt: ptr[Word[8]], args: ...any)=>Int[64];

  def Inner: module
  {
    def printExclamation: function
    {
      printf("!")
    }
  }
};

def TypeContainer: module {
  type InnerType {
    def j: Int;
  }
}

use TypeContainer;

def Other1: module
{
  def printUse: function
  {
    Std.printf("Use ");
  }

  type Tp1 {
    def i: Int;
  }

  def Tp2: alias array[InnerType, 10];
};

def Other2: module
{
  def printStatement: function
  {
    Std.printf("Statement");
  }
};

def Other4: module
{
  def printRootUseStatement: function
  {
    Std.printf("Root Use Statement\n");
  }
};

use Other4;

def Main: module
{
  def Other3: module {
    def printNewLine: function
    {
      Std.printf("\n");
    };
  };

  use Other1;
  use Std.Inner;

  def start: function ()=>Void
  {
    use Other3;
    use Other2;

    printUse();
    printStatement();
    printExclamation();
    printNewLine();
    printRootUseStatement();
  };
};

Main.start();

def Secondary: module {
    use Main;
    function testTypeFromUse {
        use Other1;
        def t1: Tp1;
        def t2: Tp2;
        t1.i = 5;
        t2(1).j = 6;
        Std.printf("testTypeFromUse: %d, %d\n", t1.i, t2(1).j);
    }

    function testError {
        def t1: Tp1;
        t1.7;
    }
}

Secondary.testTypeFromUse();
Secondary.testError();
