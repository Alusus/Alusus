import "Srl/Console.alusus";
use Srl.Console;

type A {
    def k: Int;
    handler this(): Int return this.k;
}

type T {
    def i: Int(0);
    def j: Int(0);
    def a: A;

    handler this~init() {}
    handler this~init(t: ref[T]) {
        this.i = t.i;
        this.j = t.j;
    }

    handler this = Int this.i = value;

    handler this += (v:Int) this.i += v;
    handler this /= (v:Int) this.i /= v;

    handler this = ref[this_type] this.i = value.i;

    handler this < Int return this.i < value;

    handler this - Int : Int return this.i - value;
    handler this * Int : this_type {
        def ret: this_type;
        ret.i = this.i * value;
        return ret;
    };

    handler this << Int : Int { return this.i << value };

    handler this $ Int : Int return this.i $ value;

    handler this~cast[Int] return this.i;

    handler this():Int return this.i;

    handler this(Int) this.i += value;

    handler this(f: float) => Float[64] {
        return this.i + f;
    };

    handler this.myprop = Int { this.j = value; return this.j }

    handler this.myprop += (v:Int) { this.j += v; return this.j }
    handler this.myprop /= (v:Int) { this.j /= v; return this.j }

    handler this.myprop = ref[this_type] { this.j = value.j; return this }

    handler this.myprop < Int return this.j < value;

    handler this.myprop - Int : Int return this.j - value;
    handler this.myprop * Int : this_type {
        def ret: this_type;
        ret.j = this.j * value;
        return ret;
    };

    handler this.myprop << Int : Int { return this.j << value };

    handler this.myprop $ Int : Int return this.j $ value;

    handler this.myprop():Int return this.j;

    handler this.myprop(Int) this.j += value;

    handler this.myprop(f: float) => Float[64] {
        return this.j + f;
    };

    handler this.myprop1:Int return this.j;

    @operation[""]
    def myprop2: ptr[function ():Int];
    func myprop2Imp (): Int {
        return this.a.k;
    }
    myprop2 = myprop2Imp~ptr;

    handler this.myprop3:Int return this.a.k;
    handler this.myprop4:ref[A] return this.a;

    @operation[""]
    def myprop5: ptr[function ():ref[A]];
    func myprop5Imp (): ref[A] {
        return this.a;
    }
    myprop5 = myprop5Imp~ptr;

    @operation[""]
    def prop6: ptr[func ():Int];
    func prop6ReadImp (): Int { print("Fetching prop6...\n"); return this.a.k };
    prop6 = prop6ReadImp~ptr;

    @operation["="]
    def prop6: ptr[func (Int)];
    func prop6Imp (v: Int) { print("Assigning prop6...\n"); this.a.k = v }
    prop6 = prop6Imp~ptr;

    handler this.prop7:Int { print("Fetching prop7...\n"); return this.a.k; }
    handler this.prop7=Int { print("Assigning prop7...\n"); this.a.k = value; return this.a.k; }

    @operation[""]
    def prop8: ptr[func ():Int];
    func prop8ReadImp (): Int { print("Fetching prop8...\n"); return this.a.k };
    prop8 = prop8ReadImp~ptr;

    @operation["+="]
    def prop8: ptr[func (Int)];
    func prop8Imp (v: Int) { print("Assigning prop8...\n"); this.a.k = v }
    prop8 = prop8Imp~ptr;

    handler this.prop9:Int { print("Fetching prop9...\n"); return this.a.k; }
    handler this.prop9+=Int { print("Assigning prop9...\n"); this.a.k = value; return this.a.k; }
};

def t: T;
t = 3;
print("t = 3 ==> t.i: %d\n", t.i);

def t2: T = t;
print("t2 = t ==> t2.i: %d\n", t2.i);

t2 = t = 5;
print("t2 = t = 5 ==> t.i: %d, t2.i: %d\n", t.i, t2.i);

t += 3;
print("t += 3 ==> t.i: %d\n", t.i);

t /= 2;
print("t /= 2 ==> t.i: %d\n", t.i);

if t < 10 print("t is < 10\n");

print("t - 3 ==> %d\n", t - 3);

def t3: T = t * 3;
print("t3 = t * 3 ==> t3.i: %d\n", t3.i);

print("t << 2 ==> %d\n", t << 2);

print("t $ 5 ==> %d\n", t $ 5);

print("t~cast[Int] ==> %d\n", t~cast[Int]);
def i: Int = t;
print("i:Int = t ==> %d\n", i);

function printInt (i: Int) {
  print("printInt(t) ==> %d\n", i);
};
def rt: ref[T];
rt~ptr = t~ptr;
printInt(t);
printInt(rt);

print("t() ==> %d\n", t());

t(3);
print("t(3) ==> t.i: %d\n", t.i);

print("t(4.5) ==> %f\n", t(4.5));

t.myprop = 3;
print("t.myprop = 3 ==> t.j: %d\n", t.j);

t2.myprop = t;
print("t2.myprop = t ==> t2.j: %d\n", t2.j);

t2.myprop = t.myprop = 5;
print("t2.myprop = t.myprop = 5 ==> t.j: %d, t2.j: %d\n", t.j, t2.j);

t.myprop += 3;
print("t.myprop += 3 ==> t.j: %d\n", t.j);

t.myprop /= 2;
print("t.myprop /= 2 ==> t.j: %d\n", t.j);

if t.myprop < 10 print("t.myprop is < 10\n");

print("t.myprop - 3 ==> %d\n", t.myprop - 3);

t3.myprop = t.myprop * 3;
print("t3.myprop = t.myprop * 3 ==> t3.j: %d\n", t3.j);

print("t.myprop << 2 ==> %d\n", t.myprop << 2);

print("t.myprop $ 5 ==> %d\n", t.myprop $ 5);

print("t.myprop() ==> %d\n", t.myprop());

t.myprop(3);
print("t.myprop(3) ==> t.j: %d\n", t.j);

print("t.myprop(4.5) ==> %f\n", t.myprop(4.5));

print("t.myprop1~cast[Int] ==> %d\n", t.myprop1~cast[Int]);
i = t.myprop1;
print("i:Int = t.myprop ==> %d\n", i);

printInt(t.myprop1);
printInt(rt.myprop1);

t.a.k = 5;
print("t.myprop2 + 1 ==> %d\n", t.myprop2 + 1);
print("t.myprop3 + 2 ==> %d\n", t.myprop3 + 2);
print("t.myprop4() ==> %d\n", t.myprop4());
print("t.myprop5() ==> %d\n", t.myprop5());

t.prop6 = 5;
print("%d\n", t.prop6);

t.prop7 = 6;
print("%d\n", t.prop7);

t.prop8 += 7;
print("%d\n", t.prop8);

t.prop9 += 8;
print("%d\n", t.prop9);

type Parent {
    handler this.f1(): ptr[Char] as_ptr {
        return "";
    }
}

type Child1 {
    @injection def parent: Parent;
    def i: Int;
    handler (this: Parent).f1(): ptr[Char] set_ptr {
        return "Child 1\n";
    }
}

type Child2 {
    @injection def parent: Parent;
    def j: Int;
    handler (this: Parent).f1(): ptr[Char] set_ptr {
        return "Child 2\n";
    }
}

func printParent (r: ref[Parent]) {
    print(r.f1());
}

func test {
    def c1: Child1;
    def c2: Child2;
    c1.i = 2;
    c2.j = 7;
    printParent(c1);
    printParent(c2);
}
test();

// Test error cases

type Other {
  def j: Int;
};

def o: Other;
o();
o(5);
t(o);

if 1 {
  def t2: T;
  def t2: T;
  t2(5);
};

if 1 {
  def t: T;
  t(5);
};

t.prop6 += 5;
t.prop7 += 6;
t.prop8 = 7;
t.prop9 = 8;

type Child3 {
    @injection def parent: Parent;
    def i: Int;
    handler (this: Parent).f1(): ptr[Char] set_ptr {
        return "Child 3\n";
    }
    handler this.f1(): ptr[Char] as_ptr {
        return "Child 1\n";
    }
}

def c3: Child3;
c3.i = 0;
