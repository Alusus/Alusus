import "Core/Basic";

@expname[printf] function printf (s: ptr[Word[8]], ...any) => Int;

class MyType [T: type, f: function, i: integer, s: string = "default string\n"]
{
  def v: T;

  @member function print(this: ref[this_type])
  {
    printf(s, this.v, i);
  };

  @member function callAction (this: ref[this_type])
  {
    f();
  };
};

function printOne
{
  printf("One\n");
};

function printTwo
{
  printf("Two\n");
};

def o1: MyType[Int, printOne, 3, "int: %d, i = %d\n"];
o1.v = 5;
o1.print();
o1.callAction();

def o2: MyType[Float[64], printTwo, 6, "float: %f, i = %d\n"];
o2.v = 5.6;
o2.print();
o2.callAction();

def o3: MyType[ptr[Word[8]], printTwo, 0, "hello %s\n"];
o3.v = "world";
o3.print();

def o4: MyType[Int, printOne, 0];
o4.print();

class MyOtherType [a: ast] {
    preprocess {
        printf("MyOtherType: %s\n", a~ast.getMyTypeInfo().typeName.buf);
    }
}

function testAstTemplateArgs {
    def a: MyOtherType[a || b];
    def b: MyOtherType[a || b];
    def c: MyOtherType[a + b];
}
testAstTemplateArgs();

// Errors

class Parent [ResultType: type] {
    def i: Int;
    def child: Child;
}

class Child [ResultType: type] {
    def result: ResultType;
}

class OtherParent [ResultType: type] {
    def child: Child;
}

func testTemplateArgErrors {
    def obj1: Parent[Int];
    def obj2: OtherParent[Int];
    obj1 = OtherParent[Int]();
    printf("Error...\n");
}
testTemplateArgErrors();
