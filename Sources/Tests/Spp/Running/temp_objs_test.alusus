import "Srl/Console";
import "Srl/String";
use Srl;

type A {
    def i: Int;
    handler this~init() {
        this.i = 7;
        Console.print("A initialized.\n");
    }

    handler this~terminate() {
        Console.print("A terminated.\n");
    }
}

type Tpl [T: type] {
    def i: T;
    handler this~init(n: T) {
        this.i = n;
        Console.print("Tpl initialized.\n");
    }

    handler this~terminate() {
        Console.print("Tpl terminated.\n");
    }
}

module M {
    type B {
        def i: Int;
        handler this~init() {
            this.i = 8;
            Console.print("B initialized.\n");
        }

        handler this~terminate() {
            Console.print("B terminated.\n");
        }
    }
}

type C {
    def i: Int;
    handler this~init(n: Int) {
        this.i = n;
        Console.print("C initialized.\n");
    }

    handler this~init(count: Int, args: ...[Int, 1]) {
        this.i = 0;
        while count-- > 0 this.i += args~next_arg[Int];
        Console.print("C initialized with var args.\n");
    }

    handler this~terminate() {
        Console.print("C terminated.\n");
    }
}

type D {
    def a: A;
}

func varArgFunc(count: Int, args: ...Int) {
    Console.print("varArgFunc\n");
}

type E {
    def i: Int = A().i;
    def j: C({ A().i, A().i, 5 });
    varArgFunc({ A().i, A().i, A().i });
}

def globalC: C({ A().i, 2 });

func test {
    Console.print("beginning of successful test\n");
    Console.print("%d\n", A().i);
    Console.print("%d\n", Tpl[Int](6).i);
    Console.print("%d\n", M.B().i);
    Console.print("%d\n", C(9).i);
    Console.print("%d\n", C(2, 9, 10).i);
    Console.print("%d\n", D().a.i);
    Console.print(String("string concat ") + M.B().i + "\n");
    def e: E;
    Console.print("%d, %d\n", e.i, e.j);
    def c: C({ A().i, A().i });
    varArgFunc({ A().i, A().i });
    Console.print("%d\n", globalC.i);
    Console.print("end of successful test\n");
}

test();

func testErrors {
    Console.print("%d\n", A(5).i);
    Console.print("%d\n", A1(5).i);
    Console.print("%d\n", C().i);
    Console.print("%d\n", D(1).i);
}

testErrors();
