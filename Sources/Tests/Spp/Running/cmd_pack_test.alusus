import "Srl/Console.alusus";
use Srl;

class A {
    def i: Int;
    handler this(): Int return this.i;
}

func test {
    def a: A;
    Console.print("%d\n", a.{ i = 6 }.i);
    Console.print("%d\n", a.{ i = 7 }());
    Console.print("%d\n", A().{ i = 8 }.i);
    Console.print("%d\n", A().{ i = 9 }());
}
test();

def a2: A;
Console.print("%d\n", a2.{ i = 10 }.i);
Console.print("%d\n", a2.{ i = 11 }());
Console.print("%d\n", A().{ i = 12 }.i);
Console.print("%d\n", A().{ i = 13 }());

def c: Char = '2';
Console.print("%s\n", ptr[Char]().{ if c == '1' this="one" else if c == '2' this="two" else this="other" });

def i: Int(5);
Console.print("Factorial of %d=%d\n", i, Int().{ def n: Int(i); this = n; while --n > 1 this*=n });

Console.print("Factorial of %d=%d\n", i, Int()~use_in{ def n: Int(i); this = n; while --n > 1 this*=n });

Console.print("Factorial of %d=%d\n", i, Int()~use_in(self){ def n: Int(i); self = n; while --n > 1 self*=n });

class B {
    def j: Int;
}

Console.print("B().j = %d\n", B()~use_in(self){ j = 3 }.j);

Console.print("B().j = %d\n", B()~use_in(self) no_injection { self.j = 4 }.j);

// Test the case of unintentionally hitting auto-created `this`.
// Test the case where an auto created `this` gets incorrectly picked by the compiler instead of `this` from an upper
// scope.

class Parent {
    def child: Child;
    handler this~init() {}
    handler this~init(val: ref[this_type]) {}

    function new (): Parent {
        return Parent()~use_in(this){
            child~use_in(self){
                parent~no_deref = this;
            };
        };
    }
}

class Child {
    def i2: Int = 0;
    def parent: ref[Parent];
}

func testSkippingAutoThis {
    Parent.new();
    Console.print("Success. Auto created `this` was successfully ignored.\n");
}
testSkippingAutoThis();

function testNonTerminalReturn():Int {
    Int().{
        Console.print("testNonTerminalReturn\n");
        if 1 return 1;
    }
    return 0;
}
testNonTerminalReturn();

function testTerminalReturn():Int {
    Int().{
        Console.print("testTerminalReturn\n");
        return 1;
    }
}
testTerminalReturn();

// Test Errors

function testNonTerminalReturnError():Int {
    Int().{
        Console.print("testNonTerminalReturnError\n");
        if 1 return 1;
    }
}
testNonTerminalReturnError();

function testTerminalReturnError():Int {
    Int().{
        return 0;
    }
    return 1;
}
testTerminalReturnError();

function testUnexpectedTerminalStatement() {
    Int().{ return } + 5;
    Int().{ return }~ptr;
    A().{ return }.i;
}
testUnexpectedTerminalStatement();

Console.print("B().j = %d\n", B()~use_in(self) no_injection { j = 5 }.j);

ptr[Char]().{ i = "wrong" };
