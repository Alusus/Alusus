ERROR SPPG1015 @ (52,32): Incompatible types for the given operator.
ERROR SPPG1015 @ (69,30): Incompatible types for the given operator.
ERROR SPPG1015 @ (70,31): Incompatible types for the given operator.
ERROR SPPG1015 @ (71,30): Incompatible types for the given operator.
ERROR SPPG1015 @ (72,31): Incompatible types for the given operator.
ERROR SPPG1015 @ (73,31): Incompatible types for the given operator.
ERROR SPPG1008 @ (81,8): Invalid symbol.
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"

@"#anonymous0" = private constant [12 x i8] c"1 == 1: %d\0A\00"
@"#anonymous1" = private constant [12 x i8] c"1 == 2: %d\0A\00"
@"#anonymous2" = private constant [11 x i8] c"1 > 1: %d\0A\00"
@"#anonymous3" = private constant [11 x i8] c"1 > 0: %d\0A\00"
@"#anonymous4" = private constant [12 x i8] c"1 >= 1: %d\0A\00"
@"#anonymous5" = private constant [12 x i8] c"1 >= 2: %d\0A\00"
@"#anonymous6" = private constant [11 x i8] c"1 < 1: %d\0A\00"
@"#anonymous7" = private constant [11 x i8] c"1 < 2: %d\0A\00"
@"#anonymous8" = private constant [12 x i8] c"1 <= 1: %d\0A\00"
@"#anonymous9" = private constant [12 x i8] c"2 <= 1: %d\0A\00"
@"#anonymous10" = private constant [16 x i8] c"1.0 == 1.0: %d\0A\00"
@"#anonymous11" = private constant [16 x i8] c"1.0 == 2.0: %d\0A\00"
@"#anonymous12" = private constant [15 x i8] c"1.0 > 1.0: %d\0A\00"
@"#anonymous13" = private constant [15 x i8] c"1.0 > 0.0: %d\0A\00"
@"#anonymous14" = private constant [16 x i8] c"1.0 >= 1.0: %d\0A\00"
@"#anonymous15" = private constant [16 x i8] c"1.0 >= 2.0: %d\0A\00"
@"#anonymous16" = private constant [15 x i8] c"1.0 < 1.0: %d\0A\00"
@"#anonymous17" = private constant [15 x i8] c"1.0 < 2.0: %d\0A\00"
@"#anonymous18" = private constant [16 x i8] c"1.0 <= 1.0: %d\0A\00"
@"#anonymous19" = private constant [16 x i8] c"2.0 <= 1.0: %d\0A\00"
@"#anonymous20" = private constant [16 x i8] c"1i8 == 1i8: %d\0A\00"
@"#anonymous21" = private constant [18 x i8] c"1i64 == 1i64: %d\0A\00"
@"#anonymous22" = private constant [17 x i8] c"1i8 == 1i64: %d\0A\00"
@"#anonymous23" = private constant [17 x i8] c"1i64 == 1i8: %d\0A\00"
@"#anonymous24" = private constant [18 x i8] c"1f32 == 1f32: %d\0A\00"
@"#anonymous25" = private constant [18 x i8] c"1f64 == 1f64: %d\0A\00"
@"#anonymous26" = private constant [18 x i8] c"1f64 == 1f32: %d\0A\00"
@"#anonymous27" = private constant [18 x i8] c"1f32 == 1f64: %d\0A\00"
@"#anonymous28" = private constant [18 x i8] c"1i32 == 1f32: %d\0A\00"
@"#anonymous29" = private constant [18 x i8] c"1f32 == 1i32: %d\0A\00"
@"#anonymous30" = private constant [18 x i8] c"1i64 == 1f32: %d\0A\00"
@"#anonymous31" = private constant [18 x i8] c"1f32 == 1i64: %d\0A\00"
@"#anonymous32" = private constant [17 x i8] c"1i32 == ptr: %d\0A\00"
@"#anonymous33" = private constant [6 x i8] c"hello\00"
@"#anonymous34" = private constant [6 x i8] c"world\00"
@"#anonymous35" = private constant [18 x i8] c"ptr1 == ptr2: %d\0A\00"
@"#anonymous36" = private constant [18 x i8] c"ptr1 != ptr2: %d\0A\00"
@"#anonymous37" = private constant [23 x i8] c"non-null ptr == 0: %d\0A\00"
@"#anonymous38" = private constant [19 x i8] c"null ptr == 0: %d\0A\00"
@"#anonymous39" = private constant [15 x i8] c"ptr > ptr: %d\0A\00"
@"#anonymous40" = private constant [16 x i8] c"ptr >= ptr: %d\0A\00"
@"#anonymous41" = private constant [15 x i8] c"ptr < ptr: %d\0A\00"
@"#anonymous42" = private constant [16 x i8] c"ptr <= ptr: %d\0A\00"
@"#anonymous43" = private constant [16 x i8] c"ptr == i64: %d\0A\00"
@"#anonymous44" = private constant [20 x i8] c"Received positive.\0A\00"
@"#anonymous45" = private constant [20 x i8] c"Received negative.\0A\00"

define void @__constructor__() {
"#block0":
  ret void
}

define void @"Main.start()=>(Void)"() {
"#block1":
  call void @"Main.testInteger()=>(Void)"()
  call void @"Main.testFloat()=>(Void)"()
  call void @"Main.testIfStatement(Int[64])=>(Void)"(i64 -5)
  ret void
}

define void @"Main.testInteger()=>(Void)"() {
"#block2":
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous0", i32 0, i32 0), i64 1)
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous1", i32 0, i32 0), i64 0)
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"#anonymous2", i32 0, i32 0), i64 0)
  %3 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"#anonymous3", i32 0, i32 0), i64 1)
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous4", i32 0, i32 0), i64 1)
  %5 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous5", i32 0, i32 0), i64 0)
  %6 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"#anonymous6", i32 0, i32 0), i64 0)
  %7 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"#anonymous7", i32 0, i32 0), i64 1)
  %8 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous8", i32 0, i32 0), i64 1)
  %9 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous9", i32 0, i32 0), i64 0)
  ret void
}

declare i64 @printf(i8*, ...)

define void @"Main.testFloat()=>(Void)"() {
"#block3":
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous10", i32 0, i32 0), i64 1)
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous11", i32 0, i32 0), i64 0)
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"#anonymous12", i32 0, i32 0), i64 0)
  %3 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"#anonymous13", i32 0, i32 0), i64 1)
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous14", i32 0, i32 0), i64 1)
  %5 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous15", i32 0, i32 0), i64 0)
  %6 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"#anonymous16", i32 0, i32 0), i64 0)
  %7 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"#anonymous17", i32 0, i32 0), i64 1)
  %8 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous18", i32 0, i32 0), i64 1)
  %9 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous19", i32 0, i32 0), i64 0)
  ret void
}

define void @"Main.testMixed()=>(Void)"() {
"#block4":
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous20", i32 0, i32 0), i64 1)
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous21", i32 0, i32 0), i64 1)
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous22", i32 0, i32 0), i64 1)
  %3 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous23", i32 0, i32 0), i64 1)
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous24", i32 0, i32 0), i64 1)
  %5 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous25", i32 0, i32 0), i64 1)
  %6 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous26", i32 0, i32 0), i64 1)
  %7 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous27", i32 0, i32 0), i64 1)
  %8 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous28", i32 0, i32 0), i64 1)
  %9 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous29", i32 0, i32 0), i64 1)
  %10 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous30", i32 0, i32 0), i64 1)
  %11 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous31", i32 0, i32 0), i64 1)
  ret void
}

define void @"Main.testPointers()=>(Void)"() {
"#block5":
  %i = alloca i8*
  %j = alloca i8*
  %n = alloca i8*
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"#anonymous33", i32 0, i32 0), i8** %i
  store i8* getelementptr inbounds ([6 x i8], [6 x i8]* @"#anonymous34", i32 0, i32 0), i8** %j
  store i8* null, i8** %n
  %0 = load i8*, i8** %i
  %1 = load i8*, i8** %j
  %2 = icmp eq i8* %0, %1
  %3 = zext i1 %2 to i64
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous35", i32 0, i32 0), i64 %3)
  %5 = load i8*, i8** %i
  %6 = load i8*, i8** %j
  %7 = icmp ne i8* %5, %6
  %8 = zext i1 %7 to i64
  %9 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous36", i32 0, i32 0), i64 %8)
  %10 = load i8*, i8** %i
  %11 = icmp eq i8* %10, null
  %12 = zext i1 %11 to i64
  %13 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"#anonymous37", i32 0, i32 0), i64 %12)
  %14 = load i8*, i8** %n
  %15 = icmp eq i8* %14, null
  %16 = zext i1 %15 to i64
  %17 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"#anonymous38", i32 0, i32 0), i64 %16)
  %18 = load i8*, i8** %i
  %19 = load i8*, i8** %j
  %20 = load i8*, i8** %i
  %21 = load i8*, i8** %j
  %22 = load i8*, i8** %i
  %23 = load i8*, i8** %j
  %24 = load i8*, i8** %i
  %25 = load i8*, i8** %j
  %26 = load i8*, i8** %i
  ret void
}

define void @"Main.testIfStatement(Int[64])=>(Void)"(i64 %i) {
"#block6":
  %i1 = alloca i64
  store i64 %i, i64* %i1
  %0 = load i64, i64* %i1
  %1 = icmp sge i64 %0, 0
  br i1 %1, label %"#block7", label %"#block8"

"#block7":                                        ; preds = %"#block6"
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"#anonymous44", i32 0, i32 0))
  br label %"#block9"

"#block8":                                        ; preds = %"#block6"
  %3 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @"#anonymous45", i32 0, i32 0))
  br label %"#block9"

"#block9":                                        ; preds = %"#block8", %"#block7"
  ret void

"#block10":                                       ; No predecessors!
}
------------------------------------------------------------
