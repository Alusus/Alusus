import "alusus_spp";
module Spp {
    type BuildMgr {
        @expname[Spp_BuildMgr_dumpLlvmIrForElement]
        function dumpLlvmIrForElement (element: ptr);
    };
    def buildMgr: ref[BuildMgr];
}

def Main: module
{
  def printf: @expname[printf] function (fmt: ptr[Word[8]], args: ...any)=>Int[64];

  def print: function (str: ptr[Word[8]]) => Void
  {
    printf("%s\n", str);
  };

  def main: function () => Void
  {
    testIf(0);
    testIf(1);
  };

  def testIf: function (i: Word[1]) => Void
  {
    if i print("if-statement/no-else");

    if i { print("if-block/no-else") };

    if i print("if-statement/else-statement")
    else print("else-statement");

    if i { print("if-block/else-statement") }
    else print("else-statement");

    if i print("if-statement/else-block")
    else { print("else-block") };

    if i { print("if-block/else-block") }
    else { print("else-block") };

    def j: Int;
    if i {
      def j: Int;
      def i: Int;
      i = 2;
    } else {
      def j: Int;
      def i: Int;
      i = 3;
    };

    if print { i = 0 };
  };
};

Spp.buildMgr.dumpLlvmIrForElement(Main~ast);
