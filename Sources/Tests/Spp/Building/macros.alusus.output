ERROR SPPA1003 @ (7,38)
from (63,5): No valid match was found for the given type.
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"

%Main_Coordinates = type { double, double }

@"#anonymous0" = private constant [8 x i8] c"a = %d\0A\00", align 1
@"#anonymous1" = private constant [18 x i8] c"b1 = %d, b2 = %d\0A\00", align 1
@"#anonymous2" = private constant [12 x i8] c"__n__ = %d\0A\00", align 1
@"#anonymous3" = private constant [10 x i8] c"a*a = %d\0A\00", align 1
@"#anonymous4" = private constant [19 x i8] c"min of 5 & 7 = %d\0A\00", align 1
@"#anonymous5" = private constant [23 x i8] c"min of 5.0 & 7.0 = %d\0A\00", align 1
@"#anonymous6" = private constant [4 x i8] c"%d \00", align 1
@"#anonymous7" = private constant [2 x i8] c"\0A\00", align 1
@"#anonymous8" = private constant [14 x i8] c"Hello Alusus\0A\00", align 1
@"#anonymous9" = private constant [14 x i8] c"Hello Alusus\0A\00", align 1
@"#anonymous10" = private constant [13 x i8] c"Hello {{n}}\0A\00", align 1
@"#anonymous11" = private constant [13 x i8] c"Hello {{n}}\0A\00", align 1
@"#anonymous12" = private constant [13 x i8] c"Hello World\0A\00", align 1
@"#anonymous13" = private constant [14 x i8] c"p = (%f, %f)\0A\00", align 1

define void @__constructor__() {
"#block0":
  ret void
}

define void @"Main.start()=>(Void)"() {
"#block1":
  %a = alloca i32
  %b1 = alloca i32
  %b2 = alloca i32
  %__n__ = alloca i32
  store i32 5, i32* %a
  store i32 6, i32* %b1
  store i32 7, i32* %b2
  store i32 8, i32* %__n__
  %0 = load i32, i32* %a
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous0", i32 0, i32 0), i32 %0)
  %2 = load i32, i32* %b1
  %3 = load i32, i32* %b2
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous1", i32 0, i32 0), i32 %2, i32 %3)
  %5 = load i32, i32* %__n__
  %6 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous2", i32 0, i32 0), i32 %5)
  %7 = load i32, i32* %a
  %8 = load i32, i32* %a
  %9 = mul nsw i32 %7, %8
  %10 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"#anonymous3", i32 0, i32 0), i32 %9)
  %11 = call i32 @"Main.getMin(Int[32],Int[32])=>(Int[32])"(i32 5, i32 7)
  %12 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"#anonymous4", i32 0, i32 0), i32 %11)
  %13 = call float @"Main.getMin(Float[32],Float[32])=>(Float[32])"(float 5.000000e+00, float 7.000000e+00)
  %14 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @"#anonymous5", i32 0, i32 0), float %13)
  store i32 0, i32* %a
  br label %"#block8"

"#block8":                                        ; preds = %"#block9", %"#block1"
  %15 = load i32, i32* %a
  %16 = icmp sle i32 %15, 9
  br i1 %16, label %"#block10", label %"#block11"

"#block9":                                        ; preds = %"#block10"
  %17 = load i32, i32* %a
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %a
  br label %"#block8"

"#block10":                                       ; preds = %"#block8"
  %19 = load i32, i32* %a
  %20 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous6", i32 0, i32 0), i32 %19)
  br label %"#block9"

"#block11":                                       ; preds = %"#block8"
  %21 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"#anonymous7", i32 0, i32 0))
  %22 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"#anonymous8", i32 0, i32 0))
  %23 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"#anonymous9", i32 0, i32 0))
  %24 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous10", i32 0, i32 0))
  %25 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous11", i32 0, i32 0))
  %26 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous12", i32 0, i32 0))
  %p = alloca %Main_Coordinates
  %27 = getelementptr %Main_Coordinates, %Main_Coordinates* %p, i32 0, i32 0
  store double 5.500000e+00, double* %27
  %28 = getelementptr %Main_Coordinates, %Main_Coordinates* %p, i32 0, i32 1
  store double 0x401D333340000000, double* %28
  %29 = getelementptr %Main_Coordinates, %Main_Coordinates* %p, i32 0, i32 0
  %30 = getelementptr %Main_Coordinates, %Main_Coordinates* %p, i32 0, i32 1
  %31 = load double, double* %29
  %32 = load double, double* %30
  %33 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"#anonymous13", i32 0, i32 0), double %31, double %32)
  ret void
}

declare i64 @printf(i8*, ...)

define i32 @"Main.getMin(Int[32],Int[32])=>(Int[32])"(i32 %a, i32 %b) {
"#block2":
  %a1 = alloca i32
  store i32 %a, i32* %a1
  %b2 = alloca i32
  store i32 %b, i32* %b2
  %0 = load i32, i32* %a1
  %1 = load i32, i32* %b2
  %2 = icmp sle i32 %0, %1
  br i1 %2, label %"#block3", label %"#block4"

"#block3":                                        ; preds = %"#block2"
  %3 = load i32, i32* %a1
  ret i32 %3

"#block4":                                        ; preds = %"#block2"
  %4 = load i32, i32* %b2
  ret i32 %4
}

define float @"Main.getMin(Float[32],Float[32])=>(Float[32])"(float %a, float %b) {
"#block5":
  %a1 = alloca float
  store float %a, float* %a1
  %b2 = alloca float
  store float %b, float* %b2
  %0 = load float, float* %a1
  %1 = load float, float* %b2
  %2 = fcmp ole float %0, %1
  br i1 %2, label %"#block6", label %"#block7"

"#block6":                                        ; preds = %"#block5"
  %3 = load float, float* %a1
  ret float %3

"#block7":                                        ; preds = %"#block5"
  %4 = load float, float* %b2
  ret float %4
}
------------------------------------------------------------
