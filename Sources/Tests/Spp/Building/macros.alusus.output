-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
target datalayout = "E-p:64:64:64-S0-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f16:16:16-f32:32:32-f64:64:64-f128:128:128-v64:64:64-v128:128:128-a0:0:64"

%Main_Coordinates = type { double, double }

@__anonymous0 = private constant [8 x i8] c"a = %d\0A\00", align 1
@__anonymous1 = private constant [10 x i8] c"a*a = %d\0A\00", align 1
@__anonymous2 = private constant [19 x i8] c"min of 5 & 7 = %d\0A\00", align 1
@__anonymous3 = private constant [4 x i8] c"%d \00", align 1
@__anonymous4 = private constant [2 x i8] c"\0A\00", align 1
@__anonymous5 = private constant [14 x i8] c"p = (%f, %f)\0A\00", align 1

declare i64 @printf(i8*, ...)

define i32 @"Main.getMin(Int[32],Int[32])=>(Int[32])"(i32 %a, i32 %b) {
__block0:
  %a1 = alloca i32
  store i32 %a, i32* %a1
  %b2 = alloca i32
  store i32 %b, i32* %b2
  %0 = load i32* %a1
  %1 = load i32* %b2
  %2 = icmp sle i32 %0, %1
  br i1 %2, label %__block1, label %__block2

__block1:                                         ; preds = %__block0
  %3 = load i32* %a1
  ret i32 %3

__block2:                                         ; preds = %__block0
  %4 = load i32* %b2
  ret i32 %4

__block3:                                         ; No predecessors!
}

define float @"Main.getMin(Float[32],Float[32])=>(Float[32])"(float %a, float %b) {
__block4:
  %a1 = alloca float
  store float %a, float* %a1
  %b2 = alloca float
  store float %b, float* %b2
  %0 = load float* %a1
  %1 = load float* %b2
  %2 = fcmp ole float %0, %1
  br i1 %2, label %__block5, label %__block6

__block5:                                         ; preds = %__block4
  %3 = load float* %a1
  ret float %3

__block6:                                         ; preds = %__block4
  %4 = load float* %b2
  ret float %4

__block7:                                         ; No predecessors!
}

define void @"Main.start()=>(Void)"() {
__block8:
  %a = alloca i32
  store i32 5, i32* %a
  %0 = load i32* %a
  %1 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @__anonymous0, i32 0, i32 0), i32 %0)
  %2 = load i32* %a
  %3 = load i32* %a
  %4 = mul nsw i32 %2, %3
  %5 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @__anonymous1, i32 0, i32 0), i32 %4)
  %6 = call i32 @"Main.getMin(Int[32],Int[32])=>(Int[32])"(i32 5, i32 7)
  %7 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @__anonymous2, i32 0, i32 0), i32 %6)
  store i32 0, i32* %a
  br label %__block9

__block9:                                         ; preds = %__block10, %__block8
  %8 = load i32* %a
  %9 = icmp sle i32 %8, 9
  br i1 %9, label %__block11, label %__block12

__block10:                                        ; preds = %__block11
  %10 = load i32* %a
  %11 = add nsw i32 %10, 1
  store i32 %11, i32* %a
  br label %__block9

__block11:                                        ; preds = %__block9
  %12 = load i32* %a
  %13 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([4 x i8]* @__anonymous3, i32 0, i32 0), i32 %12)
  br label %__block10

__block12:                                        ; preds = %__block9
  %14 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([2 x i8]* @__anonymous4, i32 0, i32 0))
  %p = alloca %Main_Coordinates
  %15 = getelementptr %Main_Coordinates* %p, i32 0, i32 0
  store double 5.500000e+00, double* %15
  %16 = getelementptr %Main_Coordinates* %p, i32 0, i32 1
  store double 0x401D333340000000, double* %16
  %17 = getelementptr %Main_Coordinates* %p, i32 0, i32 0
  %18 = getelementptr %Main_Coordinates* %p, i32 0, i32 1
  %19 = load double* %17
  %20 = load double* %18
  %21 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @__anonymous5, i32 0, i32 0), double %19, double %20)
  ret void
}
------------------------------------------------------------
