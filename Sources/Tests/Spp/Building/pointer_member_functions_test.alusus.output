-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%N_vtable = type { void (%N*)* }
%N = type { %N_vtable*, i32 }
%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }
%N2 = type { %N, i32 }

@"!N.vtable" = global %N_vtable zeroinitializer
@"!N2.vtable" = global %N_vtable zeroinitializer
@"#anonymous0" = private constant [14 x i8] c"N.printIt %d\0A\00"
@"#anonymous1" = private constant [15 x i8] c"N2.printIt %d\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"test1()"() {
"#block0":
  %n = alloca %N
  call void @N.__autoConstruct__(%N* %n)
  %n2 = alloca %N2
  call void @N2.__autoConstruct__(%N2* %n2)
  %0 = getelementptr %N, %N* %n, i32 0, i32 1
  store i32 7, i32* %0
  %1 = getelementptr %N2, %N2* %n2, i32 0, i32 0
  %2 = getelementptr %N, %N* %1, i32 0, i32 1
  store i32 72, i32* %2
  %3 = getelementptr %N, %N* %n, i32 0, i32 0
  %4 = load %N_vtable*, %N_vtable** %3
  %5 = getelementptr %N_vtable, %N_vtable* %4, i32 0, i32 0
  %6 = load void (%N*)*, void (%N*)** %5
  call void %6(%N* %n)
  %7 = getelementptr %N2, %N2* %n2, i32 0, i32 0
  %8 = getelementptr %N, %N* %7, i32 0, i32 0
  %9 = load %N_vtable*, %N_vtable** %8
  %10 = getelementptr %N_vtable, %N_vtable* %9, i32 0, i32 0
  %11 = load void (%N*)*, void (%N*)** %10
  call void %11(%N* %7)
  %12 = getelementptr %N2, %N2* %n2, i32 0, i32 1
  store i32 9, i32* %12
  %rn = alloca %N*
  %13 = bitcast %N2* %n2 to %N*
  store %N* %13, %N** %rn
  %14 = load %N*, %N** %rn
  %15 = getelementptr %N, %N* %14, i32 0, i32 0
  %16 = load %N_vtable*, %N_vtable** %15
  %17 = getelementptr %N_vtable, %N_vtable* %16, i32 0, i32 0
  %18 = load %N*, %N** %rn
  %19 = load void (%N*)*, void (%N*)** %17
  call void %19(%N* %18)
  ret void
}

define void @N.__autoConstruct__(%N* %this) {
"#block1":
  %this1 = alloca %N*
  store %N* %this, %N** %this1
  %0 = load %N*, %N** %this1
  %1 = getelementptr %N, %N* %0, i32 0, i32 0
  store %N_vtable* @"!N.vtable", %N_vtable** %1
  %2 = load %N*, %N** %this1
  %3 = getelementptr %N, %N* %2, i32 0, i32 0
  %4 = load %N_vtable*, %N_vtable** %3
  %5 = getelementptr %N_vtable, %N_vtable* %4, i32 0, i32 0
  store void (%N*)* @"N.printItImpl(iref[N])", void (%N*)** %5
  ret void
}

define void @"N.printItImpl(iref[N])"(%N* %this) {
"#block3":
  %this1 = alloca %N*
  store %N* %this, %N** %this1
  %0 = load %N*, %N** %this1
  %1 = getelementptr %N, %N* %0, i32 0, i32 1
  %2 = load i32, i32* %1
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"#anonymous0", i32 0, i32 0), i32 %2)
  ret void
}

define void @N2.__autoConstruct__(%N2* %this) {
"#block2":
  %this1 = alloca %N2*
  store %N2* %this, %N2** %this1
  %0 = getelementptr %N2, %N2* %this, i32 0, i32 0
  call void @N.__autoConstruct__(%N* %0)
  %1 = load %N2*, %N2** %this1
  %2 = getelementptr %N2, %N2* %1, i32 0, i32 0
  %3 = getelementptr %N, %N* %2, i32 0, i32 0
  store %N_vtable* @"!N2.vtable", %N_vtable** %3
  %4 = load %N2*, %N2** %this1
  %5 = getelementptr %N2, %N2* %4, i32 0, i32 1
  store i32 0, i32* %5
  %6 = load %N2*, %N2** %this1
  %7 = getelementptr %N2, %N2* %6, i32 0, i32 0
  %8 = getelementptr %N, %N* %7, i32 0, i32 0
  %9 = load %N_vtable*, %N_vtable** %8
  %10 = getelementptr %N_vtable, %N_vtable* %9, i32 0, i32 0
  store void (%N*)* bitcast (void (%N2*)* @"N2.printItImpl(ref[N2])" to void (%N*)*), void (%N*)** %10
  ret void
}

define void @"N2.printItImpl(ref[N2])"(%N2* %this) {
"#block4":
  %this1 = alloca %N2*
  store %N2* %this, %N2** %this1
  %0 = load %N2*, %N2** %this1
  %1 = getelementptr %N2, %N2* %0, i32 0, i32 1
  %2 = load %N2*, %N2** %this1
  %3 = getelementptr %N2, %N2* %2, i32 0, i32 0
  %4 = getelementptr %N, %N* %3, i32 0, i32 1
  %5 = load i32, i32* %4
  %6 = load i32, i32* %1
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"#anonymous1", i32 0, i32 0), i32 %7)
  ret void
}

declare i32 @printf(i8*, ...)
------------------------------------------------------------

ERROR SPPA1008 @ (84,7): Provided arguments do not match signature.
ERROR SPPA1008 @ (85,7): Provided arguments do not match signature.
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }
%M = type { i32, void (%M*)*, void (%M*, i32)*, void (i32)*, void (i32)* }

@"#anonymous0" = private constant [14 x i8] c"M.printIt %d\0A\00"
@"#anonymous1" = private constant [15 x i8] c"M.printIt2 %d\0A\00"
@"#anonymous2" = private constant [15 x i8] c"M.printIt4 %d\0A\00"
@"#anonymous3" = private constant [15 x i8] c"M.printIt3 %d\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"test2()"() {
"#block0":
  %m = alloca %M
  call void @M.__autoConstruct__(%M* %m)
  %0 = getelementptr %M, %M* %m, i32 0, i32 0
  store i32 8, i32* %0
  %1 = getelementptr %M, %M* %m, i32 0, i32 1
  %2 = load void (%M*)*, void (%M*)** %1
  call void %2(%M* %m)
  %3 = getelementptr %M, %M* %m, i32 0, i32 2
  %4 = load void (%M*, i32)*, void (%M*, i32)** %3
  call void %4(%M* %m, i32 3)
  call void @"M.printIt3(ref[M])"(%M* %m)
  %5 = getelementptr %M, %M* %m, i32 0, i32 3
  %6 = load void (i32)*, void (i32)** %5
  call void %6(i32 12)
  ret void
}

define void @M.__autoConstruct__(%M* %this) {
"#block1":
  %this1 = alloca %M*
  store %M* %this, %M** %this1
  %0 = getelementptr %M, %M* %this, i32 0, i32 1
  store void (%M*)* @"M.printItImpl(iref[M])", void (%M*)** %0
  %1 = getelementptr %M, %M* %this, i32 0, i32 2
  store void (%M*, i32)* @"M.printItImpl2(iref[M],Int[32])", void (%M*, i32)** %1
  %2 = getelementptr %M, %M* %this, i32 0, i32 3
  store void (i32)* @"M.printIt4Impl(Int[32])", void (i32)** %2
  %3 = getelementptr %M, %M* %this, i32 0, i32 4
  store void (i32)* @"M.printIt4Impl(Int[32])", void (i32)** %3
  ret void
}

define void @"M.printItImpl(iref[M])"(%M* %this) {
"#block2":
  %this1 = alloca %M*
  store %M* %this, %M** %this1
  %0 = load %M*, %M** %this1
  %1 = getelementptr %M, %M* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"#anonymous0", i32 0, i32 0), i32 %2)
  ret void
}

define void @"M.printItImpl2(iref[M],Int[32])"(%M* %this, i32 %extra) {
"#block3":
  %this1 = alloca %M*
  store %M* %this, %M** %this1
  %extra2 = alloca i32
  store i32 %extra, i32* %extra2
  %0 = load %M*, %M** %this1
  %1 = getelementptr %M, %M* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = load i32, i32* %extra2
  %4 = add nsw i32 %2, %3
  %5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"#anonymous1", i32 0, i32 0), i32 %4)
  ret void
}

define void @"M.printIt4Impl(Int[32])"(i32 %i) {
"#block4":
  %i1 = alloca i32
  store i32 %i, i32* %i1
  %0 = load i32, i32* %i1
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"#anonymous2", i32 0, i32 0), i32 %0)
  ret void
}

define void @"M.printIt3(ref[M])"(%M* %self) {
"#block5":
  %self1 = alloca %M*
  store %M* %self, %M** %self1
  %0 = load %M*, %M** %self1
  %1 = getelementptr %M, %M* %0, i32 0, i32 0
  %2 = load i32, i32* %1
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"#anonymous3", i32 0, i32 0), i32 %2)
  ret void
}

declare i32 @printf(i8*, ...)
------------------------------------------------------------
