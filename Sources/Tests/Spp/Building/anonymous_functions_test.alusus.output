-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"#anonymous0" = private constant [16 x i8] c"testAnonymous!\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"testAnonymous()"() {
"#block0":
  call void @"callFunc(ptr[()])"(void ()* @__anonymousfunc__0)
  ret void
}

define void @__anonymousfunc__0() {
"#block1":
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous0", i32 0, i32 0))
  ret void
}

define void @"callFunc(ptr[()])"(void ()* %fp) {
"#block2":
  %fp1 = alloca void ()*
  store void ()* %fp, void ()** %fp1
  %0 = load void ()*, void ()** %fp1
  call void %0()
  ret void
}

declare i64 @printf(i8*, ...)
------------------------------------------------------------
-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"#anonymous0" = private constant [17 x i8] c"testNamedInExp!\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"testNamedInExp()"() {
"#block0":
  call void @"callFunc(ptr[()])"(void ()* @"testNamedInExp().0.namedFunc()")
  ret void
}

define void @"testNamedInExp().0.namedFunc()"() {
"#block1":
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous0", i32 0, i32 0))
  ret void
}

define void @"callFunc(ptr[()])"(void ()* %fp) {
"#block2":
  %fp1 = alloca void ()*
  store void ()* %fp, void ()** %fp1
  %0 = load void ()*, void ()** %fp1
  call void %0()
  ret void
}

declare i64 @printf(i8*, ...)
------------------------------------------------------------
[0;31mERROR SPPA1015: Trying to access a local variable from a different function.[0m
  anonymous_functions_test.alusus (25,47)
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"#anonymous0" = private constant [28 x i8] c"testAccessingOwnerVars %d!\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"testAccessingOwnerVars()"() {
"#block0":
  %i = alloca i32
  store i32 5, i32* %i
  call void @"callFunc(ptr[()])"(void ()* @__anonymousfunc__1)
  ret void
}

define void @__anonymousfunc__1() {
"#block1":
  ret void
}

define void @"callFunc(ptr[()])"(void ()* %fp) {
"#block2":
  %fp1 = alloca void ()*
  store void ()* %fp, void ()** %fp1
  %0 = load void ()*, void ()** %fp1
  call void %0()
  ret void
}
------------------------------------------------------------
