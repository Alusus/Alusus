[0;31mERROR SPPA1008: Provided arguments do not match signature.[0m
  function_pointers_test.alusus (30,19)
[0;31mERROR SPPA1008: Provided arguments do not match signature.[0m
  function_pointers_test.alusus (31,19)
[0;31mERROR SPPA1008: Provided arguments do not match signature.[0m
  function_pointers_test.alusus (32,21)
[0;31mERROR SPPA1008: Provided arguments do not match signature.[0m
  function_pointers_test.alusus (33,19)
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }
%Main_Rec = type { i32 ()*, i32 (i32)* }

@"!Main.pget2" = global i32 ()* null
@"!Main.pmul2" = global i32 (i32)* null
@"#anonymous0" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous1" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous2" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous3" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous4" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous5" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous6" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous7" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous8" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous9" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous10" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous11" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous12" = private constant [4 x i8] c"%d\0A\00"
@llvm.global_ctors = appending constant [1 x %LlvmGlobalCtorDtor] [%LlvmGlobalCtorDtor { i32 0, void ()* @__entry__, i32* null }]
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @__entry__() {
"#block0":
  ret void
}

declare i64 @printf(i8*, ...)

define void @"Main.start()=>(Void)"() {
"#block1":
  %pget = alloca i32 ()*
  %pmul = alloca i32 (i32)*
  %pf = alloca float*
  %r = alloca %Main_Rec
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous0", i32 0, i32 0), i32 ()* @"Main.getNum1()=>(Int[32])")
  store i32 ()* @"Main.getNum1()=>(Int[32])", i32 ()** %pget
  store i32 ()* @"Main.getNum2()=>(Int[32])", i32 ()** @"!Main.pget2"
  %1 = getelementptr %Main_Rec, %Main_Rec* %r, i32 0, i32 0
  store i32 ()* @"Main.getNum3()=>(Int[32])", i32 ()** %1
  %2 = load i32 ()*, i32 ()** %pget
  %3 = call i32 %2()
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous1", i32 0, i32 0), i32 %3)
  %5 = load i32 ()*, i32 ()** @"!Main.pget2"
  %6 = call i32 %5()
  %7 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous2", i32 0, i32 0), i32 %6)
  %8 = getelementptr %Main_Rec, %Main_Rec* %r, i32 0, i32 0
  %9 = load i32 ()*, i32 ()** %8
  %10 = call i32 %9()
  %11 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous3", i32 0, i32 0), i32 %10)
  %12 = call i32 ()* @"Main.getFunc1()=>(ptr[()=>(Int[32])])"()
  %13 = call i32 %12()
  %14 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous4", i32 0, i32 0), i32 %13)
  store i32 (i32)* @"Main.mulX2(Int[32])=>(Int[32])", i32 (i32)** %pmul
  store i32 (i32)* @"Main.mulX3(Int[32])=>(Int[32])", i32 (i32)** @"!Main.pmul2"
  %15 = getelementptr %Main_Rec, %Main_Rec* %r, i32 0, i32 1
  store i32 (i32)* @"Main.mulX4(Int[32])=>(Int[32])", i32 (i32)** %15
  %16 = load i32 (i32)*, i32 (i32)** %pmul
  %17 = call i32 %16(i32 3)
  %18 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous5", i32 0, i32 0), i32 %17)
  %19 = load i32 (i32)*, i32 (i32)** @"!Main.pmul2"
  %20 = call i32 %19(i32 3)
  %21 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous6", i32 0, i32 0), i32 %20)
  %22 = getelementptr %Main_Rec, %Main_Rec* %r, i32 0, i32 1
  %23 = load i32 (i32)*, i32 (i32)** %22
  %24 = call i32 %23(i32 3)
  %25 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous7", i32 0, i32 0), i32 %24)
  %26 = call i32 (i32)* @"Main.getFunc2()=>(ptr[(Int[32])=>(Int[32])])"()
  %27 = call i32 %26(i32 3)
  %28 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous8", i32 0, i32 0), i32 %27)
  %29 = call i32 (i32)* @"Main.getFunc2()=>(ptr[(Int[32])=>(Int[32])])"()
  ret void
}

define i32 @"Main.getNum1()=>(Int[32])"() {
"#block4":
  ret i32 5
}

define i32 @"Main.getNum2()=>(Int[32])"() {
"#block5":
  ret i32 7
}

define i32 @"Main.getNum3()=>(Int[32])"() {
"#block6":
  ret i32 13
}

define i32 ()* @"Main.getFunc1()=>(ptr[()=>(Int[32])])"() {
"#block2":
  ret i32 ()* @"Main.getNum4()=>(Int[32])"
}

define i32 @"Main.mulX2(Int[32])=>(Int[32])"(i32 %n) {
"#block8":
  %n1 = alloca i32
  store i32 %n, i32* %n1
  %0 = load i32, i32* %n1
  %1 = mul nsw i32 %0, 2
  ret i32 %1
}

define i32 @"Main.mulX3(Int[32])=>(Int[32])"(i32 %n) {
"#block9":
  %n1 = alloca i32
  store i32 %n, i32* %n1
  %0 = load i32, i32* %n1
  %1 = mul nsw i32 %0, 3
  ret i32 %1
}

define i32 @"Main.mulX4(Int[32])=>(Int[32])"(i32 %n) {
"#block10":
  %n1 = alloca i32
  store i32 %n, i32* %n1
  %0 = load i32, i32* %n1
  %1 = mul nsw i32 %0, 4
  ret i32 %1
}

define i32 (i32)* @"Main.getFunc2()=>(ptr[(Int[32])=>(Int[32])])"() {
"#block3":
  ret i32 (i32)* @"Main.mulX5(Int[32])=>(Int[32])"
}

define i32 @"Main.getNum4()=>(Int[32])"() {
"#block7":
  ret i32 17
}

define i32 @"Main.mulX5(Int[32])=>(Int[32])"(i32 %n) {
"#block11":
  %n1 = alloca i32
  store i32 %n, i32* %n1
  %0 = load i32, i32* %n1
  %1 = mul nsw i32 %0, 5
  ret i32 %1
}
------------------------------------------------------------
