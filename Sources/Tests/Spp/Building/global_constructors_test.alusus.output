-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%A = type { i32 }
%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"#anonymous0" = private constant [4 x i8] c"%d\0A\00"
@"!a" = global %A zeroinitializer
@"#anonymous1" = private constant [8 x i8] c"A~init\0A\00"
@"#anonymous2" = private constant [13 x i8] c"A~terminate\0A\00"
@llvm.global_ctors = appending constant [1 x %LlvmGlobalCtorDtor] [%LlvmGlobalCtorDtor { i32 0, void ()* @__constructor__3, i32* null }]
@llvm.global_dtors = appending constant [1 x %LlvmGlobalCtorDtor] [%LlvmGlobalCtorDtor { i32 0, void ()* @__destructor__4, i32* null }]

define void @main() {
"#block0":
  %0 = load i32, i32* getelementptr inbounds (%A, %A* @"!a", i32 0, i32 0)
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous0", i32 0, i32 0), i32 %0)
  ret void
}

declare i64 @printf(i8*, ...)

define void @__constructor__3() {
"#block1":
  call void @"A.~init(ref[A])"(%A* @"!a")
  ret void
}

define void @"A.~init(ref[A])"(%A* %this) {
"#block3":
  %this1 = alloca %A*
  store %A* %this, %A** %this1
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous1", i32 0, i32 0))
  %1 = load %A*, %A** %this1
  %2 = getelementptr %A, %A* %1, i32 0, i32 0
  store i32 6, i32* %2
  ret void
}

define void @__destructor__4() {
"#block2":
  call void @"A.~terminate(ref[A])"(%A* @"!a")
  ret void
}

define void @"A.~terminate(ref[A])"(%A* %this) {
"#block4":
  %this1 = alloca %A*
  store %A* %this, %A** %this1
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous2", i32 0, i32 0))
  ret void
}
------------------------------------------------------------
