import "libalusus_spp.so";

def Main: module
{
  def print: @expname[printf] function (fmt: ptr[Word[8]], args: ...any)=>Int[64];
  def i: Int;

  def Point: type
  {
    def x: Int[32];
    def y: Int[32];
    def s: Float[32];
    def xref: alias x;
    def iref: alias i;
    def wrongRef: alias wrong;
  };

  def gpoint: Point;

  def Nested: type
  {
    def p: Point;
    def i: Int[8];
    def j: Int[16];
  };

  def Empty: type
  {
  };

  def Wrong: type
  {
    def w: Invalid
  };

  def getPoint: function(x: Int[32], y: Int[32], s: Float[32])=>Point
  {
    def p: Point;
    p.x = x;
    p.y = y;
    p.s = s;
    return p;
  };

  def printPoint: function (p: Point)=>Void
  {
    print("p.x = %d\n", p.x);
    print("p.y = %d\n", p.y);
  };

  def start: function ()=>Void
  {
    def p: Point;
    def n: Nested;
    def e: Empty;

    p.x = 5;
    p.y = 6;
    p.s = 1.0;

    n.i = 8i8;
    n.j = 9i8;
    n.p.x = 3;

    n.p = p;

    print("p.x=%d\n", p.x);
    print("n.p.y=%d\n", n.p.y);

    p.i = 5;
    p.x = 1.0;
    p.xref = 1.0;
    p.iref = 5;
    p.wrongRef = 5;
    n.i = 10;
    n.i = p.y;
    print("p.i=%d\n", p.i);

    print("getPoint(1, 2, 3f).y = %d\n", getPoint(1, 2, 3f).y);
    printPoint(p);
    printPoint(getPoint(2, 4, 6f));
    p = getPoint(4, 8, 9f);
    printPoint(p);

    print("gpoint.x = %d\n", gpoint.x);
    print("gpoing.y = %d\n", gpoint.y);
  }
};

dump_llvm_ir Main;
