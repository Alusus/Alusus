ERROR SPPA1003 @ (47,12): No valid match was found for the given type.
ERROR SPPA1004 @ (84,7): No valid match was found for the given type member.
ERROR SPPA1004 @ (87,7): No valid match was found for the given type member.
ERROR SPPA1004 @ (88,7): No valid match was found for the given type member.
ERROR SPPA1004 @ (91,25): No valid match was found for the given type member.
ERROR SPPG1015 @ (108,5): Incompatible types for the given operator.
ERROR SPPG1015 @ (110,5): Incompatible types for the given operator.
ERROR SPPG1015 @ (111,5): Incompatible types for the given operator.
ERROR SPPG1036 @ (113,5): Cannot use dot operator on this type of elements.
ERROR SPPG1036 @ (114,5): Cannot use dot operator on this type of elements.
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%Main_Point = type { i32, i32, float }
%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }
%Main_Nested = type { %Main_Point, i8, i16 }
%Main_Empty = type {}
%Main_DeepNested = type { %Main_Nested, i8, i16 }

@"!Main.i" = global i32 0
@"!Main.gpoint" = global %Main_Point zeroinitializer
@"#anonymous0" = private constant [10 x i8] c"p.x = %d\0A\00"
@"#anonymous1" = private constant [10 x i8] c"p.y = %d\0A\00"
@"#anonymous2" = private constant [8 x i8] c"p.x=%d\0A\00"
@"#anonymous3" = private constant [10 x i8] c"n.p.y=%d\0A\00"
@"#anonymous4" = private constant [8 x i8] c"p.i=%d\0A\00"
@"#anonymous5" = private constant [27 x i8] c"getPoint(1, 2, 3f).y = %d\0A\00"
@"#anonymous6" = private constant [15 x i8] c"gpoint.x = %d\0A\00"
@"#anonymous7" = private constant [15 x i8] c"gpoing.y = %d\0A\00"
@llvm.global_ctors = appending constant [1 x %LlvmGlobalCtorDtor] [%LlvmGlobalCtorDtor { i32 0, void ()* @__entry__, i32* null }]
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @__entry__() {
"#block0":
  ret void
}

declare i64 @printf(i8*, ...)

define %Main_Point @"Main.getPoint(Int[32],Int[32],Float[32])=>(Main.Point)"(i32 %x, i32 %y, float %s) {
"#block1":
  %x1 = alloca i32
  store i32 %x, i32* %x1
  %y2 = alloca i32
  store i32 %y, i32* %y2
  %s3 = alloca float
  store float %s, float* %s3
  %p = alloca %Main_Point
  %0 = getelementptr %Main_Point, %Main_Point* %p, i32 0, i32 0
  %1 = load i32, i32* %x1
  store i32 %1, i32* %0
  %2 = getelementptr %Main_Point, %Main_Point* %p, i32 0, i32 1
  %3 = load i32, i32* %y2
  store i32 %3, i32* %2
  %4 = getelementptr %Main_Point, %Main_Point* %p, i32 0, i32 2
  %5 = load float, float* %s3
  store float %5, float* %4
  %6 = load %Main_Point, %Main_Point* %p
  ret %Main_Point %6
}

define void @"Main.printPoint(Main.Point)=>(Void)"(%Main_Point %p) {
"#block2":
  %p1 = alloca %Main_Point
  store %Main_Point %p, %Main_Point* %p1
  %0 = getelementptr %Main_Point, %Main_Point* %p1, i32 0, i32 0
  %1 = load i32, i32* %0
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"#anonymous0", i32 0, i32 0), i32 %1)
  %3 = getelementptr %Main_Point, %Main_Point* %p1, i32 0, i32 1
  %4 = load i32, i32* %3
  %5 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"#anonymous1", i32 0, i32 0), i32 %4)
  ret void
}

define void @"Main.start()=>(Void)"() {
"#block3":
  %p = alloca %Main_Point
  %n = alloca %Main_Nested
  %e = alloca %Main_Empty
  %0 = getelementptr %Main_Point, %Main_Point* %p, i32 0, i32 0
  store i32 5, i32* %0
  %1 = getelementptr %Main_Point, %Main_Point* %p, i32 0, i32 1
  store i32 6, i32* %1
  %2 = getelementptr %Main_Point, %Main_Point* %p, i32 0, i32 2
  store float 1.000000e+00, float* %2
  %3 = getelementptr %Main_Nested, %Main_Nested* %n, i32 0, i32 1
  store i8 8, i8* %3
  %4 = getelementptr %Main_Nested, %Main_Nested* %n, i32 0, i32 2
  store i16 9, i16* %4
  %5 = getelementptr %Main_Nested, %Main_Nested* %n, i32 0, i32 0
  %6 = getelementptr %Main_Point, %Main_Point* %5, i32 0, i32 0
  store i32 3, i32* %6
  %7 = getelementptr %Main_Nested, %Main_Nested* %n, i32 0, i32 0
  %8 = load %Main_Point, %Main_Point* %p
  store %Main_Point %8, %Main_Point* %7
  %9 = getelementptr %Main_Point, %Main_Point* %p, i32 0, i32 0
  %10 = load i32, i32* %9
  %11 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous2", i32 0, i32 0), i32 %10)
  %12 = getelementptr %Main_Nested, %Main_Nested* %n, i32 0, i32 0
  %13 = getelementptr %Main_Point, %Main_Point* %12, i32 0, i32 1
  %14 = load i32, i32* %13
  %15 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"#anonymous3", i32 0, i32 0), i32 %14)
  %16 = getelementptr %Main_Point, %Main_Point* %p, i32 0, i32 0
  store i32 1, i32* %16
  %17 = getelementptr %Main_Point, %Main_Point* %p, i32 0, i32 0
  store i32 1, i32* %17
  %18 = getelementptr %Main_Nested, %Main_Nested* %n, i32 0, i32 1
  store i8 10, i8* %18
  %19 = getelementptr %Main_Nested, %Main_Nested* %n, i32 0, i32 1
  %20 = getelementptr %Main_Point, %Main_Point* %p, i32 0, i32 1
  %21 = load i32, i32* %20
  %22 = trunc i32 %21 to i8
  store i8 %22, i8* %19
  %23 = call %Main_Point @"Main.getPoint(Int[32],Int[32],Float[32])=>(Main.Point)"(i32 1, i32 2, float 3.000000e+00)
  %24 = alloca %Main_Point
  store %Main_Point %23, %Main_Point* %24
  %25 = getelementptr %Main_Point, %Main_Point* %24, i32 0, i32 1
  %26 = load i32, i32* %25
  %27 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @"#anonymous5", i32 0, i32 0), i32 %26)
  %28 = load %Main_Point, %Main_Point* %p
  call void @"Main.printPoint(Main.Point)=>(Void)"(%Main_Point %28)
  %29 = call %Main_Point @"Main.getPoint(Int[32],Int[32],Float[32])=>(Main.Point)"(i32 2, i32 4, float 6.000000e+00)
  call void @"Main.printPoint(Main.Point)=>(Void)"(%Main_Point %29)
  %30 = call %Main_Point @"Main.getPoint(Int[32],Int[32],Float[32])=>(Main.Point)"(i32 4, i32 8, float 9.000000e+00)
  store %Main_Point %30, %Main_Point* %p
  %31 = load %Main_Point, %Main_Point* %p
  call void @"Main.printPoint(Main.Point)=>(Void)"(%Main_Point %31)
  %32 = load i32, i32* getelementptr inbounds (%Main_Point, %Main_Point* @"!Main.gpoint", i32 0, i32 0)
  %33 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"#anonymous6", i32 0, i32 0), i32 %32)
  %34 = load i32, i32* getelementptr inbounds (%Main_Point, %Main_Point* @"!Main.gpoint", i32 0, i32 1)
  %35 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @"#anonymous7", i32 0, i32 0), i32 %34)
  %pp = alloca %Main_Point*
  %pn = alloca %Main_Nested*
  %pd = alloca %Main_DeepNested*
  %d = alloca %Main_DeepNested
  %36 = bitcast %Main_Nested* %n to %Main_Point*
  store %Main_Point* %36, %Main_Point** %pp
  %37 = bitcast %Main_DeepNested* %d to %Main_Point*
  store %Main_Point* %37, %Main_Point** %pp
  %38 = bitcast %Main_DeepNested* %d to %Main_Nested*
  store %Main_Nested* %38, %Main_Nested** %pn
  ret void
}
------------------------------------------------------------
