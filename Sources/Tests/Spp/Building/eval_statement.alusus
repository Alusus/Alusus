import "Core/Data";
import "Spp";
import "Srl/Console";
import "Srl/String";
import "Srl/Map";

use Srl;

func preprocessTest {
  use Srl.Console;
  preprocess {
    Srl.Console.print("Preprocess block.\n");
  }
  preprocess {
    Srl.Console.print("Preprocess block 2.\n");
  }
  Srl.Console.print("Hello");
  preprocess Srl.Console.print("Preprocess statement.\n");
  Srl.Console.print(" World!\n");
  preprocess {
    def i: Int(5);
    print("Multiline\n");
    print("preprocess block\n");
    print("def statement inside preprocess: i = %d\n", i);
    print("temp var def inside preprocess: Int(7) = %d\n", Int(7));
  }
}

Spp.buildMgr.dumpLlvmIrForElement(preprocessTest~ast);

def defstmt: { def __name__: Int };
def printstmt: Console.print("hello world\n");
def varName: "x";
def someNum: 12;

func testAstInsertion {
    preprocess {
        def m: Map[String, ref[Core.Basic.TiObject]];
        m.set(String("name"), varName~ast);
        Spp.astMgr.insertAst(defstmt~ast, m);
        Spp.astMgr.insertAst(printstmt~ast, Map[String, ref[Core.Basic.TiObject]]());

        Spp.astMgr.insertAst(
            ast { def name: Float[64](sompreprocess) },
            Map[String, ref[Core.Basic.TiObject]]()
                .set(String("name"), Core.Basic.TiStr("y"))
                .set(String("sompreprocess"), Core.Data.Ast.FloatLiteral("6"))
        );
    }
    x = 7;
    Console.print("x = %d\n", x);
    x = preprocess { Spp.astMgr.insertAst(someNum~ast, Map[String, ref[Core.Basic.TiObject]]()) };
    Console.print("x = %d\n", x);

    Console.print("y = %f\n", y);
}

Spp.buildMgr.dumpLlvmIrForElement(testAstInsertion~ast);

type A {
    def i: Int;
    handler this~init() {
        this.i = 1;
        Console.print("A~init\n");
    }
    handler this~terminate() {
        Console.print("A~terminate\n");
    }
}

func testPreprocessVarDestruction {
    preprocess {
        def a: A;
        a.i = 3;
        Console.print("a.i = %d\n", a.i);
        Console.print("A().i = %d\n", A().i);
        Console.print("a.i*2 = %d\n", a.i * 2);
    }
}

Spp.buildMgr.dumpLlvmIrForElement(testPreprocessVarDestruction~ast);

func testError {
  preprocess {
    def d: Unknown;
  }
  Console.print("testError\n");
}

Spp.buildMgr.dumpLlvmIrForElement(testError~ast);
