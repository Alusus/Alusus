ERROR SPPG1015 @ (134,32): Incompatible types for the given operator.
ERROR SPPG1008 @ (143,19): Invalid symbol.
ERROR SPPG1008 @ (144,23): Invalid symbol.
ERROR SPPG1008 @ (145,19): Invalid symbol.
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"

@"#anonymous0" = private constant [8 x i8] c"1+1=%d\0A\00", align 1
@"#anonymous1" = private constant [8 x i8] c"5-2=%d\0A\00", align 1
@"#anonymous2" = private constant [8 x i8] c"7*3=%d\0A\00", align 1
@"#anonymous3" = private constant [9 x i8] c"10/2=%d\0A\00", align 1
@"#anonymous4" = private constant [8 x i8] c"9%2=%d\0A\00", align 1
@"#anonymous5" = private constant [9 x i8] c"8>>2=%d\0A\00", align 1
@"#anonymous6" = private constant [9 x i8] c"8<<2=%d\0A\00", align 1
@"#anonymous7" = private constant [8 x i8] c"7&2=%d\0A\00", align 1
@"#anonymous8" = private constant [8 x i8] c"4|2=%d\0A\00", align 1
@"#anonymous9" = private constant [9 x i8] c"7$12=%d\0A\00", align 1
@"#anonymous10" = private constant [7 x i8] c"!1=%d\0A\00", align 1
@"#anonymous11" = private constant [8 x i8] c"-34=%d\0A\00", align 1
@"#anonymous12" = private constant [8 x i8] c"+34=%d\0A\00", align 1
@"#anonymous13" = private constant [10 x i8] c"1+2*3=%d\0A\00", align 1
@"#anonymous14" = private constant [11 x i8] c"10-6/2=%d\0A\00", align 1
@"#anonymous15" = private constant [12 x i8] c"(1+2)*3=%d\0A\00", align 1
@"#anonymous16" = private constant [13 x i8] c"(10-6)/2=%d\0A\00", align 1
@"#anonymous17" = private constant [13 x i8] c"(10-1)%2=%d\0A\00", align 1
@"#anonymous18" = private constant [14 x i8] c"(10-2)>>2=%d\0A\00", align 1
@"#anonymous19" = private constant [14 x i8] c"(10-2)<<2=%d\0A\00", align 1
@"#anonymous20" = private constant [13 x i8] c"(10-3)&2=%d\0A\00", align 1
@"#anonymous21" = private constant [13 x i8] c"(10-6)|2=%d\0A\00", align 1
@"#anonymous22" = private constant [14 x i8] c"(10-3)$12=%d\0A\00", align 1
@"#anonymous23" = private constant [12 x i8] c"!(10-9)=%d\0A\00", align 1
@"#anonymous24" = private constant [14 x i8] c"-(10 * 2)=%d\0A\00", align 1
@"#anonymous25" = private constant [14 x i8] c"+(10 * 2)=%d\0A\00", align 1
@"#anonymous26" = private constant [12 x i8] c"++i32 = %d\0A\00", align 1
@"#anonymous27" = private constant [12 x i8] c"++i64 = %d\0A\00", align 1
@"#anonymous28" = private constant [12 x i8] c"--i32 = %d\0A\00", align 1
@"#anonymous29" = private constant [12 x i8] c"--i64 = %d\0A\00", align 1
@"#anonymous30" = private constant [12 x i8] c"i32++ = %d\0A\00", align 1
@"#anonymous31" = private constant [12 x i8] c"i64++ = %d\0A\00", align 1
@"#anonymous32" = private constant [12 x i8] c"i32-- = %d\0A\00", align 1
@"#anonymous33" = private constant [12 x i8] c"i64-- = %d\0A\00", align 1
@"#anonymous34" = private constant [16 x i8] c"i32 += 7 => %d\0A\00", align 1
@"#anonymous35" = private constant [16 x i8] c"i32 -= 2 => %d\0A\00", align 1
@"#anonymous36" = private constant [16 x i8] c"i32 *= 2 => %d\0A\00", align 1
@"#anonymous37" = private constant [16 x i8] c"i32 /= 5 => %d\0A\00", align 1
@"#anonymous38" = private constant [16 x i8] c"i32 %= 2 => %d\0A\00", align 1
@"#anonymous39" = private constant [17 x i8] c"i32 >>= 2 => %d\0A\00", align 1
@"#anonymous40" = private constant [17 x i8] c"i32 <<= 2 => %d\0A\00", align 1
@"#anonymous41" = private constant [16 x i8] c"i32 &= 2 => %d\0A\00", align 1
@"#anonymous42" = private constant [16 x i8] c"i32 |= 2 => %d\0A\00", align 1
@"#anonymous43" = private constant [17 x i8] c"i32 $= 12 => %d\0A\00", align 1
@"#anonymous44" = private constant [16 x i8] c"i64 += 7 => %d\0A\00", align 1
@"#anonymous45" = private constant [16 x i8] c"i64 -= 2 => %d\0A\00", align 1
@"#anonymous46" = private constant [16 x i8] c"i64 *= 2 => %d\0A\00", align 1
@"#anonymous47" = private constant [16 x i8] c"i64 /= 5 => %d\0A\00", align 1
@"#anonymous48" = private constant [16 x i8] c"i64 %= 2 => %d\0A\00", align 1
@"#anonymous49" = private constant [17 x i8] c"i64 >>= 2 => %d\0A\00", align 1
@"#anonymous50" = private constant [17 x i8] c"i64 <<= 2 => %d\0A\00", align 1
@"#anonymous51" = private constant [16 x i8] c"i64 &= 2 => %d\0A\00", align 1
@"#anonymous52" = private constant [16 x i8] c"i64 |= 2 => %d\0A\00", align 1
@"#anonymous53" = private constant [17 x i8] c"i64 $= 12 => %d\0A\00", align 1
@"#anonymous54" = private constant [12 x i8] c"1.2+1.2=%f\0A\00", align 1
@"#anonymous55" = private constant [12 x i8] c"5.5-2.5=%f\0A\00", align 1
@"#anonymous56" = private constant [12 x i8] c"7.2*3.5=%f\0A\00", align 1
@"#anonymous57" = private constant [13 x i8] c"10.4/2.0=%f\0A\00", align 1
@"#anonymous58" = private constant [9 x i8] c"-3.4=%f\0A\00", align 1
@"#anonymous59" = private constant [9 x i8] c"+3.4=%f\0A\00", align 1
@"#anonymous60" = private constant [16 x i8] c"1.0+2.0*3.0=%f\0A\00", align 1
@"#anonymous61" = private constant [17 x i8] c"10.0-6.0/2.0=%f\0A\00", align 1
@"#anonymous62" = private constant [18 x i8] c"(1.0+2.0)*3.0=%f\0A\00", align 1
@"#anonymous63" = private constant [19 x i8] c"(10.0-6.0)/2.0=%f\0A\00", align 1
@"#anonymous64" = private constant [18 x i8] c"-(10.0 * 2.3)=%d\0A\00", align 1
@"#anonymous65" = private constant [18 x i8] c"+(10.0 * 2.3)=%d\0A\00", align 1
@"#anonymous66" = private constant [12 x i8] c"++f32 = %f\0A\00", align 1
@"#anonymous67" = private constant [12 x i8] c"++f64 = %f\0A\00", align 1
@"#anonymous68" = private constant [12 x i8] c"--f32 = %f\0A\00", align 1
@"#anonymous69" = private constant [12 x i8] c"--f64 = %f\0A\00", align 1
@"#anonymous70" = private constant [12 x i8] c"f32++ = %f\0A\00", align 1
@"#anonymous71" = private constant [12 x i8] c"f64++ = %f\0A\00", align 1
@"#anonymous72" = private constant [12 x i8] c"f32-- = %f\0A\00", align 1
@"#anonymous73" = private constant [12 x i8] c"f64-- = %f\0A\00", align 1
@"#anonymous74" = private constant [18 x i8] c"f32 += 0.7 => %f\0A\00", align 1
@"#anonymous75" = private constant [18 x i8] c"f32 -= 0.2 => %f\0A\00", align 1
@"#anonymous76" = private constant [18 x i8] c"f32 *= 2.0 => %f\0A\00", align 1
@"#anonymous77" = private constant [19 x i8] c"f32 /= 0.05 => %f\0A\00", align 1
@"#anonymous78" = private constant [19 x i8] c"f64 += 0.07 => %f\0A\00", align 1
@"#anonymous79" = private constant [19 x i8] c"f64 -= 0.02 => %f\0A\00", align 1
@"#anonymous80" = private constant [18 x i8] c"f64 *= 2.0 => %f\0A\00", align 1
@"#anonymous81" = private constant [18 x i8] c"f64 /= 0.5 => %f\0A\00", align 1
@"#anonymous82" = private constant [16 x i8] c"1i8 + 1i8 = %d\0A\00", align 1
@"#anonymous83" = private constant [18 x i8] c"1i64 + 1i64 = %d\0A\00", align 1
@"#anonymous84" = private constant [17 x i8] c"1i8 + 1i64 = %d\0A\00", align 1
@"#anonymous85" = private constant [17 x i8] c"1i64 + 1i8 = %d\0A\00", align 1
@"#anonymous86" = private constant [18 x i8] c"1f32 + 1f32 = %f\0A\00", align 1
@"#anonymous87" = private constant [18 x i8] c"1f64 + 1f64 = %f\0A\00", align 1
@"#anonymous88" = private constant [18 x i8] c"1f64 + 1f32 = %f\0A\00", align 1
@"#anonymous89" = private constant [18 x i8] c"1f32 + 1f64 = %f\0A\00", align 1
@"#anonymous90" = private constant [18 x i8] c"1i32 + 1f32 = %f\0A\00", align 1
@"#anonymous91" = private constant [18 x i8] c"1f32 + 1i32 = %f\0A\00", align 1
@"#anonymous92" = private constant [18 x i8] c"1i64 + 1f32 = %f\0A\00", align 1
@"#anonymous93" = private constant [18 x i8] c"1f32 + 1i64 = %f\0A\00", align 1
@"#anonymous94" = private constant [17 x i8] c"1i32 + ptr = %f\0A\00", align 1
@"#anonymous95" = private constant [4 x i8] c"%d\0A\00", align 1
@"#anonymous96" = private constant [4 x i8] c"%d\0A\00", align 1
@"#anonymous97" = private constant [4 x i8] c"%d\0A\00", align 1

define void @__constructor__() {
"#block0":
  ret void
}

define void @"Main.start()=>(Void)"() {
"#block1":
  call void @"Main.testInteger()=>(Void)"()
  call void @"Main.testFloat()=>(Void)"()
  ret void
}

define void @"Main.testInteger()=>(Void)"() {
"#block2":
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous0", i32 0, i32 0), i32 2)
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous1", i32 0, i32 0), i32 3)
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous2", i32 0, i32 0), i32 21)
  %3 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"#anonymous3", i32 0, i32 0), i32 5)
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous4", i32 0, i32 0), i32 1)
  %5 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"#anonymous5", i32 0, i32 0), i8 2)
  %6 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"#anonymous6", i32 0, i32 0), i8 32)
  %7 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous7", i32 0, i32 0), i8 2)
  %8 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous8", i32 0, i32 0), i8 6)
  %9 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"#anonymous9", i32 0, i32 0), i8 11)
  %10 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([7 x i8], [7 x i8]* @"#anonymous10", i32 0, i32 0), i1 false)
  %11 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous11", i32 0, i32 0), i8 -34)
  %12 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous12", i32 0, i32 0), i8 34)
  %13 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @"#anonymous13", i32 0, i32 0), i32 7)
  %14 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @"#anonymous14", i32 0, i32 0), i32 7)
  %15 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous15", i32 0, i32 0), i32 9)
  %16 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous16", i32 0, i32 0), i32 2)
  %17 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous17", i32 0, i32 0), i32 1)
  %18 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"#anonymous18", i32 0, i32 0), i32 2)
  %19 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"#anonymous19", i32 0, i32 0), i32 32)
  %20 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous20", i32 0, i32 0), i32 2)
  %21 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous21", i32 0, i32 0), i32 6)
  %22 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"#anonymous22", i32 0, i32 0), i32 11)
  %23 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous23", i32 0, i32 0), i32 -2)
  %24 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"#anonymous24", i32 0, i32 0), i32 -20)
  %25 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"#anonymous25", i32 0, i32 0), i32 20)
  %i32 = alloca i32
  %i64 = alloca i64
  store i32 3, i32* %i32
  store i64 4, i64* %i64
  %26 = load i32, i32* %i32
  %27 = add nsw i32 %26, 1
  store i32 %27, i32* %i32
  %28 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous26", i32 0, i32 0), i32 %27)
  %29 = load i64, i64* %i64
  %30 = add nsw i64 %29, 1
  store i64 %30, i64* %i64
  %31 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous27", i32 0, i32 0), i64 %30)
  %32 = load i32, i32* %i32
  %33 = sub nsw i32 %32, 1
  store i32 %33, i32* %i32
  %34 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous28", i32 0, i32 0), i32 %33)
  %35 = load i64, i64* %i64
  %36 = sub nsw i64 %35, 1
  store i64 %36, i64* %i64
  %37 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous29", i32 0, i32 0), i64 %36)
  %38 = load i32, i32* %i32
  %39 = add nsw i32 %38, 1
  store i32 %39, i32* %i32
  %40 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous30", i32 0, i32 0), i32 %38)
  %41 = load i64, i64* %i64
  %42 = add nsw i64 %41, 1
  store i64 %42, i64* %i64
  %43 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous31", i32 0, i32 0), i64 %41)
  %44 = load i32, i32* %i32
  %45 = sub nsw i32 %44, 1
  store i32 %45, i32* %i32
  %46 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous32", i32 0, i32 0), i32 %44)
  %47 = load i64, i64* %i64
  %48 = sub nsw i64 %47, 1
  store i64 %48, i64* %i64
  %49 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous33", i32 0, i32 0), i64 %47)
  store i32 5, i32* %i32
  %50 = load i32, i32* %i32
  %51 = add nsw i32 %50, 7
  store i32 %51, i32* %i32
  %52 = load i32, i32* %i32
  %53 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous34", i32 0, i32 0), i32 %52)
  %54 = load i32, i32* %i32
  %55 = sub nsw i32 %54, 2
  store i32 %55, i32* %i32
  %56 = load i32, i32* %i32
  %57 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous35", i32 0, i32 0), i32 %56)
  %58 = load i32, i32* %i32
  %59 = mul nsw i32 %58, 2
  store i32 %59, i32* %i32
  %60 = load i32, i32* %i32
  %61 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous36", i32 0, i32 0), i32 %60)
  %62 = load i32, i32* %i32
  %63 = sdiv i32 %62, 5
  store i32 %63, i32* %i32
  %64 = load i32, i32* %i32
  %65 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous37", i32 0, i32 0), i32 %64)
  store i32 9, i32* %i32
  %66 = load i32, i32* %i32
  %67 = srem i32 %66, 2
  store i32 %67, i32* %i32
  %68 = load i32, i32* %i32
  %69 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous38", i32 0, i32 0), i32 %68)
  store i32 8, i32* %i32
  %70 = load i32, i32* %i32
  %71 = ashr i32 %70, 2
  store i32 %71, i32* %i32
  %72 = load i32, i32* %i32
  %73 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous39", i32 0, i32 0), i32 %72)
  store i32 8, i32* %i32
  %74 = load i32, i32* %i32
  %75 = shl i32 %74, 2
  store i32 %75, i32* %i32
  %76 = load i32, i32* %i32
  %77 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous40", i32 0, i32 0), i32 %76)
  store i32 7, i32* %i32
  %78 = load i32, i32* %i32
  %79 = and i32 %78, 2
  store i32 %79, i32* %i32
  %80 = load i32, i32* %i32
  %81 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous41", i32 0, i32 0), i32 %80)
  store i32 4, i32* %i32
  %82 = load i32, i32* %i32
  %83 = or i32 %82, 2
  store i32 %83, i32* %i32
  %84 = load i32, i32* %i32
  %85 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous42", i32 0, i32 0), i32 %84)
  store i32 7, i32* %i32
  %86 = load i32, i32* %i32
  %87 = xor i32 %86, 12
  store i32 %87, i32* %i32
  %88 = load i32, i32* %i32
  %89 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous43", i32 0, i32 0), i32 %88)
  store i64 15, i64* %i64
  %90 = load i64, i64* %i64
  %91 = add nsw i64 %90, 7
  store i64 %91, i64* %i64
  %92 = load i64, i64* %i64
  %93 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous44", i32 0, i32 0), i64 %92)
  %94 = load i64, i64* %i64
  %95 = sub nsw i64 %94, 2
  store i64 %95, i64* %i64
  %96 = load i64, i64* %i64
  %97 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous45", i32 0, i32 0), i64 %96)
  %98 = load i64, i64* %i64
  %99 = mul nsw i64 %98, 2
  store i64 %99, i64* %i64
  %100 = load i64, i64* %i64
  %101 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous46", i32 0, i32 0), i64 %100)
  %102 = load i64, i64* %i64
  %103 = sdiv i64 %102, 5
  store i64 %103, i64* %i64
  %104 = load i64, i64* %i64
  %105 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous47", i32 0, i32 0), i64 %104)
  store i64 9, i64* %i64
  %106 = load i64, i64* %i64
  %107 = srem i64 %106, 2
  store i64 %107, i64* %i64
  %108 = load i64, i64* %i64
  %109 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous48", i32 0, i32 0), i64 %108)
  store i64 8, i64* %i64
  %110 = load i64, i64* %i64
  %111 = ashr i64 %110, 2
  store i64 %111, i64* %i64
  %112 = load i64, i64* %i64
  %113 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous49", i32 0, i32 0), i64 %112)
  store i64 8, i64* %i64
  %114 = load i64, i64* %i64
  %115 = shl i64 %114, 2
  store i64 %115, i64* %i64
  %116 = load i64, i64* %i64
  %117 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous50", i32 0, i32 0), i64 %116)
  store i64 7, i64* %i64
  %118 = load i64, i64* %i64
  %119 = and i64 %118, 2
  store i64 %119, i64* %i64
  %120 = load i64, i64* %i64
  %121 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous51", i32 0, i32 0), i64 %120)
  store i64 4, i64* %i64
  %122 = load i64, i64* %i64
  %123 = or i64 %122, 2
  store i64 %123, i64* %i64
  %124 = load i64, i64* %i64
  %125 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous52", i32 0, i32 0), i64 %124)
  store i64 7, i64* %i64
  %126 = load i64, i64* %i64
  %127 = xor i64 %126, 12
  store i64 %127, i64* %i64
  %128 = load i64, i64* %i64
  %129 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous53", i32 0, i32 0), i64 %128)
  ret void
}

declare i64 @printf(i8*, ...)

define void @"Main.testFloat()=>(Void)"() {
"#block3":
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous54", i32 0, i32 0), float 0x4003333340000000)
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous55", i32 0, i32 0), float 3.000000e+00)
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous56", i32 0, i32 0), float 0x4039333320000000)
  %3 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous57", i32 0, i32 0), float 0x4014CCCCC0000000)
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"#anonymous58", i32 0, i32 0), float 0xC00B333340000000)
  %5 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @"#anonymous59", i32 0, i32 0), float 0x400B333340000000)
  %6 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous60", i32 0, i32 0), float 7.000000e+00)
  %7 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous61", i32 0, i32 0), float 7.000000e+00)
  %8 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous62", i32 0, i32 0), float 9.000000e+00)
  %9 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"#anonymous63", i32 0, i32 0), float 2.000000e+00)
  %10 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous64", i32 0, i32 0), float -2.300000e+01)
  %11 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous65", i32 0, i32 0), float 2.300000e+01)
  %f32 = alloca float
  %f64 = alloca double
  store float 5.000000e+00, float* %f32
  store double 6.000000e+00, double* %f64
  %12 = load float, float* %f32
  %13 = fadd float %12, 1.000000e+00
  store float %13, float* %f32
  %14 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous66", i32 0, i32 0), float %13)
  %15 = load double, double* %f64
  %16 = fadd double %15, 1.000000e+00
  store double %16, double* %f64
  %17 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous67", i32 0, i32 0), double %16)
  %18 = load float, float* %f32
  %19 = fsub float %18, 1.000000e+00
  store float %19, float* %f32
  %20 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous68", i32 0, i32 0), float %19)
  %21 = load double, double* %f64
  %22 = fsub double %21, 1.000000e+00
  store double %22, double* %f64
  %23 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous69", i32 0, i32 0), double %22)
  %24 = load float, float* %f32
  %25 = fadd float %24, 1.000000e+00
  store float %25, float* %f32
  %26 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous70", i32 0, i32 0), float %24)
  %27 = load double, double* %f64
  %28 = fadd double %27, 1.000000e+00
  store double %28, double* %f64
  %29 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous71", i32 0, i32 0), double %27)
  %30 = load float, float* %f32
  %31 = fsub float %30, 1.000000e+00
  store float %31, float* %f32
  %32 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous72", i32 0, i32 0), float %30)
  %33 = load double, double* %f64
  %34 = fsub double %33, 1.000000e+00
  store double %34, double* %f64
  %35 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous73", i32 0, i32 0), double %33)
  store float 5.000000e-01, float* %f32
  %36 = load float, float* %f32
  %37 = fadd float %36, 0x3FE6666660000000
  store float %37, float* %f32
  %38 = load float, float* %f32
  %39 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous74", i32 0, i32 0), float %38)
  %40 = load float, float* %f32
  %41 = fsub float %40, 0x3FC99999A0000000
  store float %41, float* %f32
  %42 = load float, float* %f32
  %43 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous75", i32 0, i32 0), float %42)
  %44 = load float, float* %f32
  %45 = fmul float %44, 2.000000e+00
  store float %45, float* %f32
  %46 = load float, float* %f32
  %47 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous76", i32 0, i32 0), float %46)
  %48 = load float, float* %f32
  %49 = fdiv float %48, 0x3FA99999A0000000
  store float %49, float* %f32
  %50 = load float, float* %f32
  %51 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"#anonymous77", i32 0, i32 0), float %50)
  store double 0x3FC3333340000000, double* %f64
  %52 = load double, double* %f64
  %53 = fadd double %52, 0x3FB1EB8520000000
  store double %53, double* %f64
  %54 = load double, double* %f64
  %55 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"#anonymous78", i32 0, i32 0), double %54)
  %56 = load double, double* %f64
  %57 = fsub double %56, 0x3F947AE140000000
  store double %57, double* %f64
  %58 = load double, double* %f64
  %59 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"#anonymous79", i32 0, i32 0), double %58)
  %60 = load double, double* %f64
  %61 = fmul double %60, 2.000000e+00
  store double %61, double* %f64
  %62 = load double, double* %f64
  %63 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous80", i32 0, i32 0), double %62)
  %64 = load double, double* %f64
  %65 = fdiv double %64, 5.000000e-01
  store double %65, double* %f64
  %66 = load double, double* %f64
  %67 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous81", i32 0, i32 0), double %66)
  ret void
}

define void @"Main.testMixed()=>(Void)"() {
"#block4":
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous82", i32 0, i32 0), i32 2)
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous83", i32 0, i32 0), i64 2)
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous84", i32 0, i32 0), i64 2)
  %3 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @"#anonymous85", i32 0, i32 0), i64 2)
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous86", i32 0, i32 0), float 2.000000e+00)
  %5 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous87", i32 0, i32 0), double 2.000000e+00)
  %6 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous88", i32 0, i32 0), double 2.000000e+00)
  %7 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous89", i32 0, i32 0), double 2.000000e+00)
  %8 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous90", i32 0, i32 0), float 2.000000e+00)
  %9 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous91", i32 0, i32 0), float 2.000000e+00)
  %10 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous92", i32 0, i32 0), float 2.000000e+00)
  %11 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous93", i32 0, i32 0), float 2.000000e+00)
  ret void
}
------------------------------------------------------------
