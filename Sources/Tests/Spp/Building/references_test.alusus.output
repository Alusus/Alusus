-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"!Srl.Memory.alloc" = global i8* (i64)* null
@"!ra" = global [1 x i8]* null
@"#anonymous0" = private constant [26 x i8] c"Reference as pointer. %s\0A\00"
@llvm.global_ctors = appending constant [1 x %LlvmGlobalCtorDtor] [%LlvmGlobalCtorDtor { i32 0, void ()* @__constructor__3, i32* null }]
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"useRefAsPtr()"() {
"#block0":
  %0 = load i8* (i64)*, i8* (i64)** @"!Srl.Memory.alloc"
  %1 = call i8* %0(i64 10)
  %2 = bitcast i8* %1 to [1 x i8]*
  store [1 x i8]* %2, [1 x i8]** @"!ra"
  %3 = load [1 x i8]*, [1 x i8]** @"!ra"
  %4 = getelementptr [1 x i8], [1 x i8]* %3, i32 0, i64 0
  store i8 97, i8* %4
  %5 = load [1 x i8]*, [1 x i8]** @"!ra"
  %6 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([26 x i8]* @"#anonymous0" to [1 x i8]*), [1 x i8]* %5)
  ret void
}

declare i32 @printf([1 x i8]*, ...)

define void @__constructor__3() {
"#block1":
  store i8* (i64)* @malloc, i8* (i64)** @"!Srl.Memory.alloc"
  ret void
}

declare i8* @malloc(i64)
------------------------------------------------------------
-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"!a" = global [10 x i8] zeroinitializer
@"#anonymous0" = private constant [30 x i8] c"Pass reference to object. %s\0A\00"
@"!ra" = global [1 x i8]* null
@"#anonymous1" = private constant [53 x i8] c"Pass reference to object from another reference. %s\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"passRefToValue()"() {
"#block0":
  call void @"updateString(ref[array[Word[8],1]])"([1 x i8]* bitcast ([10 x i8]* @"!a" to [1 x i8]*))
  %0 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([30 x i8]* @"#anonymous0" to [1 x i8]*), [10 x i8]* @"!a")
  %1 = load [1 x i8]*, [1 x i8]** @"!ra"
  call void @"updateString(ref[array[Word[8],1]])"([1 x i8]* %1)
  %2 = load [1 x i8]*, [1 x i8]** @"!ra"
  %3 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([53 x i8]* @"#anonymous1" to [1 x i8]*), [1 x i8]* %2)
  ret void
}

define void @"updateString(ref[array[Word[8],1]])"([1 x i8]* %str) {
"#block1":
  %str1 = alloca [1 x i8]*
  store [1 x i8]* %str, [1 x i8]** %str1
  %0 = load [1 x i8]*, [1 x i8]** %str1
  %1 = getelementptr [1 x i8], [1 x i8]* %0, i32 0, i64 0
  store i8 115, i8* %1
  ret void
}

declare i32 @printf([1 x i8]*, ...)
------------------------------------------------------------
-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"#anonymous0" = private constant [6 x i8] c"hello\00"
@"!rb" = global [1 x i8]* null
@"#anonymous1" = private constant [43 x i8] c"Before passing reference to reference. %s\0A\00"
@"#anonymous2" = private constant [42 x i8] c"After passing reference to reference. %s\0A\00"
@"#anonymous3" = private constant [6 x i8] c"world\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"passRefToRefToValue()"() {
"#block0":
  store [1 x i8]* bitcast ([6 x i8]* @"#anonymous0" to [1 x i8]*), [1 x i8]** @"!rb"
  %0 = load [1 x i8]*, [1 x i8]** @"!rb"
  %1 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([43 x i8]* @"#anonymous1" to [1 x i8]*), [1 x i8]* %0)
  call void @"replaceString(ref[ref[array[Word[8],1]]])"([1 x i8]** @"!rb")
  %2 = load [1 x i8]*, [1 x i8]** @"!rb"
  %3 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([42 x i8]* @"#anonymous2" to [1 x i8]*), [1 x i8]* %2)
  ret void
}

declare i32 @printf([1 x i8]*, ...)

define void @"replaceString(ref[ref[array[Word[8],1]]])"([1 x i8]** %str) {
"#block1":
  %str1 = alloca [1 x i8]**
  store [1 x i8]** %str, [1 x i8]*** %str1
  %0 = load [1 x i8]**, [1 x i8]*** %str1
  store [1 x i8]* bitcast ([6 x i8]* @"#anonymous3" to [1 x i8]*), [1 x i8]** %0
  ret void
}
------------------------------------------------------------
-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"#anonymous0" = private constant [32 x i8] c"Reference to function pointer.\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"testFnRef1()"() {
"#block0":
  %pf = alloca void ()*
  %rf = alloca void ()**
  store void ()** %pf, void ()*** %rf
  %0 = load void ()**, void ()*** %rf
  store void ()* @"printMessage()", void ()** %0
  %1 = load void ()**, void ()*** %rf
  %2 = load void ()*, void ()** %1
  call void %2()
  %3 = load void ()*, void ()** %pf
  call void %3()
  ret void
}

define void @"printMessage()"() {
"#block1":
  %0 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([32 x i8]* @"#anonymous0" to [1 x i8]*))
  ret void
}

declare i32 @printf([1 x i8]*, ...)
------------------------------------------------------------
-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"#anonymous0" = private constant [32 x i8] c"Reference to function pointer.\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"testFnRef2()"() {
"#block0":
  %pf = alloca void ()*
  call void @"getFn(ref[ptr[()]])"(void ()** %pf)
  %0 = load void ()*, void ()** %pf
  call void %0()
  ret void
}

define void @"getFn(ref[ptr[()]])"(void ()** %fn) {
"#block1":
  %fn1 = alloca void ()**
  store void ()** %fn, void ()*** %fn1
  %0 = load void ()**, void ()*** %fn1
  store void ()* @"printMessage()", void ()** %0
  ret void
}

define void @"printMessage()"() {
"#block2":
  %0 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([32 x i8]* @"#anonymous0" to [1 x i8]*))
  ret void
}

declare i32 @printf([1 x i8]*, ...)
------------------------------------------------------------
-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"!i" = global i32 0
@"!ri" = global i32* null
@"#anonymous0" = private constant [4 x i8] c"%d\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"passRefAsPtr()"() {
"#block0":
  store i32* @"!i", i32** @"!ri"
  store i32 5, i32* @"!i"
  %0 = load i32*, i32** @"!ri"
  call void @"printNumPtr(ptr[Int[32]])"(i32* %0)
  ret void
}

define void @"printNumPtr(ptr[Int[32]])"(i32* %pn) {
"#block1":
  %pn1 = alloca i32*
  store i32* %pn, i32** %pn1
  %0 = load i32*, i32** %pn1
  %1 = load i32, i32* %0
  %2 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([4 x i8]* @"#anonymous0" to [1 x i8]*), i32 %1)
  ret void
}

declare i32 @printf([1 x i8]*, ...)
------------------------------------------------------------
-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"!ri" = global i32* null
@"!rri" = global i32** null
@"#anonymous0" = private constant [4 x i8] c"%d\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"passRefRefAsPtrPtr()"() {
"#block0":
  store i32** @"!ri", i32*** @"!rri"
  %0 = load i32**, i32*** @"!rri"
  call void @"printNumPtrPtr(ptr[ptr[Int[32]]])"(i32** %0)
  ret void
}

define void @"printNumPtrPtr(ptr[ptr[Int[32]]])"(i32** %pn) {
"#block1":
  %pn1 = alloca i32**
  store i32** %pn, i32*** %pn1
  %0 = load i32**, i32*** %pn1
  %1 = load i32*, i32** %0
  %2 = load i32, i32* %1
  %3 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([4 x i8]* @"#anonymous0" to [1 x i8]*), i32 %2)
  ret void
}

declare i32 @printf([1 x i8]*, ...)
------------------------------------------------------------
-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"!rri" = global i32** null
@"#anonymous0" = private constant [4 x i8] c"%d\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"getObjectFromRefRef()"() {
"#block0":
  %0 = load i32**, i32*** @"!rri"
  %1 = load i32*, i32** %0
  %2 = load i32, i32* %1
  call void @"printNum(Int[32])"(i32 %2)
  ret void
}

define void @"printNum(Int[32])"(i32 %n) {
"#block1":
  %n1 = alloca i32
  store i32 %n, i32* %n1
  %0 = load i32, i32* %n1
  %1 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([4 x i8]* @"#anonymous0" to [1 x i8]*), i32 %0)
  ret void
}

declare i32 @printf([1 x i8]*, ...)
------------------------------------------------------------
-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }
%A = type { i32 }

@"!Srl.Memory.alloc" = global i8* (i64)* null
@"#anonymous0" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous1" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous2" = private constant [8 x i8] c"%d, %d\0A\00"
@"#anonymous3" = private constant [8 x i8] c"A~init\0A\00"
@"#anonymous4" = private constant [13 x i8] c"A~terminate\0A\00"
@llvm.global_ctors = appending constant [1 x %LlvmGlobalCtorDtor] [%LlvmGlobalCtorDtor { i32 0, void ()* @__constructor__20, i32* null }]
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"testDeref()"() {
"#block0":
  %ra = alloca %A**
  %0 = load i8* (i64)*, i8* (i64)** @"!Srl.Memory.alloc"
  %1 = call i8* %0(i64 8)
  %2 = bitcast i8* %1 to %A**
  store %A** %2, %A*** %ra
  %3 = load %A**, %A*** %ra
  %4 = load i8* (i64)*, i8* (i64)** @"!Srl.Memory.alloc"
  %5 = call i8* %4(i64 4)
  %6 = bitcast i8* %5 to %A*
  store %A* %6, %A** %3
  %7 = load %A**, %A*** %ra
  %8 = load %A*, %A** %7
  call void @"A.~init(ref[A])"(%A* %8)
  %9 = load %A**, %A*** %ra
  %10 = load %A*, %A** %9
  %11 = getelementptr %A, %A* %10, i32 0, i32 0
  %12 = load i32, i32* %11
  %13 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([4 x i8]* @"#anonymous0" to [1 x i8]*), i32 %12)
  %14 = load %A**, %A*** %ra
  %15 = load %A*, %A** %14
  call void @"A.~terminate(ref[A])"(%A* %15)
  %i = alloca i32
  %ri = alloca i32*
  store i32* %i, i32** %ri
  store i32 13, i32* %i
  %16 = load i32*, i32** %ri
  %17 = load i32, i32* %16
  %18 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([4 x i8]* @"#anonymous1" to [1 x i8]*), i32 %17)
  %19 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([8 x i8]* @"#anonymous2" to [1 x i8]*), i32 4, i32 8)
  ret void
}

define void @"A.~init(ref[A])"(%A* %this) {
"#block1":
  %this1 = alloca %A*
  store %A* %this, %A** %this1
  %0 = load %A*, %A** %this1
  %1 = getelementptr %A, %A* %0, i32 0, i32 0
  store i32 7, i32* %1
  %2 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([8 x i8]* @"#anonymous3" to [1 x i8]*))
  ret void
}

declare i32 @printf([1 x i8]*, ...)

define void @"A.~terminate(ref[A])"(%A* %this) {
"#block2":
  %this1 = alloca %A*
  store %A* %this, %A** %this1
  %0 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([13 x i8]* @"#anonymous4" to [1 x i8]*))
  ret void
}

define void @__constructor__20() {
"#block3":
  store i8* (i64)* @malloc, i8* (i64)** @"!Srl.Memory.alloc"
  ret void
}

declare i8* @malloc(i64)
------------------------------------------------------------
-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }
%B = type { i32 }

@"#anonymous0" = private constant [23 x i8] c"receiveTempIntRef: %d\0A\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"testTempRefs()"() {
"#block0":
  %"#temp0" = alloca i32
  store i32 5, i32* %"#temp0"
  call void @"receiveTempIntRef(temp_ref[Int[32]])"(i32* %"#temp0")
  %b = alloca %B
  %"#temp1" = alloca i32
  store i32 5, i32* %"#temp1"
  %0 = call %B* @"B.=(ref[B],temp_ref[Int[32]])=>(ref[B])"(%B* %b, i32* %"#temp1")
  ret void
}

define void @"receiveTempIntRef(temp_ref[Int[32]])"(i32* %r) {
"#block1":
  %r1 = alloca i32*
  store i32* %r, i32** %r1
  %0 = load i32*, i32** %r1
  %1 = load i32, i32* %0
  %2 = call i32 ([1 x i8]*, ...) @printf([1 x i8]* bitcast ([23 x i8]* @"#anonymous0" to [1 x i8]*), i32 %1)
  ret void
}

define %B* @"B.=(ref[B],temp_ref[Int[32]])=>(ref[B])"(%B* %this, i32* %value) {
"#block2":
  %this1 = alloca %B*
  store %B* %this, %B** %this1
  %value2 = alloca i32*
  store i32* %value, i32** %value2
  %0 = load %B*, %B** %this1
  %1 = getelementptr %B, %B* %0, i32 0, i32 0
  %2 = load i32*, i32** %value2
  %3 = load i32, i32* %2
  store i32 %3, i32* %1
  %4 = load %B*, %B** %this1
  ret %B* %4
}

declare i32 @printf([1 x i8]*, ...)
------------------------------------------------------------
-------------------- Generated LLVM IR ---------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }
%TypeWithCaster = type { i32 }

@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"testRefCasting()"() {
"#block0":
  %rri64 = alloca i64**
  %0 = load i64**, i64*** %rri64
  %1 = load i64*, i64** %0
  %2 = load i64, i64* %1
  %3 = inttoptr i64 %2 to i8*
  %4 = load i64**, i64*** %rri64
  %5 = load i64*, i64** %4
  %6 = bitcast i64* %5 to i8**
  %7 = load i64**, i64*** %rri64
  %8 = bitcast i64** %7 to i8**
  %ri = alloca i32*
  %s = alloca i32
  %9 = load i32*, i32** %ri
  %10 = load i32, i32* %9
  store i32 %10, i32* %s
  %a = alloca %TypeWithCaster
  %ra = alloca %TypeWithCaster*
  store %TypeWithCaster* %a, %TypeWithCaster** %ra
  %11 = load %TypeWithCaster*, %TypeWithCaster** %ra
  %12 = call i32* @"TypeWithCaster.~cast(ref[TypeWithCaster])=>(ref[Int[32]])"(%TypeWithCaster* %11)
  %13 = load %TypeWithCaster*, %TypeWithCaster** %ra
  %14 = bitcast %TypeWithCaster* %13 to i32*
  ret void
}

define i32* @"TypeWithCaster.~cast(ref[TypeWithCaster])=>(ref[Int[32]])"(%TypeWithCaster* %this) {
"#block1":
  %this1 = alloca %TypeWithCaster*
  store %TypeWithCaster* %this, %TypeWithCaster** %this1
  %0 = load %TypeWithCaster*, %TypeWithCaster** %this1
  %1 = getelementptr %TypeWithCaster, %TypeWithCaster* %0, i32 0, i32 0
  ret i32* %1
}
------------------------------------------------------------
[0;31mERROR SPPG1015: Incompatible types for the given operator.[0m
  references_test.alusus (256,5)
[0;31mERROR SPPG1015: Incompatible types for the given operator.[0m
  references_test.alusus (257,5)
[0;31mERROR SPPG1015: Incompatible types for the given operator.[0m
  references_test.alusus (258,5)
[0;31mERROR SPPG1015: Incompatible types for the given operator.[0m
  references_test.alusus (259,5)
[0;31mERROR SPPG1033: Invalid operand for ~deref operator.[0m
  references_test.alusus (261,5)
[0;31mERROR SPPA1008: Provided arguments do not match signature.[0m
  references_test.alusus (263,5)
[0;31mERROR SPPA1008: Provided arguments do not match signature.[0m
  references_test.alusus (265,5)
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }
%C = type { i32 }

@"!i" = global i32 0
@"!ri" = global i32* null
@"!rri" = global i32** null
@"#anonymous0" = private constant [4 x i8] c"abc\00"
@llvm.global_ctors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @"errorCases()"() {
"#block0":
  %rf = alloca float*
  %0 = load float*, float** %rf
  store float 5.000000e+00, float* %0
  %1 = load i32, i32* @"!i"
  %c = alloca %C
  ret void
}
------------------------------------------------------------
