ERROR SPPG1015 @ (70,5): Incompatible types for the given operator.
ERROR SPPG1015 @ (71,5): Incompatible types for the given operator.
ERROR SPPA1008 @ (72,5): Provided arguments do not match signature.
ERROR SPPA1008 @ (73,5): Provided arguments do not match signature.
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }
%Main_T = type { i32, i32 }
%Main_TA = type { i32, [4 x i32] }

@"#anonymous0" = private constant [12 x i8] c"a(%d) = %d\0A\00"
@"#anonymous1" = private constant [13 x i8] c"hello world!\00"
@"#anonymous2" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous3" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous4" = private constant [4 x i8] c"%s\0A\00"
@"#anonymous5" = private constant [4 x i8] c"%f\0A\00"
@"#anonymous6" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous7" = private constant [4 x i8] c"%d\0A\00"
@"#anonymous8" = private constant [21 x i8] c"getArray(2)(3) = %d\0A\00"
@"#anonymous9" = private constant [26 x i8] c"printArray(getArray(3)):\0A\00"
@"#anonymous10" = private constant [31 x i8] c"getArray => ai => printArray:\0A\00"
@llvm.global_ctors = appending constant [1 x %LlvmGlobalCtorDtor] [%LlvmGlobalCtorDtor { i32 0, void ()* @__entry__, i32* null }]
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @__entry__() {
"#block0":
  ret void
}

declare i64 @printf(i8*, ...)

define [5 x i32] @"Main.getArray(Int[32])=>(array[Int[32],5])"(i32 %m) {
"#block1":
  %m1 = alloca i32
  store i32 %m, i32* %m1
  %a = alloca [5 x i32]
  %i = alloca i32
  store i32 0, i32* %i
  br label %"#block2"

"#block2":                                        ; preds = %"#block3", %"#block1"
  %0 = load i32, i32* %i
  %1 = icmp slt i32 %0, 5
  br i1 %1, label %"#block3", label %"#block4"

"#block3":                                        ; preds = %"#block2"
  %2 = load i32, i32* %i
  %3 = sext i32 %2 to i64
  %4 = getelementptr [5 x i32], [5 x i32]* %a, i32 0, i64 %3
  %5 = load i32, i32* %i
  %6 = add nsw i32 %5, 1
  %7 = load i32, i32* %m1
  %8 = mul nsw i32 %6, %7
  store i32 %8, i32* %4
  %9 = load i32, i32* %i
  %10 = add nsw i32 %9, 1
  store i32 %10, i32* %i
  br label %"#block2"

"#block4":                                        ; preds = %"#block2"
  %11 = load [5 x i32], [5 x i32]* %a
  ret [5 x i32] %11
}

define void @"Main.printArray(array[Int[32],5])=>(Void)"([5 x i32] %a) {
"#block5":
  %a1 = alloca [5 x i32]
  store [5 x i32] %a, [5 x i32]* %a1
  %i = alloca i32
  store i32 0, i32* %i
  br label %"#block6"

"#block6":                                        ; preds = %"#block7", %"#block5"
  %0 = load i32, i32* %i
  %1 = icmp slt i32 %0, 5
  br i1 %1, label %"#block7", label %"#block8"

"#block7":                                        ; preds = %"#block6"
  %2 = load i32, i32* %i
  %3 = sext i32 %2 to i64
  %4 = getelementptr [5 x i32], [5 x i32]* %a1, i32 0, i64 %3
  %5 = load i32, i32* %i
  %6 = load i32, i32* %4
  %7 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @"#anonymous0", i32 0, i32 0), i32 %5, i32 %6)
  %8 = load i32, i32* %i
  %9 = add nsw i32 %8, 1
  store i32 %9, i32* %i
  br label %"#block6"

"#block8":                                        ; preds = %"#block6"
  ret void
}

define void @"Main.start()=>(Void)"() {
"#block9":
  %ai = alloca [5 x i32]
  %aai = alloca [3 x [5 x i32]]
  %apc = alloca [4 x i8*]
  %af = alloca [7 x double]
  %at = alloca [9 x %Main_T]
  %ta = alloca %Main_TA
  %0 = getelementptr [5 x i32], [5 x i32]* %ai, i32 0, i64 2
  store i32 5, i32* %0
  %1 = getelementptr [5 x i32], [5 x i32]* %ai, i32 0, i64 2
  store i32 5, i32* %1
  %2 = getelementptr [3 x [5 x i32]], [3 x [5 x i32]]* %aai, i32 0, i64 2
  %3 = getelementptr [5 x i32], [5 x i32]* %2, i32 0, i64 4
  store i32 23, i32* %3
  %4 = getelementptr [4 x i8*], [4 x i8*]* %apc, i32 0, i64 1
  store i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous1", i32 0, i32 0), i8** %4
  %5 = getelementptr [7 x double], [7 x double]* %af, i32 0, i64 0
  store double 0x3FF3333340000000, double* %5
  %6 = getelementptr [7 x double], [7 x double]* %af, i32 0, i64 0
  store double 1.000000e+00, double* %6
  %7 = getelementptr [9 x %Main_T], [9 x %Main_T]* %at, i32 0, i64 7
  %8 = getelementptr %Main_T, %Main_T* %7, i32 0, i32 1
  store i32 43, i32* %8
  %9 = getelementptr %Main_TA, %Main_TA* %ta, i32 0, i32 1
  %10 = getelementptr [4 x i32], [4 x i32]* %9, i32 0, i64 3
  store i32 89, i32* %10
  %11 = getelementptr [5 x i32], [5 x i32]* %ai, i32 0, i64 2
  %12 = load i32, i32* %11
  %13 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous2", i32 0, i32 0), i32 %12)
  %14 = getelementptr [3 x [5 x i32]], [3 x [5 x i32]]* %aai, i32 0, i64 2
  %15 = getelementptr [5 x i32], [5 x i32]* %14, i32 0, i64 4
  %16 = load i32, i32* %15
  %17 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous3", i32 0, i32 0), i32 %16)
  %18 = getelementptr [4 x i8*], [4 x i8*]* %apc, i32 0, i64 1
  %19 = load i8*, i8** %18
  %20 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous4", i32 0, i32 0), i8* %19)
  %21 = getelementptr [7 x double], [7 x double]* %af, i32 0, i64 0
  %22 = load double, double* %21
  %23 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous5", i32 0, i32 0), double %22)
  %24 = getelementptr [9 x %Main_T], [9 x %Main_T]* %at, i32 0, i64 7
  %25 = getelementptr %Main_T, %Main_T* %24, i32 0, i32 1
  %26 = load i32, i32* %25
  %27 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous6", i32 0, i32 0), i32 %26)
  %28 = getelementptr %Main_TA, %Main_TA* %ta, i32 0, i32 1
  %29 = getelementptr [4 x i32], [4 x i32]* %28, i32 0, i64 3
  %30 = load i32, i32* %29
  %31 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous7", i32 0, i32 0), i32 %30)
  %32 = getelementptr [5 x i32], [5 x i32]* %ai, i32 0, i64 2
  %33 = getelementptr [3 x [5 x i32]], [3 x [5 x i32]]* %aai, i32 0, i64 0
  %34 = call [5 x i32] @"Main.getArray(Int[32])=>(array[Int[32],5])"(i32 2)
  %35 = alloca [5 x i32]
  store [5 x i32] %34, [5 x i32]* %35
  %36 = getelementptr [5 x i32], [5 x i32]* %35, i32 0, i64 3
  %37 = load i32, i32* %36
  %38 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @"#anonymous8", i32 0, i32 0), i32 %37)
  %39 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @"#anonymous9", i32 0, i32 0))
  %40 = call [5 x i32] @"Main.getArray(Int[32])=>(array[Int[32],5])"(i32 3)
  call void @"Main.printArray(array[Int[32],5])=>(Void)"([5 x i32] %40)
  %41 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @"#anonymous10", i32 0, i32 0))
  %42 = call [5 x i32] @"Main.getArray(Int[32])=>(array[Int[32],5])"(i32 4)
  store [5 x i32] %42, [5 x i32]* %ai
  %43 = load [5 x i32], [5 x i32]* %ai
  call void @"Main.printArray(array[Int[32],5])=>(Void)"([5 x i32] %43)
  ret void
}
------------------------------------------------------------
