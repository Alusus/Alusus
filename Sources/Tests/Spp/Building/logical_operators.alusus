import "alusus_spp";
module Spp {
    type BuildMgr {
        @expname[Spp_BuildMgr_dumpLlvmIrForElement]
        function dumpLlvmIrForElement (element: ptr);
    };
    def buildMgr: ref[BuildMgr];
}

def Main: module
{
  def printf: @expname[printf] function (fmt: ptr[Word[8]], args: ...any)=>Int[64];

  def print: function (str: ptr[Word[8]]) => Void
  {
    printf("%s\n", str);
  };

  def main: function () => Void
  {
    testOr();
    testAnd();
    testMixed();
    testNot();
  };

  def testOr: function () => Void
  {
    def i: Int[32];
    def j: Int[32];
    def b: Word[1];

    i = 5;
    j = 10;
    b = 1;

    if i > 6 || j > 10 print("dual check");

    if i > 6  || b print("binary type check 1");
    if b || i > 6 print("binary type check 2");

    if i > 6 || j > 10 || b print("tripple check");

    b = i > 6 || j > 10;
    b = i > 6 || j > 10 || i == j;

    if i || j > 10 print("invalid type 1");
    if i > 6 || j print("invalid type 2");
  };

  def testAnd: function () => Void
  {
    def i: Int[32];
    def j: Int[32];
    def b: Word[1];

    i = 5;
    j = 10;
    b = 1;

    if i > 6 && j > 10 print("dual check");

    if i > 6  && b print("binary type check 1");
    if b && i > 6 print("binary type check 2");

    if i > 6 && j > 10 && b print("tripple check");

    b = i > 6 && j > 10;
    b = i > 6 && j > 10 && i == j;

    if i && j > 10 print("invalid type 1");
    if i > 6 && j print("invalid type 2");
  };

  def testMixed: function () => Void
  {
    def i: Int[32];
    def j: Int[32];

    i = 5;
    j = 10;

    if (i > 10 && j > 10) || (i < 5 && j < 5) print("Or of two ands.");
    if (i > 10 || j > 10) && (i < 5 || j < 5) print("And of two ors.");
  };

  def testNot: function () => Void
  {
    def b: Word[1];
    def i: Int[32];
    def f: Float[32];
    b = 1;
    i = 10;
    f = 5.0;

    if not b print("not b");
    if not i print("not i");
    if not f print("not f");

    if !!b print("!! b");
    if !!i print("!! i");
    if !!f print("!! f");

    i = !i;
    i = !!i;
    i = not i;
  };
};

Spp.buildMgr.dumpLlvmIrForElement(Main~ast);
