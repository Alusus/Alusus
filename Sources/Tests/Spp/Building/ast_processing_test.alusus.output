------------------ Parsed Data Dump ------------------
Module [Main.ModuleStatements.StmtList]
 ParamPass [] [Main.Expression.ParamPassExp]
  operand: Identifier: defInt [Main.BlockSubject.Identifier]
  param: Identifier: z [Main.BlockSubject.Identifier]
 PreprocessStatement [Main.Preprocess]
  body: Block [Main.BlockStatements.StmtList]
   ParamPass () [Main.Expression.ParamPassExp]
    operand: Identifier: print [Main.BlockSubject.Identifier]
    param: StringLiteral: MyMod preprocess
 [Main.BlockSubject.Literal]
------------------------------------------------------
------------------ Parsed Data Dump ------------------
UserType [Main.Type]
 body: Block [Main.BlockStatements.StmtList]
  ParamPass [] [Main.Expression.ParamPassExp]
   operand: Identifier: defInt [Main.BlockSubject.Identifier]
   param: Identifier: x [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] getDouble
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: iref
        param: ThisTypeRef
      retType: NULL
     body: Block [Main.BlockStatements.StmtList]
      ReturnStatement [Main.Return]
       operand: MultiplicationOperator * [Main.Expression.MulExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: x [Main.BlockSubject.Identifier]
        second: IntegerLiteral: 2 [Main.BlockSubject.Literal]
  PreprocessStatement [Main.Preprocess]
   body: Block [Main.BlockStatements.StmtList]
    ParamPass () [Main.Expression.ParamPassExp]
     operand: Identifier: print [Main.BlockSubject.Identifier]
     param: StringLiteral: Point preprocess
 [Main.BlockSubject.Literal]
------------------------------------------------------
------------------ Parsed Data Dump ------------------
Function  [Main.Function]
 type: FunctionType member: 0 [Main.Function]
  argTypes: NULL
  retType: NULL
 body: Block [Main.BlockStatements.StmtList]
  ParamPass [] [Main.Expression.ParamPassExp]
   operand: Identifier: defInt [Main.BlockSubject.Identifier]
   param: Identifier: abc [Main.BlockSubject.Identifier]
  AssignmentOperator = [Main.Expression.AssignmentExp]
   first: Identifier: abc [Main.BlockSubject.Identifier]
   second: IntegerLiteral: 51 [Main.BlockSubject.Literal]
  AssignmentOperator = [Main.Expression.AssignmentExp]
   first: Identifier: pf [Main.BlockSubject.Identifier]
   second: PointerOp [Main.PointerTilde]
    operand: Identifier: pointedFunction [Main.BlockSubject.Identifier]
  Definition [Main.Def] pf2: ParamPass [] [Main.Expression.ParamPassExp]
   operand: Identifier: ptr [Main.BlockSubject.Identifier]
   param: FunctionType member: 0 [Main.Function]
    argTypes: NULL
    retType: NULL
  AssignmentOperator = [Main.Def]
   first: Identifier: pf2 [Main.BlockSubject.Identifier]
   second: PointerOp [Main.PointerTilde]
    operand: Identifier: pointedFunction [Main.BlockSubject.Identifier]
  ParamPass () [Main.Expression.ParamPassExp]
   operand: Identifier: print [Main.BlockSubject.Identifier]
   param: List [Main.Expression.ListExp]
    StringLiteral: %d
 [Main.BlockSubject.Literal]
    Identifier: abc [Main.BlockSubject.Identifier]
  Definition [Main.Def] p: Identifier: Point [Main.BlockSubject.Identifier]
  AssignmentOperator = [Main.Expression.AssignmentExp]
   first: LinkOperator . [Main.Expression.LinkExp]
    first: Identifier: p [Main.BlockSubject.Identifier]
    second: Identifier: x [Main.BlockSubject.Identifier]
   second: IntegerLiteral: 21 [Main.BlockSubject.Literal]
  ParamPass () [Main.Expression.ParamPassExp]
   operand: Identifier: print [Main.BlockSubject.Identifier]
   param: List [Main.Expression.ListExp]
    StringLiteral: %d
 [Main.BlockSubject.Literal]
    LinkOperator . [Main.Expression.LinkExp]
     first: Identifier: p [Main.BlockSubject.Identifier]
     second: Identifier: x [Main.BlockSubject.Identifier]
  PreprocessStatement [Main.Preprocess]
   body: Block [Main.BlockStatements.StmtList]
    ParamPass () [Main.Expression.ParamPassExp]
     operand: Identifier: print [Main.BlockSubject.Identifier]
     param: StringLiteral: test preprocess
 [Main.BlockSubject.Literal]
  ParamPass () [Main.Expression.ParamPassExp]
   operand: Identifier: pf [Main.BlockSubject.Identifier]
   param: NULL
  ParamPass () [Main.Expression.ParamPassExp]
   operand: Identifier: pf2 [Main.BlockSubject.Identifier]
   param: NULL
------------------------------------------------------
MyMod preprocess
test preprocess
Point preprocess
51
21
pointedFunction
pointedFunction
------------------ Parsed Data Dump ------------------
Module [Main.ModuleStatements.StmtList]
 Definition [Main.Def] z: Identifier: Int [Main.BlockSubject.Identifier]
------------------------------------------------------
------------------ Parsed Data Dump ------------------
UserType [Main.Type]
 body: Block [Main.BlockStatements.StmtList]
  Definition [Main.Def] x: Identifier: Int [Main.BlockSubject.Identifier]
  Definition [Main.LeadingCmdGrp] getDouble
   modifiers:
    ParamPass []
     operand: Identifier: operation
     param: StringLiteral: ()
   target: Function 
     type: FunctionType member: 1
      argTypes: Map
       this: ParamPass []
        operand: Identifier: iref
        param: ThisTypeRef
      retType: NULL
     body: Block [Main.BlockStatements.StmtList]
      ReturnStatement [Main.Return]
       operand: MultiplicationOperator * [Main.Expression.MulExp]
        first: LinkOperator . [Main.Expression.LinkExp]
         first: Identifier: this [Main.Keywords]
         second: Identifier: x [Main.BlockSubject.Identifier]
        second: IntegerLiteral: 2 [Main.BlockSubject.Literal]
------------------------------------------------------
------------------ Parsed Data Dump ------------------
Function test() [Main.Function]
 type: FunctionType member: 0 [Main.Function]
  argTypes: NULL
  retType: NULL
 body: Block [Main.BlockStatements.StmtList]
  Definition [Main.Def] abc: Identifier: Int [Main.BlockSubject.Identifier]
  AssignmentOperator = [Main.Expression.AssignmentExp]
   first: Identifier: abc [Main.BlockSubject.Identifier]
   second: IntegerLiteral: 51 [Main.BlockSubject.Literal]
  AssignmentOperator = [Main.Expression.AssignmentExp]
   first: Identifier: pf [Main.BlockSubject.Identifier]
   second: PointerOp [Main.PointerTilde]
    operand: Identifier: pointedFunction [Main.BlockSubject.Identifier]
  Definition [Main.Def] pf2: ParamPass [] [Main.Expression.ParamPassExp]
   operand: Identifier: ptr [Main.BlockSubject.Identifier]
   param: FunctionType member: 0 [Main.Function]
    argTypes: NULL
    retType: NULL
  AssignmentOperator = [Main.Def]
   first: Identifier: pf2 [Main.BlockSubject.Identifier]
   second: PointerOp [Main.PointerTilde]
    operand: Identifier: pointedFunction [Main.BlockSubject.Identifier]
  ParamPass () [Main.Expression.ParamPassExp]
   operand: Identifier: print [Main.BlockSubject.Identifier]
   param: List [Main.Expression.ListExp]
    StringLiteral: %d
 [Main.BlockSubject.Literal]
    Identifier: abc [Main.BlockSubject.Identifier]
  Definition [Main.Def] p: Identifier: Point [Main.BlockSubject.Identifier]
  AssignmentOperator = [Main.Expression.AssignmentExp]
   first: LinkOperator . [Main.Expression.LinkExp]
    first: Identifier: p [Main.BlockSubject.Identifier]
    second: Identifier: x [Main.BlockSubject.Identifier]
   second: IntegerLiteral: 21 [Main.BlockSubject.Literal]
  ParamPass () [Main.Expression.ParamPassExp]
   operand: Identifier: print [Main.BlockSubject.Identifier]
   param: List [Main.Expression.ListExp]
    StringLiteral: %d
 [Main.BlockSubject.Literal]
    LinkOperator . [Main.Expression.LinkExp]
     first: Identifier: p [Main.BlockSubject.Identifier]
     second: Identifier: x [Main.BlockSubject.Identifier]
  ParamPass () [Main.Expression.ParamPassExp]
   operand: Identifier: pf [Main.BlockSubject.Identifier]
   param: NULL
  ParamPass () [Main.Expression.ParamPassExp]
   operand: Identifier: pf2 [Main.BlockSubject.Identifier]
   param: NULL
------------------------------------------------------
------------------ Parsed Data Dump ------------------
Function testAstLiteral1() [Main.Function]
 type: FunctionType member: 0 [Main.Function]
  argTypes: NULL
  retType: NULL
 body: Block [Main.BlockStatements.StmtList]
  AstLiteralCommand [Main.AstLiteral]
   body: Definition [Main.Def] n: Identifier: Int [Main.BlockSubject.Identifier]
------------------------------------------------------
------------------ Parsed Data Dump ------------------
Function testAstLiteral2() [Main.Function]
 type: FunctionType member: 0 [Main.Function]
  argTypes: NULL
  retType: NULL
 body: Block [Main.BlockStatements.StmtList]
  AstLiteralCommand [Main.AstLiteral]
   body: ParamPass [] [Main.Expression.ParamPassExp]
    operand: Identifier: defInt [Main.BlockSubject.Identifier]
    param: Identifier: n [Main.BlockSubject.Identifier]
------------------------------------------------------
