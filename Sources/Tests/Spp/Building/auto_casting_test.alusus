import "alusus_spp";
module Core { module Basic { class TiObject {} } }
module Spp {
    class BuildMgr {
        @expname[Spp_BuildMgr_dumpLlvmIrForElement]
        handler this.dumpLlvmIrForElement (element: ptr);
    };
    def buildMgr: ref[BuildMgr];
}

def Char: alias Word[8];

class A {
    def i: Int;
}

class B {
    @injection def a: A;
    def j: Int;
}

class C {
    handler this~cast[B] {
        @shared def b: B;
        return b;
    }
}

class Aa {
    def i: Int;
    handler this~init(){}
    handler this~init(ref[Aa]) {}
    handler this~cast[CharsPtr] { return "Aa"; }
}

class Bb {
    @injection def aa: Aa;
    def j: Int;
}

class Cc {
    handler this~cast[Aa] {
        @shared def t: Aa;
        return t;
    }
}

class Dd {
    handler this = (v: ref[Aa]) {}
}

class Ee {
    handler this~init() {}
    handler this~init(str: ref[Ee]) {
    };
    handler this~init(buf: ptr[array[Char]]) {
    };

    handler this~cast[ptr[array[Char]]] return "";
};

class Ff {
    handler this~init() {}
    handler this~init(buf: ptr[array[Char]]) {
    };

    handler this~cast[ptr[array[Char]]] return "";
};

class ContainerA {
    def a: A;
    handler this~cast[ref[A]] { return this.a; }
}

class ContainerB {
    def b: ref[B];
    handler this~cast[ref[B]] { return this.b; }
    handler this~cast[ContainerA] { return ContainerA() }
}

class ContainerC {
    handler this~cast[ContainerA] { return ContainerA() }
}

class ContainerAa {
    def aa: Aa;
    handler this~init() {}
    handler this~init(aa: ref[ContainerAa]) {}
    handler this~cast[ref[Aa]] { return this.aa; }
}

class ContainerBb {
    def bb: ref[Bb];
    handler this~cast[ref[Bb]] { return this.bb; }
    handler this~cast[ContainerAa] { return ContainerAa() }
}

class ContainerCc {
    handler this~cast[ContainerAa] { return ContainerAa() }
}

func giveCc(): Cc {
    return Cc();
}

func takeA(r: ref[A]) {
}

func takeAa(t: ref[Aa]) {
}

func takeEe(ee: Ee) {
}

func takeFf(ff: Ff) {
}

func takeChars(c: CharsPtr) {
}

func testCastToParentRef {
  def b: ref[B];
  takeA(b);
  takeA(b~ptr~cast[ptr[A]]~cnt);
}
Spp.buildMgr.dumpLlvmIrForElement(testCastToParentRef~ast~ptr);

func testCustomCaster {
    def cc: Cc;
    def dd: Dd;
    dd = cc;
    takeAa(cc);
    dd = Cc();
    takeAa(Cc());
}
Spp.buildMgr.dumpLlvmIrForElement(testCustomCaster~ast~ptr);

func testValueTypeCustomCaster {
    takeAa(giveCc());
}
Spp.buildMgr.dumpLlvmIrForElement(testValueTypeCustomCaster~ast~ptr);

func testMultiLevelCustomCaster {
    takeA(ContainerB());
    takeA(ContainerC());
    takeAa(ContainerBb());
    takeAa(ContainerCc());
}
Spp.buildMgr.dumpLlvmIrForElement(testMultiLevelCustomCaster~ast~ptr);

func testPrioritizingImplicitCast {
    takeEe(Ee());
    takeFf(Ff());
}
Spp.buildMgr.dumpLlvmIrForElement(testPrioritizingImplicitCast~ast~ptr);
