import "Spp";

def Main: module
{
  def print: @expname[printf] function (fmt: ptr[Word[8]], args: ...any)=>Int[64];

  def main: function ()=>Void
  {
    print("getInt: %d", getInt());
    print("getFloat: %f", getFloat());
    print("getFloatCasted: %f", getFloatCasted());
    print("getAddition: %d", getAddition());
    print("getIntIndirect: %d", getIntIndirect());
    missingReturn1();
    missingReturn2(1);
    missingReturn3(2);
    terminalIf(5);
    unreachableCode1();
    unreachableCode2(3);
  };

  def getInt: function ()=>Int[32]
  {
    return 30;
  };

  def getFloat: function ()=>Float[64]
  {
    return 5.5f64;
  };

  def getFloatCasted: function ()=>Float[64]
  {
    return 5.5;
  };

  def getAddition: function ()=>Int[32]
  {
    return 5 + 10;
  };

  def getIntIndirect: function ()=>Int[32]
  {
    return getInt();
  };

  def retVoid: function ()=>Void
  {
    return;
  };

  def voidFunc: function ()=>Void
  {
  };

  def invalidReturn1: function ()=>Void
  {
    return 5;
  };

  def invalidReturn2: function ()=>Int[32]
  {
    return;
  };

  def invalidReturn3: function ()=>ptr[Float[32]]
  {
    return 5;
  };

  def missingReturn1: function ()=>Int[32]
  {
  };

  def missingReturn2: function (i: Int) => Int[32]
  {
    if i == 5 return 3
    else { }
  };

  def missingReturn3: function (i: Int) => Int[32]
  {
    if i == 5 {}
    else return 3;
  };

  def terminalIf: function (i: Int) => Int[32]
  {
    if i == 5 return 1
    else return 3;
  };

  def unreachableCode1: function () => Int[32]
  {
    return 5;
    return 3;
  };

  def unreachableCode2: function (i: Int) => Int[32]
  {
    if i == 5 return 1
    else return 3;
    return 7;
  };
};

Spp.buildMgr.dumpLlvmIrForElement(Main~ast);
