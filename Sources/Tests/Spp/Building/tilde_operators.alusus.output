ERROR SPPG1001 @ (22,5): Unsupported operation.
ERROR SPPG1001 @ (23,10): Unsupported operation.
ERROR SPPG1015 @ (26,5): Incompatible types for the given operator.
ERROR SPPG1015 @ (29,5): Incompatible types for the given operator.
ERROR SPPG1008 @ (34,10): Invalid symbol.
ERROR SPPG1008 @ (35,5): Invalid symbol.
ERROR SPPA1003 @ (53,17): No valid match was found for the given type.
ERROR SPPA1002 @ (53,17): Invalid template argument.
ERROR SPPA1003 @ (53,13): No valid match was found for the given type.
ERROR SPPG1015 @ (54,5): Incompatible types for the given operator.
ERROR SPPG1005 @ (55,10): Invalid cast.
ERROR SPPG1005 @ (64,10): Invalid cast.
ERROR SPPA1003 @ (65,16): No valid match was found for the given type.
ERROR SPPG1008 @ (68,9): Invalid symbol.
ERROR SPPG1009 @ (76,31): Invalid operand for ~size operator.
ERROR SPPA1007 @ (77,34): Unknown symbol.
ERROR SPPG1004 @ (83,34): Invalid integer bit count.
ERROR SPPG1004 @ (85,39): Invalid integer bit count.
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"

%LlvmGlobalCtorDtor = type { i32, void ()*, i32* }

@"#anonymous0" = private constant [8 x i8] c"i = %d\0A\00"
@"#anonymous1" = private constant [13 x i8] c"pi~cnt = %d\0A\00"
@"!Other.i" = global i32 0
@"!Other.pi" = global i32* null
@"#anonymous2" = private constant [8 x i8] c"f = %f\0A\00"
@"#anonymous3" = private constant [24 x i8] c"f~cast[Float[64]] = %f\0A\00"
@"#anonymous4" = private constant [16 x i8] c"Main~size = %d\0A\00"
@"#anonymous5" = private constant [19 x i8] c"unknown~size = %d\0A\00"
@"#anonymous6" = private constant [13 x i8] c"i~size = %d\0A\00"
@"#anonymous7" = private constant [14 x i8] c"pi~size = %d\0A\00"
@"#anonymous8" = private constant [13 x i8] c"5~size = %d\0A\00"
@"#anonymous9" = private constant [22 x i8] c"(i + 5i64)~size = %d\0A\00"
@"#anonymous10" = private constant [19 x i8] c"Int[32]~size = %d\0A\00"
@"#anonymous11" = private constant [19 x i8] c"Int[62]~size = %d\0A\00"
@"#anonymous12" = private constant [24 x i8] c"ptr[Int[32]]~size = %d\0A\00"
@"#anonymous13" = private constant [24 x i8] c"ptr[Int[62]]~size = %d\0A\00"
@"#anonymous14" = private constant [16 x i8] c"ptrI~size = %d\0A\00"
@"#anonymous15" = private constant [18 x i8] c"Int[0]~size = %d\0A\00"
@llvm.global_ctors = appending constant [1 x %LlvmGlobalCtorDtor] [%LlvmGlobalCtorDtor { i32 0, void ()* @__entry__, i32* null }]
@llvm.global_dtors = appending constant [0 x %LlvmGlobalCtorDtor] zeroinitializer

define void @__entry__() {
"#block0":
  ret void
}

declare i64 @printf(i8*, ...)

define void @"Main.testPtrAndCnt()=>(Void)"() {
"#block1":
  %i = alloca i32
  %pi = alloca i32*
  %pf = alloca float*
  %ppi = alloca i32**
  store i32* %i, i32** %pi
  %0 = load i32*, i32** %pi
  store i32 5, i32* %0
  %1 = load i32, i32* %i
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous0", i32 0, i32 0), i32 %1)
  store i32 10, i32* %i
  %3 = load i32*, i32** %pi
  %4 = load i32, i32* %3
  %5 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous1", i32 0, i32 0), i32 %4)
  %6 = load float*, float** %pf
  %7 = load i32, i32* %i
  %8 = sitofp i32 %7 to float
  store float %8, float* %6
  %9 = load float*, float** %pf
  %10 = load float, float* %9
  %11 = fptosi float %10 to i32
  store i32 %11, i32* %i
  %12 = load i32, i32* %i
  store i32** %pi, i32*** %ppi
  %13 = load i32**, i32*** %ppi
  %14 = load i32*, i32** %13
  %15 = load i32**, i32*** %ppi
  %16 = load i32*, i32** %15
  %17 = load i32, i32* %16
  store i32 %17, i32* %i
  store i32* @"!Other.i", i32** %pi
  %18 = load i32*, i32** @"!Other.pi"
  store i32 10, i32* %18
  ret void
}

define void @"Main.testCast()=>(Void)"() {
"#block2":
  %i = alloca i32
  %l = alloca i64
  %ptrI = alloca i64
  %f = alloca float
  %pi = alloca i32*
  %d = alloca double
  %0 = load i32*, i32** %pi
  %1 = bitcast i32* %0 to i16*
  store i16 2, i16* %1
  store float 3.000000e+01, float* %f
  %2 = load float, float* %f
  %3 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous2", i32 0, i32 0), float %2)
  %4 = load float, float* %f
  %5 = fpext float %4 to double
  %6 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"#anonymous3", i32 0, i32 0), double %5)
  %7 = bitcast i32* %i to i8*
  store i8 1, i8* %7
  %8 = load i32*, i32** %pi
  %9 = ptrtoint i32* %8 to i64
  store i32* inttoptr (i64 10 to i32*), i32** %pi
  %10 = load i64, i64* %l
  %11 = inttoptr i64 %10 to i32*
  store i32* %11, i32** %pi
  %12 = load i64, i64* %ptrI
  %13 = inttoptr i64 %12 to i32*
  store i32* %13, i32** %pi
  store double 1.000000e+01, double* %d
  %14 = load double, double* %d
  %15 = fptrunc double %14 to float
  store float %15, float* %f
  %16 = load float, float* %f
  %17 = fptosi float %16 to i32
  store i32 %17, i32* %i
  %18 = load i32, i32* %i
  %19 = sitofp i32 %18 to float
  store float %19, float* %f
  %20 = load float, float* %f
  %21 = load i32, i32* @"!Other.i"
  %22 = sitofp i32 %21 to float
  store float %22, float* %f
  ret void
}

define void @"Main.testSize()=>(Void)"() {
"#block3":
  %i = alloca i32
  %pi = alloca i32*
  %ptrI = alloca i64
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous6", i32 0, i32 0), i8 4)
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @"#anonymous7", i32 0, i32 0), i8 8)
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @"#anonymous8", i32 0, i32 0), i8 1)
  %3 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @"#anonymous9", i32 0, i32 0), i8 8)
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @"#anonymous10", i32 0, i32 0), i8 4)
  %5 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @"#anonymous12", i32 0, i32 0), i8 8)
  %6 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @"#anonymous14", i32 0, i32 0), i8 8)
  %7 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @"#anonymous15", i32 0, i32 0), i8 8)
  ret void
}
------------------------------------------------------------
