ERROR SPPG1001 @ (22,5): Unsupported operation.
ERROR SPPG1001 @ (23,10): Unsupported operation.
ERROR SPPG1015 @ (26,5): Incompatible types for the given operator.
ERROR SPPG1015 @ (29,5): Incompatible types for the given operator.
ERROR SPPG1008 @ (34,10): Invalid symbol.
ERROR SPPG1008 @ (35,5): Invalid symbol.
ERROR SPPA1003 @ (52,17): No valid match was found for the given type.
ERROR SPPA1002 @ (52,17): Invalid template argument.
ERROR SPPA1003 @ (52,13): No valid match was found for the given type.
ERROR SPPG1015 @ (53,5): Incompatible types for the given operator.
ERROR SPPG1005 @ (54,10): Invalid cast.
ERROR SPPG1005 @ (62,10): Invalid cast.
ERROR SPPA1003 @ (63,16): No valid match was found for the given type.
ERROR SPPG1008 @ (66,9): Invalid symbol.
ERROR SPPG1009 @ (73,31): Invalid operand for ~size operator.
ERROR SPPA1007 @ (74,34): Unknown symbol.
ERROR SPPG1004 @ (80,34): Invalid integer bit count.
ERROR SPPG1004 @ (82,39): Invalid integer bit count.
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"

@__anonymous0 = private constant [8 x i8] c"i = %d\0A\00", align 1
@__anonymous1 = private constant [13 x i8] c"pi~cnt = %d\0A\00", align 1
@Other_i = global i32 0
@Other_pi = global i32* null
@__anonymous2 = private constant [8 x i8] c"f = %f\0A\00", align 1
@__anonymous3 = private constant [24 x i8] c"f~cast[Float[64]] = %f\0A\00", align 1
@__anonymous4 = private constant [16 x i8] c"Main~size = %d\0A\00", align 1
@__anonymous5 = private constant [19 x i8] c"unknown~size = %d\0A\00", align 1
@__anonymous6 = private constant [13 x i8] c"i~size = %d\0A\00", align 1
@__anonymous7 = private constant [14 x i8] c"pi~size = %d\0A\00", align 1
@__anonymous8 = private constant [13 x i8] c"5~size = %d\0A\00", align 1
@__anonymous9 = private constant [22 x i8] c"(i + 5i64)~size = %d\0A\00", align 1
@__anonymous10 = private constant [19 x i8] c"Int[32]~size = %d\0A\00", align 1
@__anonymous11 = private constant [19 x i8] c"Int[62]~size = %d\0A\00", align 1
@__anonymous12 = private constant [24 x i8] c"ptr[Int[32]]~size = %d\0A\00", align 1
@__anonymous13 = private constant [24 x i8] c"ptr[Int[62]]~size = %d\0A\00", align 1

declare i64 @printf(i8*, ...)

define void @"Main.testPtrAndCnt()=>(Void)"() {
__block0:
  %i = alloca i32
  %pi = alloca i32*
  %pf = alloca float*
  %ppi = alloca i32**
  store i32* %i, i32** %pi
  %0 = load i32*, i32** %pi
  store i32 5, i32* %0
  %1 = load i32, i32* %i
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__anonymous0, i32 0, i32 0), i32 %1)
  store i32 10, i32* %i
  %3 = load i32*, i32** %pi
  %4 = load i32, i32* %3
  %5 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__anonymous1, i32 0, i32 0), i32 %4)
  %6 = load i32, i32* %i
  %7 = load i32, i32* %i
  %8 = load float*, float** %pf
  %9 = load i32, i32* %i
  %10 = sitofp i32 %9 to float
  store float %10, float* %8
  %11 = load float*, float** %pf
  %12 = load float, float* %11
  %13 = fptosi float %12 to i32
  store i32 %13, i32* %i
  %14 = load i32, i32* %i
  store i32** %pi, i32*** %ppi
  %15 = load i32**, i32*** %ppi
  %16 = load i32*, i32** %15
  %17 = load i32**, i32*** %ppi
  %18 = load i32*, i32** %17
  %19 = load i32, i32* %18
  store i32 %19, i32* %i
  store i32* @Other_i, i32** %pi
  %20 = load i32*, i32** @Other_pi
  store i32 10, i32* %20
  ret void
}

define void @"Main.testCast()=>(Void)"() {
__block1:
  %i = alloca i32
  %l = alloca i64
  %f = alloca float
  %pi = alloca i32*
  %d = alloca double
  %0 = load i32*, i32** %pi
  %1 = bitcast i32* %0 to i16*
  store i16 2, i16* %1
  store float 3.000000e+01, float* %f
  %2 = load float, float* %f
  %3 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @__anonymous2, i32 0, i32 0), float %2)
  %4 = load float, float* %f
  %5 = fpext float %4 to double
  %6 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__anonymous3, i32 0, i32 0), double %5)
  %7 = bitcast i32* %i to i8*
  store i8 1, i8* %7
  %8 = load i32*, i32** %pi
  %9 = load i32*, i32** %pi
  %10 = ptrtoint i32* %9 to i64
  store i32* inttoptr (i64 10 to i32*), i32** %pi
  %11 = load i64, i64* %l
  %12 = inttoptr i64 %11 to i32*
  store i32* %12, i32** %pi
  store double 1.000000e+01, double* %d
  %13 = load double, double* %d
  %14 = fptrunc double %13 to float
  store float %14, float* %f
  %15 = load float, float* %f
  %16 = fptosi float %15 to i32
  store i32 %16, i32* %i
  %17 = load i32, i32* %i
  %18 = sitofp i32 %17 to float
  store float %18, float* %f
  %19 = load float, float* %f
  %20 = load float, float* %f
  %21 = load i32, i32* @Other_i
  %22 = sitofp i32 %21 to float
  store float %22, float* %f
  ret void
}

define void @"Main.testSize()=>(Void)"() {
__block2:
  %i = alloca i32
  %pi = alloca i32*
  %0 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__anonymous6, i32 0, i32 0), i8 4)
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @__anonymous7, i32 0, i32 0), i8 8)
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @__anonymous8, i32 0, i32 0), i8 1)
  %3 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @__anonymous9, i32 0, i32 0), i8 8)
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @__anonymous10, i32 0, i32 0), i8 4)
  %5 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @__anonymous12, i32 0, i32 0), i8 8)
  ret void
}
------------------------------------------------------------
