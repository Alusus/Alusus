ERROR SPPA1007 @ (98,11): Unknown symbol.
ERROR SPPA1007 @ (99,25): Unknown symbol.
ERROR SPPA1007 @ (102,18): Unknown symbol.
ERROR SPPA1007 @ (103,32): Unknown symbol.
ERROR SPPG1008 @ (58,5): Invalid symbol.
ERROR SPPG1008 @ (59,5): Invalid symbol.
ERROR SPPA1007 @ (60,11): Unknown symbol.
ERROR SPPG1008 @ (61,10): Invalid symbol.
ERROR SPPG1008 @ (62,10): Invalid symbol.
ERROR SPPA1007 @ (63,16): Unknown symbol.
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
source_filename = "AlususProgram"

@Main.gi = global i32 0
@Main.gpi = global i32* null
@Main.gbi = global i64 0
@Main.gf = global float 0.000000e+00
@Main.gpf = global float* null
@Main.gbf = global double 0.000000e+00
@Main.garr = global [10 x i32] zeroinitializer
@"#anonymous0" = private constant [8 x i8] c"%d, %f\0A\00", align 1
@"#anonymous1" = private constant [4 x i8] c"%d\0A\00", align 1
@"#anonymous2" = private constant [4 x i8] c"%d\0A\00", align 1
@"#anonymous3" = private constant [4 x i8] c"%d\0A\00", align 1
@"#anonymous4" = private constant [4 x i8] c"%d \00", align 1
@"#anonymous5" = private constant [2 x i8] c"\0A\00", align 1
@Other.gi = global i32 0
@Other.gf = global double 0.000000e+00
@"#anonymous6" = private constant [8 x i8] c"%d, %f\0A\00", align 1
@"#anonymous7" = private constant [4 x i8] c"%d\0A\00", align 1
@Other.Nested.gni = global i32 0
@"#anonymous8" = private constant [4 x i8] c"%d\0A\00", align 1
@"#anonymous9" = private constant [4 x i8] c"%f\0A\00", align 1

declare i64 @printf(i8*, ...)

define void @"Main.main()=>(Void)"() {
"#block0":
  %li = alloca i32
  %lpi = alloca i32*
  %lbi = alloca i64
  %lf = alloca float
  %lpf = alloca float*
  %lbf = alloca double
  %defIntInline = alloca i32
  store i32 5, i32* %defIntInline
  store i32 1, i32* @Main.gi
  store i32 2, i32* @Main.gi
  store i64 3, i64* @Main.gbi
  store float 4.000000e+00, float* @Main.gf
  store float 5.000000e+00, float* @Main.gf
  store double 6.000000e+00, double* @Main.gbf
  store i32 7, i32* %li
  store i32 8, i32* %li
  store i64 9, i64* %lbi
  store float 1.000000e+01, float* %lf
  store float 1.100000e+01, float* %lf
  store double 1.200000e+01, double* %lbf
  %0 = load i32, i32* @Main.gi
  %1 = sext i32 %0 to i64
  %2 = load float, float* @Main.gf
  %3 = fpext float %2 to double
  call void @"Main.testVars(Int[64],Float[64])=>(Void)"(i64 %1, double %3)
  %4 = load i64, i64* @Main.gbi
  %5 = load double, double* @Main.gbf
  call void @"Main.testVars(Int[64],Float[64])=>(Void)"(i64 %4, double %5)
  %6 = load i32, i32* %li
  %7 = sext i32 %6 to i64
  %8 = load float, float* %lf
  %9 = fpext float %8 to double
  call void @"Main.testVars(Int[64],Float[64])=>(Void)"(i64 %7, double %9)
  %10 = load i64, i64* %lbi
  %11 = load double, double* %lbf
  call void @"Main.testVars(Int[64],Float[64])=>(Void)"(i64 %10, double %11)
  %12 = load i32, i32* @Main.gi
  %13 = add nsw i32 %12, 100
  %14 = load float, float* @Main.gf
  %15 = fadd float %14, 1.000000e+02
  %16 = sext i32 %13 to i64
  %17 = fpext float %15 to double
  call void @"Main.testVars(Int[64],Float[64])=>(Void)"(i64 %16, double %17)
  %18 = load i32, i32* %li
  %19 = add nsw i32 %18, 200
  %20 = load float, float* %lf
  %21 = fadd float %20, 2.000000e+02
  %22 = sext i32 %19 to i64
  %23 = fpext float %21 to double
  call void @"Main.testVars(Int[64],Float[64])=>(Void)"(i64 %22, double %23)
  %24 = load float, float* @Main.gf
  %25 = fptosi float %24 to i64
  %26 = load i32, i32* @Main.gi
  %27 = sitofp i32 %26 to double
  call void @"Main.testVars(Int[64],Float[64])=>(Void)"(i64 %25, double %27)
  %28 = load i32, i32* @Main.gi
  %29 = sext i32 %28 to i64
  %30 = load i32, i32* @Main.gi
  %31 = sitofp i32 %30 to double
  call void @"Main.testVars(Int[64],Float[64])=>(Void)"(i64 %29, double %31)
  %32 = load float, float* @Main.gf
  %33 = fptosi float %32 to i64
  %34 = load float, float* @Main.gf
  %35 = fpext float %34 to double
  call void @"Main.testVars(Int[64],Float[64])=>(Void)"(i64 %33, double %35)
  call void @"Main.testVarOverride()=>(Void)"()
  %36 = load i32, i32* @Main.gi
  %37 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous2", i32 0, i32 0), i32 %36)
  call void @"Main.testGlobals()"()
  ret void
}

define void @"Main.testVars(Int[64],Float[64])=>(Void)"(i64 %ai, double %af) {
"#block1":
  %ai1 = alloca i64
  store i64 %ai, i64* %ai1
  %af2 = alloca double
  store double %af, double* %af2
  %li = alloca i32
  %lf = alloca float
  %0 = load i64, i64* %ai1
  %1 = load double, double* %af2
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous0", i32 0, i32 0), i64 %0, double %1)
  store i64 123, i64* %ai1
  store double 4.560000e+02, double* %af2
  ret void
}

define void @"Main.testVarOverride()=>(Void)"() {
"#block2":
  %gi = alloca i32
  store i32 60, i32* %gi
  %0 = load i32, i32* %gi
  %1 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous1", i32 0, i32 0), i32 %0)
  ret void
}

define void @"Main.testGlobals()"() {
"#block3":
  store i32* @Main.gi, i32** @Main.gpi
  store i32 10, i32* @Main.gi
  %0 = load i32*, i32** @Main.gpi
  %1 = load i32, i32* %0
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous3", i32 0, i32 0), i32 %1)
  %i = alloca i32
  store i32 0, i32* %i
  br label %"#block4"

"#block4":                                        ; preds = %"#block5", %"#block3"
  %3 = load i32, i32* %i
  %4 = icmp slt i32 %3, 10
  br i1 %4, label %"#block6", label %"#block7"

"#block5":                                        ; preds = %"#block6"
  %5 = load i32, i32* %i
  %6 = add nsw i32 %5, 1
  store i32 %6, i32* %i
  br label %"#block4"

"#block6":                                        ; preds = %"#block4"
  %7 = load i32, i32* %i
  %8 = sext i32 %7 to i64
  %9 = getelementptr [10 x i32], [10 x i32]* @Main.garr, i32 0, i64 %8
  %10 = load i32, i32* %9
  %11 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous4", i32 0, i32 0), i32 %10)
  br label %"#block5"

"#block7":                                        ; preds = %"#block4"
  %12 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @"#anonymous5", i32 0, i32 0))
  ret void
}

define void @"Main.testOtherModules()=>(Void)"() {
"#block8":
  store i32 2, i32* @Other.gi
  store double 0x401D333340000000, double* @Other.gf
  %0 = load i32, i32* @Other.gi
  %1 = load double, double* @Other.gf
  %2 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @"#anonymous6", i32 0, i32 0), i32 %0, double %1)
  store i32 4, i32* @Other.Nested.gni
  %3 = load i32, i32* @Other.Nested.gni
  %4 = call i64 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @"#anonymous8", i32 0, i32 0), i32 %3)
  ret void
}
------------------------------------------------------------
