ERROR CP1001 @ (4,11): Parser syntax error.
ERROR CP1001 @ (9,12): Parser syntax error.
ERROR CP1001 @ (17,7): Parser syntax error.
ERROR CP1001 @ (39,9): Parser syntax error.
------------------ Parsed Data Dump ------------------
Scope [Statements.StmtList]
 ParamPass () [Expression.ParamPassExp]
  operand: Identifier: func [Subject.Identifier]
  param: StringLiteral: test [Subject.Literal]
 LinkOperator :: [Expression.LowestLinkExp]
  first: AssignmentOperator = [Expression.AssignmentExp]
   first: Identifier: i [Subject.Identifier]
   second: LinkOperator . [Expression.LinkExp]
    first: Identifier: b [Subject.Identifier]
    second: Identifier: i [Subject.Identifier]
  second: IntegerLiteral: 5 [Subject.Literal]
 AssignmentOperator += [Expression.AssignmentExp]
  first: Identifier: intVar [Subject.Identifier]
  second: IntegerLiteral: 5 [Subject.Literal]
 PrefixOperator -- [Expression.UnaryExp]
  operand: Identifier: intVar [Subject.Identifier]
 PostfixOperator ++ [Expression.UnaryExp]
  operand: Identifier: intVar [Subject.Identifier]
 PostfixOperator ++ [Expression.UnaryExp]
  operand: PrefixOperator --
   operand: Identifier: intVar [Subject.Identifier]
 AssignmentOperator = [Expression.AssignmentExp]
  first: Identifier: opVar [Subject.Identifier]
  second: AdditionOperator + [Expression.AddExp]
   first: Identifier: i [Subject.Identifier]
   second: MultiplicationOperator * [Expression.MulExp]
    first: Identifier: j [Subject.Identifier]
    second: Identifier: k [Subject.Identifier]
 AssignmentOperator = [Expression.AssignmentExp]
  first: Identifier: listVar [Subject.Identifier]
  second: Bracket () [Subject.Sbj]
   operand: List [Expression.ListExp]
    IntegerLiteral: 1 [Subject.Literal]
    IntegerLiteral: 2 [Subject.Literal]
    IntegerLiteral: 3 [Subject.Literal]
    IntegerLiteral: 4 [Subject.Literal]
    IntegerLiteral: 5 [Subject.Literal]
 AssignmentOperator = [Expression.AssignmentExp]
  first: Identifier: hashVar [Subject.Identifier]
  second: Bracket () [Subject.Sbj]
   operand: List [Expression.ListExp]
    LinkOperator : [Expression.LowerLinkExp]
     first: Identifier: a [Subject.Identifier]
     second: IntegerLiteral: 1 [Subject.Literal]
    LinkOperator : [Expression.LowerLinkExp]
     first: Identifier: b [Subject.Identifier]
     second: IntegerLiteral: 2 [Subject.Literal]
    LinkOperator : [Expression.LowerLinkExp]
     first: Identifier: c [Subject.Identifier]
     second: IntegerLiteral: 3 [Subject.Literal]
 AssignmentOperator = [Expression.AssignmentExp]
  first: Identifier: bracketVar [Subject.Identifier]
  second: AdditionOperator + [Expression.AddExp]
   first: Identifier: a [Subject.Identifier]
   second: Bracket () [Subject.Sbj]
    operand: AdditionOperator + [Expression.AddExp]
     first: Identifier: b [Subject.Identifier]
     second: Identifier: c [Subject.Identifier]
 GenericCommand do [Main.Do]
  args: List
   StringLiteral: mylib.so [Subject.Literal]
  modifiers: List
   Identifier: test [Subject.Identifier]
 GenericCommand do [Main.Do]
  args: List
   Bracket () [Subject.Sbj]
    operand: LinkOperator : [Expression.LowerLinkExp]
     first: Identifier: s [Subject.Identifier]
     second: IntegerLiteral: 10 [Subject.Literal]
  modifiers: List
   Identifier: test [Subject.Identifier]
 GenericCommand do [Main.Do]
  args: List
   Bracket [] [Subject.Sbj]
    operand: LinkOperator : [Expression.LowerLinkExp]
     first: Identifier: s [Subject.Identifier]
     second: IntegerLiteral: 10 [Subject.Literal]
  modifiers: NULL
 GenericCommand do [Main.Do]
  args: List
   Scope [Statements.StmtList]
    AssignmentOperator = [Expression.AssignmentExp]
     first: Identifier: strVar [Subject.Identifier]
     second: StringLiteral: Hello World. A BC ⛔ ⓖⵤ [Subject.Literal]
    AssignmentOperator = [Expression.AssignmentExp]
     first: Identifier: intVar [Subject.Identifier]
     second: IntegerLiteral: 5 [Subject.Literal]
    PostfixOperator -- [Expression.UnaryExp]
     operand: Identifier: intVar [Subject.Identifier]
    AssignmentOperator = [Expression.AssignmentExp]
     first: Identifier: opVar [Subject.Identifier]
     second: AdditionOperator + [Expression.AddExp]
      first: Identifier: i [Subject.Identifier]
      second: MultiplicationOperator * [Expression.MulExp]
       first: Identifier: j [Subject.Identifier]
       second: Identifier: k [Subject.Identifier]
    AssignmentOperator = [Expression.AssignmentExp]
     first: Identifier: listVar [Subject.Identifier]
     second: Bracket () [Subject.Sbj]
      operand: List [Expression.ListExp]
       IntegerLiteral: 1 [Subject.Literal]
       IntegerLiteral: 2 [Subject.Literal]
       IntegerLiteral: 3 [Subject.Literal]
       IntegerLiteral: 4 [Subject.Literal]
       IntegerLiteral: 5 [Subject.Literal]
    AssignmentOperator = [Expression.AssignmentExp]
     first: Identifier: hashVar [Subject.Identifier]
     second: Bracket () [Subject.Sbj]
      operand: List [Expression.ListExp]
       LinkOperator : [Expression.LowerLinkExp]
        first: Identifier: a [Subject.Identifier]
        second: IntegerLiteral: 1 [Subject.Literal]
       LinkOperator : [Expression.LowerLinkExp]
        first: Identifier: b [Subject.Identifier]
        second: IntegerLiteral: 2 [Subject.Literal]
       LinkOperator : [Expression.LowerLinkExp]
        first: Identifier: c [Subject.Identifier]
        second: IntegerLiteral: 3 [Subject.Literal]
    AssignmentOperator = [Expression.AssignmentExp]
     first: Identifier: bracketVar [Subject.Identifier]
     second: AdditionOperator + [Expression.AddExp]
      first: Identifier: a [Subject.Identifier]
      second: Bracket () [Subject.Sbj]
       operand: AdditionOperator + [Expression.AddExp]
        first: Identifier: b [Subject.Identifier]
        second: Identifier: c [Subject.Identifier]
  modifiers: NULL
 AssignmentOperator = [Expression.AssignmentExp]
  first: Identifier: a [Subject.Identifier]
  second: LinkOperator ~ [Subject.Identifier]
   first: Identifier: b [Subject.Identifier]
   second: Identifier: c [Subject.Identifier]
------------------------------------------------------
