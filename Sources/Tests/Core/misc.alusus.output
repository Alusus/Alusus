ERROR CP1001 @ (4,11): Parser syntax error.
ERROR CP1001 @ (9,12): Parser syntax error.
ERROR CP1001 @ (17,7): Parser syntax error.
ERROR CP1001 @ (39,9): Parser syntax error.
------------------ Parsed Data Dump ------------------
Scope [Main.Statements.StmtList]
 ParamPass () [Main.Expression.ParamPassExp]
  operand: Identifier: func [Main.Subject.Identifier]
  param: StringLiteral: test [Main.Subject.Literal]
 LinkOperator :: [Main.Expression.LowestLinkExp]
  first: AssignmentOperator = [Main.Expression.AssignmentExp]
   first: Identifier: i [Main.Subject.Identifier]
   second: LinkOperator . [Main.Expression.LinkExp]
    first: Identifier: b [Main.Subject.Identifier]
    second: Identifier: i [Main.Subject.Identifier]
  second: IntegerLiteral: 5 [Main.Subject.Literal]
 AssignmentOperator += [Main.Expression.AssignmentExp]
  first: Identifier: intVar [Main.Subject.Identifier]
  second: IntegerLiteral: 5 [Main.Subject.Literal]
 PrefixOperator -- [Main.Expression.UnaryExp]
  operand: Identifier: intVar [Main.Subject.Identifier]
 PostfixOperator ++ [Main.Expression.UnaryExp]
  operand: Identifier: intVar [Main.Subject.Identifier]
 PostfixOperator ++ [Main.Expression.UnaryExp]
  operand: PrefixOperator --
   operand: Identifier: intVar [Main.Subject.Identifier]
 AssignmentOperator = [Main.Expression.AssignmentExp]
  first: Identifier: opVar [Main.Subject.Identifier]
  second: AdditionOperator + [Main.Expression.AddExp]
   first: Identifier: i [Main.Subject.Identifier]
   second: MultiplicationOperator * [Main.Expression.MulExp]
    first: Identifier: j [Main.Subject.Identifier]
    second: Identifier: k [Main.Subject.Identifier]
 AssignmentOperator = [Main.Expression.AssignmentExp]
  first: Identifier: listVar [Main.Subject.Identifier]
  second: Bracket () [Main.Subject.Sbj]
   operand: List [Main.Expression.ListExp]
    IntegerLiteral: 1 [Main.Subject.Literal]
    IntegerLiteral: 2 [Main.Subject.Literal]
    IntegerLiteral: 3 [Main.Subject.Literal]
    IntegerLiteral: 4 [Main.Subject.Literal]
    IntegerLiteral: 5 [Main.Subject.Literal]
 AssignmentOperator = [Main.Expression.AssignmentExp]
  first: Identifier: hashVar [Main.Subject.Identifier]
  second: Bracket () [Main.Subject.Sbj]
   operand: List [Main.Expression.ListExp]
    LinkOperator : [Main.Expression.LowerLinkExp]
     first: Identifier: a [Main.Subject.Identifier]
     second: IntegerLiteral: 1 [Main.Subject.Literal]
    LinkOperator : [Main.Expression.LowerLinkExp]
     first: Identifier: b [Main.Subject.Identifier]
     second: IntegerLiteral: 2 [Main.Subject.Literal]
    LinkOperator : [Main.Expression.LowerLinkExp]
     first: Identifier: c [Main.Subject.Identifier]
     second: IntegerLiteral: 3 [Main.Subject.Literal]
 AssignmentOperator = [Main.Expression.AssignmentExp]
  first: Identifier: bracketVar [Main.Subject.Identifier]
  second: AdditionOperator + [Main.Expression.AddExp]
   first: Identifier: a [Main.Subject.Identifier]
   second: Bracket () [Main.Subject.Sbj]
    operand: AdditionOperator + [Main.Expression.AddExp]
     first: Identifier: b [Main.Subject.Identifier]
     second: Identifier: c [Main.Subject.Identifier]
 GenericCommand do [Main.Do]
  args: List
   StringLiteral: mylib.so [Main.Subject.Literal]
  modifiers: List
   Identifier: test [Modifier.Subject.Identifier]
 GenericCommand do [Main.Do]
  args: List
   Bracket () [Main.Subject.Sbj]
    operand: LinkOperator : [Main.Expression.LowerLinkExp]
     first: Identifier: s [Main.Subject.Identifier]
     second: IntegerLiteral: 10 [Main.Subject.Literal]
  modifiers: List
   Identifier: test [Modifier.Subject.Identifier]
 GenericCommand do [Main.Do]
  args: List
   Bracket [] [Main.Subject.Sbj]
    operand: LinkOperator : [Main.Expression.LowerLinkExp]
     first: Identifier: s [Main.Subject.Identifier]
     second: IntegerLiteral: 10 [Main.Subject.Literal]
  modifiers: NULL
 GenericCommand do [Main.Do]
  args: List
   Scope [Main.Statements.StmtList]
    AssignmentOperator = [Main.Expression.AssignmentExp]
     first: Identifier: strVar [Main.Subject.Identifier]
     second: StringLiteral: Hello World. A BC ⛔ ⓖⵤ [Main.Subject.Literal]
    AssignmentOperator = [Main.Expression.AssignmentExp]
     first: Identifier: intVar [Main.Subject.Identifier]
     second: IntegerLiteral: 5 [Main.Subject.Literal]
    PostfixOperator -- [Main.Expression.UnaryExp]
     operand: Identifier: intVar [Main.Subject.Identifier]
    AssignmentOperator = [Main.Expression.AssignmentExp]
     first: Identifier: opVar [Main.Subject.Identifier]
     second: AdditionOperator + [Main.Expression.AddExp]
      first: Identifier: i [Main.Subject.Identifier]
      second: MultiplicationOperator * [Main.Expression.MulExp]
       first: Identifier: j [Main.Subject.Identifier]
       second: Identifier: k [Main.Subject.Identifier]
    AssignmentOperator = [Main.Expression.AssignmentExp]
     first: Identifier: listVar [Main.Subject.Identifier]
     second: Bracket () [Main.Subject.Sbj]
      operand: List [Main.Expression.ListExp]
       IntegerLiteral: 1 [Main.Subject.Literal]
       IntegerLiteral: 2 [Main.Subject.Literal]
       IntegerLiteral: 3 [Main.Subject.Literal]
       IntegerLiteral: 4 [Main.Subject.Literal]
       IntegerLiteral: 5 [Main.Subject.Literal]
    AssignmentOperator = [Main.Expression.AssignmentExp]
     first: Identifier: hashVar [Main.Subject.Identifier]
     second: Bracket () [Main.Subject.Sbj]
      operand: List [Main.Expression.ListExp]
       LinkOperator : [Main.Expression.LowerLinkExp]
        first: Identifier: a [Main.Subject.Identifier]
        second: IntegerLiteral: 1 [Main.Subject.Literal]
       LinkOperator : [Main.Expression.LowerLinkExp]
        first: Identifier: b [Main.Subject.Identifier]
        second: IntegerLiteral: 2 [Main.Subject.Literal]
       LinkOperator : [Main.Expression.LowerLinkExp]
        first: Identifier: c [Main.Subject.Identifier]
        second: IntegerLiteral: 3 [Main.Subject.Literal]
    AssignmentOperator = [Main.Expression.AssignmentExp]
     first: Identifier: bracketVar [Main.Subject.Identifier]
     second: AdditionOperator + [Main.Expression.AddExp]
      first: Identifier: a [Main.Subject.Identifier]
      second: Bracket () [Main.Subject.Sbj]
       operand: AdditionOperator + [Main.Expression.AddExp]
        first: Identifier: b [Main.Subject.Identifier]
        second: Identifier: c [Main.Subject.Identifier]
  modifiers: NULL
 AssignmentOperator = [Main.Expression.AssignmentExp]
  first: Identifier: a [Main.Subject.Identifier]
  second: LinkOperator ~ [Main.Subject.Identifier]
   first: Identifier: b [Main.Subject.Identifier]
   second: Identifier: c [Main.Subject.Identifier]
------------------------------------------------------
