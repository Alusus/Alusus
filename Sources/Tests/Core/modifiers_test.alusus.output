[0;31mERROR CP1005: Unexpected modifier encountered.[0m
  modifiers_test.alusus (17,4)
[0;31mERROR CP1001: Parser syntax error.[0m
  modifiers_test.alusus (18,8)
[0;31mERROR CP1005: Unexpected modifier encountered.[0m
  modifiers_test.alusus (18,4)
[0;31mERROR CP1001: Parser syntax error.[0m
  modifiers_test.alusus (20,33)
[0;31mERROR CP1005: Unexpected modifier encountered.[0m
  modifiers_test.alusus (22,4)
[0;31mERROR CP1005: Unexpected modifier encountered.[0m
  modifiers_test.alusus (23,8)
[0;31mERROR CP1005: Unexpected modifier encountered.[0m
  modifiers_test.alusus (24,10)
[0;31mERROR CP1005: Unexpected modifier encountered.[0m
  modifiers_test.alusus (25,14)
[0;31mERROR CP1005: Unexpected modifier encountered.[0m
  modifiers_test.alusus (26,7)
[0;31mERROR CP1005: Unexpected modifier encountered.[0m
  modifiers_test.alusus (27,8)
[0;31mERROR CP1005: Unexpected modifier encountered.[0m
  modifiers_test.alusus (28,5)
------------------ Parsed Data Dump ------------------
Scope [Main.Statements.StmtList]
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: leading [Main.Subject.Literal]
  modifiers: List
   Identifier: test [Modifier.Subject.Identifier]
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: trailing [Main.Subject.Literal]
  modifiers: List
   Identifier: test [Modifier.Subject.Identifier]
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: leading 2 [Main.Subject.Literal]
  modifiers: List
   Identifier: test1 [Modifier.Subject.Identifier]
   Identifier: test2 [Modifier.Subject.Identifier]
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: trailing 2 [Main.Subject.Literal]
  modifiers: List
   Identifier: test1 [Modifier.Subject.Identifier]
   Identifier: test2 [Modifier.Subject.Identifier]
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: leading parens [Main.Subject.Literal]
  modifiers: List
   ParamPass () [Modifier.Expression.ParamPassExp]
    operand: Identifier: test [Modifier.Subject.Identifier]
    param: IntegerLiteral: 1 [Main.Subject.Literal]
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: trailing parens [Main.Subject.Literal]
  modifiers: List
   ParamPass () [Modifier.Expression.ParamPassExp]
    operand: Identifier: test [Modifier.Subject.Identifier]
    param: IntegerLiteral: 1 [Main.Subject.Literal]
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: leading square brackets 2 [Main.Subject.Literal]
  modifiers: List
   ParamPass [] [Modifier.Expression.ParamPassExp]
    operand: Identifier: test [Modifier.Subject.Identifier]
    param: IntegerLiteral: 1 [Main.Subject.Literal]
   ParamPass [] [Modifier.Expression.ParamPassExp]
    operand: Identifier: test [Modifier.Subject.Identifier]
    param: IntegerLiteral: 2 [Main.Subject.Literal]
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: trailing square brackets 2 [Main.Subject.Literal]
  modifiers: List
   ParamPass [] [Modifier.Expression.ParamPassExp]
    operand: Identifier: test [Modifier.Subject.Identifier]
    param: IntegerLiteral: 1 [Main.Subject.Literal]
   ParamPass [] [Modifier.Expression.ParamPassExp]
    operand: Identifier: test [Modifier.Subject.Identifier]
    param: IntegerLiteral: 2 [Main.Subject.Literal]
 Bracket () [Main.Subject.Sbj]
  operand: NULL
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: leading err - bracket [Main.Subject.Literal]
  modifiers: NULL
 Identifier: first [Main.Subject.Identifier]
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: leading err - dot [Main.Subject.Literal]
  modifiers: NULL
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: trailing err - bracket [Main.Subject.Literal]
  modifiers: List
   ParamPass () [Modifier.Expression.ParamPassExp]
    operand: Identifier: test [Modifier.Subject.Identifier]
    param: IntegerLiteral: 1 [Main.Subject.Literal]
 Bracket () [Main.Subject.Sbj]
  operand: NULL
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: trailing err - dot [Main.Subject.Literal]
  modifiers: List
   Identifier: test [Modifier.Subject.Identifier]
 Identifier: first [Main.Subject.Identifier]
 AssignmentOperator = [Main.Expression.AssignmentExp]
  first: Identifier: a [Main.Subject.Identifier]
  second: AdditionOperator + [Main.Expression.AddExp]
   first: IntegerLiteral: 1 [Main.Subject.Literal]
   second: IntegerLiteral: 2 [Main.Subject.Literal]
 AssignmentOperator = [Main.Expression.AssignmentExp]
  first: Identifier: a [Main.Subject.Identifier]
  second: AdditionOperator + [Main.Expression.AddExp]
   first: IntegerLiteral: 1 [Main.Subject.Literal]
   second: IntegerLiteral: 2 [Main.Subject.Literal]
 AssignmentOperator = [Main.Expression.AssignmentExp]
  first: Identifier: a [Main.Subject.Identifier]
  second: AdditionOperator + [Main.Expression.AddExp]
   first: IntegerLiteral: 1 [Main.Subject.Literal]
   second: IntegerLiteral: 2 [Main.Subject.Literal]
 AssignmentOperator = [Main.Expression.AssignmentExp]
  first: Identifier: a [Main.Subject.Identifier]
  second: AdditionOperator + [Main.Expression.AddExp]
   first: IntegerLiteral: 1 [Main.Subject.Literal]
   second: IntegerLiteral: 2 [Main.Subject.Literal]
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: middle leading [Main.Subject.Literal]
  modifiers: NULL
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: middle trailing [Main.Subject.Literal]
  modifiers: NULL
 GenericCommand do [Main.Do]
  args: List
   Token: LexerDefs.Identifier ("do")
   StringLiteral: start trailing [Main.Subject.Literal]
  modifiers: NULL
 Definition [Main.Def] p
  modifiers:
   Identifier: public [Modifier.Subject.Identifier]
  target: IntegerLiteral: 5 [Main.Subject.Literal]
------------------------------------------------------
