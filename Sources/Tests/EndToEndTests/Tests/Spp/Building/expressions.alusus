import "libalusus_spp.so";

def Main: module
{
  def print: @expname[printf] function (fmt: ptr[Int[8]], args: ...any)=>Int[64];

  def testInteger: function ()=>Void
  {
    print("1+1=%d\n", 1+1);
    print("5-2=%d\n", 5-2);
    print("7*3=%d\n", 7*3);
    print("10/2=%d\n", 10/2);

    print("1+2*3=%d\n", 1+2*3);
    print("10-6/2=%d\n", 10-6/2);
    print("(1+2)*3=%d\n", (1+2)*3);
    print("(10-6)/2=%d\n", (10-6)/2);
  };

  def testFloat: function ()=>Void
  {
    print("1.2+1.2=%f\n", 1.2+1.2);
    print("5.5-2.5=%f\n", 5.5-2.5);
    print("7.2*3.5=%f\n", 7.2*3.5);
    print("10.4/2.0=%f\n", 10.4/2.0);

    print("1.0+2.0*3.0=%f\n", 1.0+2.0*3.0);
    print("10.0-6.0/2.0=%f\n", 10.0-6.0/2.0);
    print("(1.0+2.0)*3.0=%f\n", (1.0+2.0)*3.0);
    print("(10.0-6.0)/2.0=%f\n", (10.0-6.0)/2.0);
  };

  def testMixed: function ()=>Void
  {
    print("1i8 + 1i8 = %d\n", 1i8 + 1i8);
    print("1i64 + 1i64 = %d\n", 1i64 + 1i64);
    print("1i8 + 1i64 = %d\n", 1i8 + 1i64);
    print("1i64 + 1i8 = %d\n", 1i64 + 1i8);

    print("1f32 + 1f32 = %f\n", 1f32 + 1f32);
    print("1f64 + 1f64 = %f\n", 1f64 + 1f64);
    print("1f64 + 1f32 = %f\n", 1f64 + 1f32);
    print("1f32 + 1f64 = %f\n", 1f32 + 1f64);

    print("1i32 + 1f32 = %f\n", 1i32 + 1f32);
    print("1f32 + 1i32 = %f\n", 1f32 + 1i32);
    print("1i64 + 1f32 = %f\n", 1i64 + 1f32);
    print("1f32 + 1i64 = %f\n", 1f32 + 1i64);
  };

  def start: function ()=>Void
  {
    testInteger();
    testFloat();
    testMixed();
  }
};

build Main.start;
