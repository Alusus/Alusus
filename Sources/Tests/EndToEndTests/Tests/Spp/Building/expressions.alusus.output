ERROR SPP1106 @ (103,33): No matches were found for the given callee.
ERROR SPP1106 @ (104,33): No matches were found for the given callee.
ERROR SPP1106 @ (105,33): No matches were found for the given callee.
ERROR SPP1106 @ (106,33): No matches were found for the given callee.
ERROR SPP1308 @ (115,19): Invalid symbol.
ERROR SPP1308 @ (116,23): Invalid symbol.
ERROR SPP1308 @ (117,19): Invalid symbol.
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
target datalayout = "E-p:64:64:64-S0-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f16:16:16-f32:32:32-f64:64:64-f128:128:128-v64:64:64-v128:128:128-a0:0:64"

@__anonymous0 = private constant [8 x i8] c"1+1=%d\0A\00", align 1
@__anonymous1 = private constant [8 x i8] c"5-2=%d\0A\00", align 1
@__anonymous2 = private constant [8 x i8] c"7*3=%d\0A\00", align 1
@__anonymous3 = private constant [9 x i8] c"10/2=%d\0A\00", align 1
@__anonymous4 = private constant [8 x i8] c"-34=%d\0A\00", align 1
@__anonymous5 = private constant [8 x i8] c"+34=%d\0A\00", align 1
@__anonymous6 = private constant [10 x i8] c"1+2*3=%d\0A\00", align 1
@__anonymous7 = private constant [11 x i8] c"10-6/2=%d\0A\00", align 1
@__anonymous8 = private constant [12 x i8] c"(1+2)*3=%d\0A\00", align 1
@__anonymous9 = private constant [13 x i8] c"(10-6)/2=%d\0A\00", align 1
@__anonymous10 = private constant [14 x i8] c"-(10 * 2)=%d\0A\00", align 1
@__anonymous11 = private constant [14 x i8] c"+(10 * 2)=%d\0A\00", align 1
@__anonymous12 = private constant [12 x i8] c"++i32 = %d\0A\00", align 1
@__anonymous13 = private constant [12 x i8] c"++i64 = %d\0A\00", align 1
@__anonymous14 = private constant [12 x i8] c"--i32 = %d\0A\00", align 1
@__anonymous15 = private constant [12 x i8] c"--i64 = %d\0A\00", align 1
@__anonymous16 = private constant [12 x i8] c"i32++ = %d\0A\00", align 1
@__anonymous17 = private constant [12 x i8] c"i64++ = %d\0A\00", align 1
@__anonymous18 = private constant [12 x i8] c"i32-- = %d\0A\00", align 1
@__anonymous19 = private constant [12 x i8] c"i64-- = %d\0A\00", align 1
@__anonymous20 = private constant [16 x i8] c"i32 += 7 => %d\0A\00", align 1
@__anonymous21 = private constant [16 x i8] c"i32 -= 2 => %d\0A\00", align 1
@__anonymous22 = private constant [16 x i8] c"i32 *= 2 => %d\0A\00", align 1
@__anonymous23 = private constant [16 x i8] c"i32 /= 5 => %d\0A\00", align 1
@__anonymous24 = private constant [16 x i8] c"i64 += 7 => %d\0A\00", align 1
@__anonymous25 = private constant [16 x i8] c"i64 -= 2 => %d\0A\00", align 1
@__anonymous26 = private constant [16 x i8] c"i64 *= 2 => %d\0A\00", align 1
@__anonymous27 = private constant [16 x i8] c"i64 /= 5 => %d\0A\00", align 1
@__anonymous28 = private constant [12 x i8] c"1.2+1.2=%f\0A\00", align 1
@__anonymous29 = private constant [12 x i8] c"5.5-2.5=%f\0A\00", align 1
@__anonymous30 = private constant [12 x i8] c"7.2*3.5=%f\0A\00", align 1
@__anonymous31 = private constant [13 x i8] c"10.4/2.0=%f\0A\00", align 1
@__anonymous32 = private constant [9 x i8] c"-3.4=%f\0A\00", align 1
@__anonymous33 = private constant [9 x i8] c"+3.4=%f\0A\00", align 1
@__anonymous34 = private constant [16 x i8] c"1.0+2.0*3.0=%f\0A\00", align 1
@__anonymous35 = private constant [17 x i8] c"10.0-6.0/2.0=%f\0A\00", align 1
@__anonymous36 = private constant [18 x i8] c"(1.0+2.0)*3.0=%f\0A\00", align 1
@__anonymous37 = private constant [19 x i8] c"(10.0-6.0)/2.0=%f\0A\00", align 1
@__anonymous38 = private constant [18 x i8] c"-(10.0 * 2.3)=%d\0A\00", align 1
@__anonymous39 = private constant [18 x i8] c"+(10.0 * 2.3)=%d\0A\00", align 1
@__anonymous40 = private constant [12 x i8] c"++f32 = %f\0A\00", align 1
@__anonymous41 = private constant [12 x i8] c"++f64 = %f\0A\00", align 1
@__anonymous42 = private constant [12 x i8] c"--f32 = %f\0A\00", align 1
@__anonymous43 = private constant [12 x i8] c"--f64 = %f\0A\00", align 1
@__anonymous44 = private constant [12 x i8] c"f32++ = %f\0A\00", align 1
@__anonymous45 = private constant [12 x i8] c"f64++ = %f\0A\00", align 1
@__anonymous46 = private constant [12 x i8] c"f32-- = %f\0A\00", align 1
@__anonymous47 = private constant [12 x i8] c"f64-- = %f\0A\00", align 1
@__anonymous48 = private constant [18 x i8] c"f32 += 0.7 => %f\0A\00", align 1
@__anonymous49 = private constant [18 x i8] c"f32 -= 0.2 => %f\0A\00", align 1
@__anonymous50 = private constant [18 x i8] c"f32 *= 2.0 => %f\0A\00", align 1
@__anonymous51 = private constant [19 x i8] c"f32 /= 0.05 => %f\0A\00", align 1
@__anonymous52 = private constant [19 x i8] c"f64 += 0.07 => %f\0A\00", align 1
@__anonymous53 = private constant [19 x i8] c"f64 -= 0.02 => %f\0A\00", align 1
@__anonymous54 = private constant [18 x i8] c"f64 *= 2.0 => %f\0A\00", align 1
@__anonymous55 = private constant [18 x i8] c"f64 /= 0.5 => %f\0A\00", align 1
@__anonymous56 = private constant [16 x i8] c"1i8 + 1i8 = %d\0A\00", align 1
@__anonymous57 = private constant [18 x i8] c"1i64 + 1i64 = %d\0A\00", align 1
@__anonymous58 = private constant [17 x i8] c"1i8 + 1i64 = %d\0A\00", align 1
@__anonymous59 = private constant [17 x i8] c"1i64 + 1i8 = %d\0A\00", align 1
@__anonymous60 = private constant [18 x i8] c"1f32 + 1f32 = %f\0A\00", align 1
@__anonymous61 = private constant [18 x i8] c"1f64 + 1f64 = %f\0A\00", align 1
@__anonymous62 = private constant [18 x i8] c"1f64 + 1f32 = %f\0A\00", align 1
@__anonymous63 = private constant [18 x i8] c"1f32 + 1f64 = %f\0A\00", align 1
@__anonymous64 = private constant [18 x i8] c"1i32 + 1f32 = %f\0A\00", align 1
@__anonymous65 = private constant [18 x i8] c"1f32 + 1i32 = %f\0A\00", align 1
@__anonymous66 = private constant [18 x i8] c"1i64 + 1f32 = %f\0A\00", align 1
@__anonymous67 = private constant [18 x i8] c"1f32 + 1i64 = %f\0A\00", align 1
@__anonymous68 = private constant [4 x i8] c"%d\0A\00", align 1
@__anonymous69 = private constant [4 x i8] c"%d\0A\00", align 1
@__anonymous70 = private constant [4 x i8] c"%d\0A\00", align 1

declare i64 @printf(i8*, ...)

define void @Main_testInteger_____Void_() {
__block0:
  %0 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @__anonymous0, i64 0, i64 0), i32 2)
  %1 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @__anonymous1, i64 0, i64 0), i32 3)
  %2 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @__anonymous2, i64 0, i64 0), i32 21)
  %3 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([9 x i8]* @__anonymous3, i64 0, i64 0), i32 5)
  %4 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @__anonymous4, i64 0, i64 0), i32 -34)
  %5 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([8 x i8]* @__anonymous5, i64 0, i64 0), i32 34)
  %6 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([10 x i8]* @__anonymous6, i64 0, i64 0), i32 7)
  %7 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @__anonymous7, i64 0, i64 0), i32 7)
  %8 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous8, i64 0, i64 0), i32 9)
  %9 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @__anonymous9, i64 0, i64 0), i32 2)
  %10 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @__anonymous10, i64 0, i64 0), i32 -20)
  %11 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @__anonymous11, i64 0, i64 0), i32 20)
  %i32 = alloca i32
  %i64 = alloca i64
  store i32 3, i32* %i32
  store i64 4, i64* %i64
  %12 = load i32* %i32
  %13 = add i32 %12, 1
  store i32 %13, i32* %i32
  %14 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous12, i64 0, i64 0), i32 %13)
  %15 = load i64* %i64
  %16 = add i64 %15, 1
  store i64 %16, i64* %i64
  %17 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous13, i64 0, i64 0), i64 %16)
  %18 = load i32* %i32
  %19 = sub i32 %18, 1
  store i32 %19, i32* %i32
  %20 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous14, i64 0, i64 0), i32 %19)
  %21 = load i64* %i64
  %22 = sub i64 %21, 1
  store i64 %22, i64* %i64
  %23 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous15, i64 0, i64 0), i64 %22)
  %24 = load i32* %i32
  %25 = add i32 %24, 1
  store i32 %25, i32* %i32
  %26 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous16, i64 0, i64 0), i32 %24)
  %27 = load i64* %i64
  %28 = add i64 %27, 1
  store i64 %28, i64* %i64
  %29 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous17, i64 0, i64 0), i64 %27)
  %30 = load i32* %i32
  %31 = sub i32 %30, 1
  store i32 %31, i32* %i32
  %32 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous18, i64 0, i64 0), i32 %30)
  %33 = load i64* %i64
  %34 = sub i64 %33, 1
  store i64 %34, i64* %i64
  %35 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous19, i64 0, i64 0), i64 %33)
  store i32 5, i32* %i32
  %36 = load i32* %i32
  %37 = add i32 %36, 7
  store i32 %37, i32* %i32
  %38 = load i32* %i32
  %39 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous20, i64 0, i64 0), i32 %38)
  %40 = load i32* %i32
  %41 = sub i32 %40, 2
  store i32 %41, i32* %i32
  %42 = load i32* %i32
  %43 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous21, i64 0, i64 0), i32 %42)
  %44 = load i32* %i32
  %45 = mul i32 %44, 2
  store i32 %45, i32* %i32
  %46 = load i32* %i32
  %47 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous22, i64 0, i64 0), i32 %46)
  %48 = load i32* %i32
  %49 = sdiv i32 %48, 5
  store i32 %49, i32* %i32
  %50 = load i32* %i32
  %51 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous23, i64 0, i64 0), i32 %50)
  store i64 15, i64* %i64
  %52 = load i64* %i64
  %53 = add i64 %52, 7
  store i64 %53, i64* %i64
  %54 = load i64* %i64
  %55 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous24, i64 0, i64 0), i64 %54)
  %56 = load i64* %i64
  %57 = sub i64 %56, 2
  store i64 %57, i64* %i64
  %58 = load i64* %i64
  %59 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous25, i64 0, i64 0), i64 %58)
  %60 = load i64* %i64
  %61 = mul i64 %60, 2
  store i64 %61, i64* %i64
  %62 = load i64* %i64
  %63 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous26, i64 0, i64 0), i64 %62)
  %64 = load i64* %i64
  %65 = sdiv i64 %64, 5
  store i64 %65, i64* %i64
  %66 = load i64* %i64
  %67 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous27, i64 0, i64 0), i64 %66)
  ret void
}

define void @Main_testFloat_____Void_() {
__block1:
  %0 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous28, i64 0, i64 0), float 0x4003333340000000)
  %1 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous29, i64 0, i64 0), float 3.000000e+00)
  %2 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous30, i64 0, i64 0), float 0x4039333320000000)
  %3 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([13 x i8]* @__anonymous31, i64 0, i64 0), float 0x4014CCCCC0000000)
  %4 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([9 x i8]* @__anonymous32, i64 0, i64 0), float 0xC00B333340000000)
  %5 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([9 x i8]* @__anonymous33, i64 0, i64 0), float 0x400B333340000000)
  %6 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous34, i64 0, i64 0), float 7.000000e+00)
  %7 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @__anonymous35, i64 0, i64 0), float 7.000000e+00)
  %8 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous36, i64 0, i64 0), float 9.000000e+00)
  %9 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @__anonymous37, i64 0, i64 0), float 2.000000e+00)
  %10 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous38, i64 0, i64 0), float -2.300000e+01)
  %11 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous39, i64 0, i64 0), float 2.300000e+01)
  %f32 = alloca float
  %f64 = alloca double
  store float 5.000000e+00, float* %f32
  store double 6.000000e+00, double* %f64
  %12 = load float* %f32
  %13 = fadd float %12, 1.000000e+00
  store float %13, float* %f32
  %14 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous40, i64 0, i64 0), float %13)
  %15 = load double* %f64
  %16 = fadd double %15, 1.000000e+00
  store double %16, double* %f64
  %17 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous41, i64 0, i64 0), double %16)
  %18 = load float* %f32
  %19 = fsub float %18, 1.000000e+00
  store float %19, float* %f32
  %20 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous42, i64 0, i64 0), float %19)
  %21 = load double* %f64
  %22 = fsub double %21, 1.000000e+00
  store double %22, double* %f64
  %23 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous43, i64 0, i64 0), double %22)
  %24 = load float* %f32
  %25 = fadd float %24, 1.000000e+00
  store float %25, float* %f32
  %26 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous44, i64 0, i64 0), float %24)
  %27 = load double* %f64
  %28 = fadd double %27, 1.000000e+00
  store double %28, double* %f64
  %29 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous45, i64 0, i64 0), double %27)
  %30 = load float* %f32
  %31 = fsub float %30, 1.000000e+00
  store float %31, float* %f32
  %32 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous46, i64 0, i64 0), float %30)
  %33 = load double* %f64
  %34 = fsub double %33, 1.000000e+00
  store double %34, double* %f64
  %35 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous47, i64 0, i64 0), double %33)
  store float 5.000000e-01, float* %f32
  %36 = load float* %f32
  %37 = fadd float %36, 0x3FE6666660000000
  store float %37, float* %f32
  %38 = load float* %f32
  %39 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous48, i64 0, i64 0), float %38)
  %40 = load float* %f32
  %41 = fsub float %40, 0x3FC99999A0000000
  store float %41, float* %f32
  %42 = load float* %f32
  %43 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous49, i64 0, i64 0), float %42)
  %44 = load float* %f32
  %45 = fmul float %44, 2.000000e+00
  store float %45, float* %f32
  %46 = load float* %f32
  %47 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous50, i64 0, i64 0), float %46)
  %48 = load float* %f32
  %49 = fdiv float %48, 0x3FA99999A0000000
  store float %49, float* %f32
  %50 = load float* %f32
  %51 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @__anonymous51, i64 0, i64 0), float %50)
  store double 0x3FC3333340000000, double* %f64
  %52 = load double* %f64
  %53 = fadd double %52, 0x3FB1EB8520000000
  store double %53, double* %f64
  %54 = load double* %f64
  %55 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @__anonymous52, i64 0, i64 0), double %54)
  %56 = load double* %f64
  %57 = fsub double %56, 0x3F947AE140000000
  store double %57, double* %f64
  %58 = load double* %f64
  %59 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([19 x i8]* @__anonymous53, i64 0, i64 0), double %58)
  %60 = load double* %f64
  %61 = fmul double %60, 2.000000e+00
  store double %61, double* %f64
  %62 = load double* %f64
  %63 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous54, i64 0, i64 0), double %62)
  %64 = load double* %f64
  %65 = fdiv double %64, 5.000000e-01
  store double %65, double* %f64
  %66 = load double* %f64
  %67 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous55, i64 0, i64 0), double %66)
  ret void
}

define void @Main_testMixed_____Void_() {
__block2:
  %0 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous56, i64 0, i64 0), i8 2)
  %1 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous57, i64 0, i64 0), i64 2)
  %2 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @__anonymous58, i64 0, i64 0), i64 2)
  %3 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @__anonymous59, i64 0, i64 0), i64 2)
  %4 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous60, i64 0, i64 0), float 2.000000e+00)
  %5 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous61, i64 0, i64 0), double 2.000000e+00)
  %6 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous62, i64 0, i64 0), double 2.000000e+00)
  %7 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous63, i64 0, i64 0), double 2.000000e+00)
  ret void
}

define void @Main_start_____Void_() {
__block3:
  call void @Main_testInteger_____Void_()
  call void @Main_testFloat_____Void_()
  call void @Main_testMixed_____Void_()
  ret void
}
------------------------------------------------------------
