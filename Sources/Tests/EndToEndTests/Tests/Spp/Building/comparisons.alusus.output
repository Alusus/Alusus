ERROR SPP1106 @ (47,33): No matches were found for the given callee.
ERROR SPP1106 @ (48,33): No matches were found for the given callee.
ERROR SPP1106 @ (49,33): No matches were found for the given callee.
ERROR SPP1106 @ (50,33): No matches were found for the given callee.
ERROR SPP1308 @ (58,8): Invalid symbol.
Build Failed...
--------------------- Partial LLVM IR ----------------------
; ModuleID = 'AlususProgram'
target datalayout = "E-p:64:64:64-S0-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:32:64-f16:16:16-f32:32:32-f64:64:64-f128:128:128-v64:64:64-v128:128:128-a0:0:64"

@__anonymous0 = private constant [12 x i8] c"1 == 1: %d\0A\00", align 1
@__anonymous1 = private constant [12 x i8] c"1 == 2: %d\0A\00", align 1
@__anonymous2 = private constant [11 x i8] c"1 > 1: %d\0A\00", align 1
@__anonymous3 = private constant [11 x i8] c"1 > 0: %d\0A\00", align 1
@__anonymous4 = private constant [12 x i8] c"1 >= 1: %d\0A\00", align 1
@__anonymous5 = private constant [12 x i8] c"1 >= 2: %d\0A\00", align 1
@__anonymous6 = private constant [11 x i8] c"1 < 1: %d\0A\00", align 1
@__anonymous7 = private constant [11 x i8] c"1 < 2: %d\0A\00", align 1
@__anonymous8 = private constant [12 x i8] c"1 <= 1: %d\0A\00", align 1
@__anonymous9 = private constant [12 x i8] c"2 <= 1: %d\0A\00", align 1
@__anonymous10 = private constant [16 x i8] c"1.0 == 1.0: %d\0A\00", align 1
@__anonymous11 = private constant [16 x i8] c"1.0 == 2.0: %d\0A\00", align 1
@__anonymous12 = private constant [15 x i8] c"1.0 > 1.0: %d\0A\00", align 1
@__anonymous13 = private constant [15 x i8] c"1.0 > 0.0: %d\0A\00", align 1
@__anonymous14 = private constant [16 x i8] c"1.0 >= 1.0: %d\0A\00", align 1
@__anonymous15 = private constant [16 x i8] c"1.0 >= 2.0: %d\0A\00", align 1
@__anonymous16 = private constant [15 x i8] c"1.0 < 1.0: %d\0A\00", align 1
@__anonymous17 = private constant [15 x i8] c"1.0 < 2.0: %d\0A\00", align 1
@__anonymous18 = private constant [16 x i8] c"1.0 <= 1.0: %d\0A\00", align 1
@__anonymous19 = private constant [16 x i8] c"2.0 <= 1.0: %d\0A\00", align 1
@__anonymous20 = private constant [16 x i8] c"1i8 == 1i8: %d\0A\00", align 1
@__anonymous21 = private constant [18 x i8] c"1i64 == 1i64: %d\0A\00", align 1
@__anonymous22 = private constant [17 x i8] c"1i8 == 1i64: %d\0A\00", align 1
@__anonymous23 = private constant [17 x i8] c"1i64 == 1i8: %d\0A\00", align 1
@__anonymous24 = private constant [18 x i8] c"1f32 == 1f32: %d\0A\00", align 1
@__anonymous25 = private constant [18 x i8] c"1f64 == 1f64: %d\0A\00", align 1
@__anonymous26 = private constant [18 x i8] c"1f64 == 1f32: %d\0A\00", align 1
@__anonymous27 = private constant [18 x i8] c"1f32 == 1f64: %d\0A\00", align 1
@__anonymous28 = private constant [18 x i8] c"1i32 == 1f32: %d\0A\00", align 1
@__anonymous29 = private constant [18 x i8] c"1f32 == 1i32: %d\0A\00", align 1
@__anonymous30 = private constant [18 x i8] c"1i64 == 1f32: %d\0A\00", align 1
@__anonymous31 = private constant [18 x i8] c"1f32 == 1i64: %d\0A\00", align 1
@__anonymous32 = private constant [20 x i8] c"Received positive.\0A\00", align 1
@__anonymous33 = private constant [20 x i8] c"Received negative.\0A\00", align 1

declare i64 @printf(i8*, ...)

define void @Main_testInteger_____Void_() {
__block0:
  %0 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous0, i64 0, i64 0), i64 -1)
  %1 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous1, i64 0, i64 0), i64 0)
  %2 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @__anonymous2, i64 0, i64 0), i64 0)
  %3 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @__anonymous3, i64 0, i64 0), i64 -1)
  %4 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous4, i64 0, i64 0), i64 -1)
  %5 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous5, i64 0, i64 0), i64 0)
  %6 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @__anonymous6, i64 0, i64 0), i64 0)
  %7 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([11 x i8]* @__anonymous7, i64 0, i64 0), i64 -1)
  %8 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous8, i64 0, i64 0), i64 -1)
  %9 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([12 x i8]* @__anonymous9, i64 0, i64 0), i64 0)
  ret void
}

define void @Main_testFloat_____Void_() {
__block1:
  %0 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous10, i64 0, i64 0), i64 -1)
  %1 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous11, i64 0, i64 0), i64 0)
  %2 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @__anonymous12, i64 0, i64 0), i64 0)
  %3 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @__anonymous13, i64 0, i64 0), i64 -1)
  %4 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous14, i64 0, i64 0), i64 -1)
  %5 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous15, i64 0, i64 0), i64 0)
  %6 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @__anonymous16, i64 0, i64 0), i64 0)
  %7 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([15 x i8]* @__anonymous17, i64 0, i64 0), i64 -1)
  %8 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous18, i64 0, i64 0), i64 -1)
  %9 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous19, i64 0, i64 0), i64 0)
  ret void
}

define void @Main_testMixed_____Void_() {
__block2:
  %0 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([16 x i8]* @__anonymous20, i64 0, i64 0), i64 -1)
  %1 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous21, i64 0, i64 0), i64 -1)
  %2 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @__anonymous22, i64 0, i64 0), i64 -1)
  %3 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([17 x i8]* @__anonymous23, i64 0, i64 0), i64 -1)
  %4 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous24, i64 0, i64 0), i64 -1)
  %5 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous25, i64 0, i64 0), i64 -1)
  %6 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous26, i64 0, i64 0), i64 -1)
  %7 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([18 x i8]* @__anonymous27, i64 0, i64 0), i64 -1)
  ret void
}

define void @Main_testIfStatement_Int_64_____Void_(i64 %i) {
__block3:
  %i1 = alloca i64
  store i64 %i, i64* %i1
  %0 = load i64* %i1
  %1 = icmp sge i64 %0, 0
  br i1 %1, label %__block4, label %__block5

__block4:                                         ; preds = %__block3
  %2 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @__anonymous32, i64 0, i64 0))
  br label %__block6

__block5:                                         ; preds = %__block3
  %3 = call i64 (i8*, ...)* @printf(i8* getelementptr inbounds ([20 x i8]* @__anonymous33, i64 0, i64 0))
  br label %__block6

__block6:                                         ; preds = %__block5, %__block4
  ret void

__block7:                                         ; No predecessors!
}

define void @Main_start_____Void_() {
__block8:
  call void @Main_testInteger_____Void_()
  call void @Main_testFloat_____Void_()
  call void @Main_testMixed_____Void_()
  call void @Main_testIfStatement_Int_64_____Void_(i64 5)
  call void @Main_testIfStatement_Int_64_____Void_(i64 -5)
  ret void
}
------------------------------------------------------------
