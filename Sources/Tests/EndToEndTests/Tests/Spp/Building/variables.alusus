import "libalusus_spp.so";

def Main: module
{
  def print: @expname[printf] function (fmt: ptr[Int[8]], args: ...any)=>Int[64];

  def gi: Int[32];
  def gpi: ptr[Int[32]];
  def gbi: Int[64];
  def gf: Float[32];
  def gpf: ptr[Float[32]];
  def gbf: Float[64];

  def main: function () => Void
  {
    def li: Int[32];
    def lpi: ptr[Int[32]];
    def lbi: Int[64];
    def lf: Float[32];
    def lpf: ptr[Float[32]];
    def lbf: Float[64];

    gi = 1;
    gi = 2i64;
    gbi = 3i32;
    gf = 4.0;
    gf = 5.0f64;
    gbf = 6.0f32;

    li = 7;
    li = 8i64;
    lbi =9i32;
    lf = 10.0;
    lf = 11.0f64;
    lbf = 12.0f32;

    testVars(gi, gf);
    testVars(gbi, gbf);
    testVars(li, lf);
    testVars(lbi, lbf);

    testVars(gi + 100, gf + 100.0);
    testVars(li + 200, lf + 200.0);

    testVars(gf, gi);
    testVars(gi, gi);
    testVars(gf, gf);

    testVarOverride();
    print("%d\n", gi);

    testOtherModules();

    Other = 5;
    Other.Nested = 1;
    Other.invalid = 2;
    li = Other;
    li = Other.Nested;
    li = Other.invalid;
  };

  def testVars: function (ai: Int[64], af: Float[64]) => Void
  {
    def li: Int[32];
    def lf: Float[32];

    print("%d, %f\n", ai, af);
    ai = 123;
    af = 456.0;
  };

  def testVarOverride: function ()=>Void
  {
    def gi: Int[32];
    gi = 60;
    print("%d\n", gi);
  };

  def testOtherModules: function ()=>Void
  {
    Other.gi = 2;
    Other.gf = 7.3f;
    print("%d, %f\n", Other.gi, Other.gf);
    Other.invalid = 3;
    print("%d\n", Other.invalid);
    Other.Nested.gni = 4;
    print("%d\n", Other.Nested.gni);
    Other.Nested.gf = 3.3;
    print("%f\n", Other.Nested.gf);
  };
};

def Other: module
{
  def gi: Int[32];
  def gf: Float[64];

  def Nested: module
  {
    def gni: Int[32];
  }
};

build Main;
