import "libalusus_spp.so";

def Main: module
{
  def print: @expname[printf] function (fmt: ptr[Int[8]], args: ...any)=>Int[64];

  def start: function ()=>Void
  {
    print("1+1=%d\n", 1+1);
    print("5-2=%d\n", 5-2);
    print("7*3=%d\n", 7*3);
    print("10/2=%d\n", 10/2);

    print("1+2*3=%d\n", 1+2*3);
    print("10-6/2=%d\n", 10-6/2);
    print("(1+2)*3=%d\n", (1+2)*3);
    print("(10-6)/2=%d\n", (10-6)/2);

    print("1i8 + 1i8 = %d\n", 1i8 + 1i8);
    print("1i64 + 1i64 = %d\n", 1i64 + 1i64);
    print("1i8 + 1i64 = %d\n", 1i8 + 1i64);
    print("1i64 + 1i8 = %d\n", 1i64 + 1i8);

    def i32: Int[32];
    def i64: Int[64];
    i32 = 3;
    i64 = 6;

    print("++i32 = %d\n", ++i32);
    print("++i32 = %d\n", ++i32);
    print("--i32 = %d\n", --i32);
    print("--i32 = %d\n", --i32);
    print("i32++ = %d\n", i32++);
    print("i32++ = %d\n", i32++);
    print("i32-- = %d\n", i32--);
    print("i32-- = %d\n", i32--);

    print("++i64 = %d\n", ++i64);
    print("++i64 = %d\n", ++i64);
    print("--i64 = %d\n", --i64);
    print("--i64 = %d\n", --i64);
    print("i64++ = %d\n", i64++);
    print("i64++ = %d\n", i64++);
    print("i64-- = %d\n", i64--);
    print("i64-- = %d\n", i64--);

    i32 = 5;
    i32 += 7; print("i32 += 7 => %d\n", i32);
    i32 -= 2; print("i32 -= 2 => %d\n", i32);
    i32 *= 2; print("i32 *= 2 => %d\n", i32);
    i32 /= 5; print("i32 /= 5 => %d\n", i32);

    i64 = 15;
    i64 += 7; print("i64 += 7 => %d\n", i64);
    i64 -= 2; print("i64 -= 2 => %d\n", i64);
    i64 *= 2; print("i64 *= 2 => %d\n", i64);
    i64 /= 5; print("i64 /= 5 => %d\n", i64);
  }
};

run Main.start;
