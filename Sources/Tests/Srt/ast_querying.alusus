import "Srl/Console";
import "Srl/Array";
import "Srl/Map";
import "Srl/String";
import "Core/Data";
import "Spp";
use Srl;

function generateAddingElementNames (varName: String, elements: Array[ref[Core.Basic.TiObject]]) {
    def i: Int;
    for i = 0, i < elements.getLength(), ++i {
        def node: ref[Core.Data.Node](castRef[elements(i), Core.Data.Node]);
        def d: ref[Core.Data.Ast.Definition](castRef[node.owner, Core.Data.Ast.Definition]);
        def binding: ref[Core.Data.Binding](Core.Basic.getInterface[d, Core.Data.Binding]);
        Spp.astMgr.insertAst(
            ast { names.add(Srl.String("{{name}}")) },
            Srl.Map[Srl.String, ref[Core.Basic.TiObject]]()
                .set(Srl.String("names"), Core.Data.Ast.Identifier(varName))
                .set(Srl.String("name"), binding.getMember("name"))
        );
    }
}

macro implementGetElementNames [condition, parent] {
    def names: Array[String];
    eval {
        def elements: Array[ref[Core.Basic.TiObject]];
        elements = Spp.astMgr.findElements(
            ast { condition },
            parent,
            Spp.SeekerFlags.SKIP_OWNERS | Spp.SeekerFlags.SKIP_USES | Spp.SeekerFlags.SKIP_CHILDREN
        );
        generateAddingElementNames(String("names"), elements);
    }
    return names;
}

function dumpModifiers (element: ref[Core.Basic.TiObject]) {
    def modifiers: ref[Core.Data.Containing](Spp.astMgr.getModifiers(element));
    def i: Int;
    for i = 0, i < modifiers.getElementCount()~cast[Int], ++i {
        Console.print("%s\n", Spp.astMgr.getModifierKeyword(modifiers.getElement(i)).buf);
    }
}

function dumpModifierParams(modifier: ref[Core.Basic.TiObject]) {
    def params: Srl.Array[Srl.String];
    Spp.astMgr.getModifierStringParams(modifier, params);
    def i: Int;
    for i = 0, i < params.getLength(), ++i {
        Console.print("%s\n", params(i).buf);
    }
}

function dumpElementModifierParams(element: ref[Core.Basic.TiObject], modName: ptr[array[Char]]) {
    def modifiers: ref[Core.Data.Containing](Spp.astMgr.getModifiers(element));
    def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifier(modifiers, modName));
    dumpModifierParams(modifier);
}

function dumpElementModifierParams2(element: ref[Core.Basic.TiObject], modName: ptr[array[Char]]) {
    def modifier: ref[Core.Basic.TiObject](Spp.astMgr.findModifierForElement(element, modName));
    dumpModifierParams(modifier);
}

type A {
    @modA @modB["abc", "def"] @modC["ijk", "lmn"]
    def i: Int;

    @private def j: Int;

    func getVarNames ():Array[String] {
        implementGetElementNames[objType == "var", this_type~ast];
    }

    @private func getFuncNames ():Array[String] {
        implementGetElementNames[objType == "function", this_type~ast];
    }

    func getPrivateElementNames ():Array[String] {
        implementGetElementNames[modifier == "private", this_type~ast];
    }
}

func getTypeNames ():Array[String] {
    implementGetElementNames[objType == "type", Root~ast];
}

func getModuleNames ():Array[String] {
    implementGetElementNames[objType == "module", Root~ast];
}

function printNames (names: Array[String]) {
    def i: Int;
    for i = 0, i < names.getLength(), ++i {
        Console.print("%s\n", names(i).buf);
    }
}

def a: A;
Console.print("Var Names:\n");
printNames(a.getVarNames());

Console.print("\nFunc Names:\n");
printNames(a.getFuncNames());

Console.print("\nPrivate Element Names:\n");
printNames(a.getPrivateElementNames());

Console.print("\nType Names:\n");
printNames(getTypeNames());

Console.print("\nModule Names:\n");
printNames(getModuleNames());

Console.print("\nModifiers of A.i:\n");
dumpModifiers(A.i~ast);

Console.print("\nParams for @modB modifier of A.i:\n");
dumpElementModifierParams(A.i~ast, "modB");

Console.print("\nParams for @modC modifier of A.i:\n");
dumpElementModifierParams2(A.i~ast, "modC");
