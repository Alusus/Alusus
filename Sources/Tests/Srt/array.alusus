import "Srl/Console.alusus";
import "Srl/Array.alusus";
import "Srl/String.alusus";

func test {
  def a: Srl.Array[Int];
  a.add(5);
  a.add(3);
  a.add(74);
  a.add(5);
  a.insert(2, 8);

  def i: Int;
  for i = 0, i < a.getLength(), ++i Srl.Console.print("a(%d) = %d\n", i, a(i));

  a.remove(3);
  Srl.Console.print("after removing item 3:\n");
  for i = 0, i < a.getLength(), ++i Srl.Console.print("a(%d) = %d\n", i, a(i));

  a.clear();
  Srl.Console.print("length after clear: %d\n", a.getLength());

  a.add({ 8, 5, 3, 9 });
  Srl.Console.print("after adding block of items:\n");
  for i = 0, i < a.getLength(), ++i Srl.Console.print("a(%d) = %d\n", i, a(i));

  def b: Srl.Array[Int]({ 17, 71, 33 });
  Srl.Console.print("after instantiation with a block of items:\n");
  for i = 0, i < b.getLength(), ++i Srl.Console.print("b(%d) = %d\n", i, b(i));
};

test();


def r: Srl.Array[ref[A]];

type A {
    def i: ref[Int];
    handler this~init() {
        r.add(this);
        Srl.Console.print("A~init\n");
    }
    handler this~init(a: ref[A]) {
        r.add(this);
        Srl.Console.print("A~init(a)\n");
    }
}

func test2 {
    def a: A;
}
test2();

type B {
    def i: ref[Int];
    handler this~init() {
        Srl.Console.print("B~init\n");
    }
    handler this~init(b: ref[B]) {
        Srl.Console.print("B~init(b)\n");
    }
}

func test3 {
    def ab: Srl.Array[B];
    def b: B;
    ab.add(b);
}
test3();

def as: Srl.Array[Srl.String]({ Srl.String("Array[String]({...})\n") });
Srl.Console.print(as(0));
