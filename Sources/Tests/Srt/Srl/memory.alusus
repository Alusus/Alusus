import "Srl/Memory.alusus";
import "Srl/Console.alusus";
use Srl;

def Main: module
{
  def start: function () => Void
  {
    def buf: ptr[array[Int]];
    def i: Int;

    // Test alloc.
    Console.print("Testing alloc:\n");
    buf = Memory.alloc(Int~size * 10)~cast[ptr[array[Int]]];
    for i = 0, i < 10, ++i buf~cnt(i) = i * 2;
    for i = 0, i < 10, ++i {
      Console.print("Element %d: %d\n", i, buf~cnt(i));
    };

    // Test realloc.
    Console.print("\nTesting realloc:\n");
    buf = Memory.realloc(buf, Int~size * 20)~cast[ptr[array[Int]]];
    for i = 0, i < 20, ++i buf~cnt(i) = i * 2;
    for i = 0, i < 20, ++i {
      Console.print("Element %d: %d\n", i, buf~cnt(i));
    };

    Memory.free(buf);

    // Test allocAligned.
    Console.print("\nTesting allocAligned:\n");
    buf = Memory.allocAligned(Int~size, Int~size * 10)~cast[ptr[array[Int]]];
    for i = 0, i < 10, ++i buf~cnt(i) = i * 3;
    for i = 0, i < 10, ++i {
      Console.print("Element %d: %d\n", i, buf~cnt(i));
    };
    Memory.free(buf);

    // Test set, copy, and compare.
    Console.print("\nTesting set, copy, and compare:\n");
    buf = Memory.alloc(Int~size * 10)~cast[ptr[array[Int]]];
    for i = 0, i < 10, ++i buf~cnt(i) = i * 2;
    def buf2: ptr[array[Int]];
    buf2 = Memory.alloc(Int~size * 10)~cast[ptr[array[Int]]];
    Memory.set(buf2, 0, Int~size * 10);
    Console.print("compare array to zeros: %d\n", Memory.compare(buf, buf2, Int~size * 10));
    Console.print("compare zeros to array: %d\n", Memory.compare(buf2, buf, Int~size * 10));
    Memory.copy(buf2, buf, Int~size * 10);
    Console.print("comparing equal arrays: %d\n", Memory.compare(buf, buf2, Int~size * 10));
    Memory.free(buf);
    Memory.free(buf2);
  };
};

Main.start();
