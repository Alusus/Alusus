/**
 * @file Core/Data/Ast/List.h
 * Contains the header of class Core::Data::Ast::List.
 *
 * @copyright Copyright (C) 2016 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <http://alusus.net/alusus_license_1_0>.
 */
//==============================================================================

#ifndef CORE_DATA_AST_LIST_H
#define CORE_DATA_AST_LIST_H

namespace Core { namespace Data { namespace Ast
{

/**
 * @brief A generic list to hold parsed data in a PRT.
 * @ingroup data
 *
 * Holds a list in a Parsing Representation Tree (PRT) generated by the generic
 * parsing handler. Any element of this list can be any other TiObject
 * class, enabling the creation of trees needed for holding complete parsed
 * data. This generic list can hold parsed data for any grammar, enabling it and
 * the GenericParsingHandler to be used by default for any grammar production
 * that doesn't have a specific parsing handler. Despite being used by the
 * GenericParsingHandler, this class can be used publicly by any parsing
 * handler.
 */
class List : public SharedList,
             public virtual MetadataHolder, public virtual Clonable, public virtual Printable
{
  //============================================================================
  // Type Info

  TYPE_INFO(List, SharedList, "Core.Data.Ast", "Core", "alusus.net");
  IMPLEMENT_INTERFACES_3(SharedList, MetadataHolder, Clonable, Printable);


  //============================================================================
  // Constructor / Destructor

  public: List()
  {
  }

  public: List(Word pid, SourceLocation const &sl) :
    MetadataHolder(pid, sl)
  {
  }

  public: List(Word pid, const std::initializer_list<SharedPtr<TiObject>> &args) :
    MetadataHolder(pid), SharedList(args)
  {
  }

  public: List(Word pid, SourceLocation const &sl,
                     const std::initializer_list<SharedPtr<TiObject>> &args) :
    MetadataHolder(pid, sl), SharedList(args)
  {
  }

  public: virtual ~List()
  {
  }

  public: static SharedPtr<List> create()
  {
    return std::make_shared<List>();
  }

  public: static SharedPtr<List> create(Word pid, SourceLocation const &sl)
  {
    return std::make_shared<List>(pid, sl);
  }

  public: static SharedPtr<List> create(Word pid,
                                        const std::initializer_list<SharedPtr<TiObject>> &args)
  {
    return std::make_shared<List>(pid, args);
  }

  public: static SharedPtr<List> create(Word pid, SourceLocation const &sl,
                                        const std::initializer_list<SharedPtr<TiObject>> &args)
  {
    return std::make_shared<List>(pid, sl, args);
  }


  //============================================================================
  // MetadataHolder Overrides

  /**
   * @brief Override the original implementation to search the tree if needed.
   * If the value is not yet set for this object and it has children, it will
   * call getSourceLocation on the children.
   */
  public: virtual SourceLocation const& getSourceLocation() const;

  public: virtual TiObject* getAttribute(Char const *name);


  //============================================================================
  // Clonable Implementation

  public: virtual SharedPtr<TiObject> clone() const;


  //============================================================================
  // Printable Implementation

  public: virtual void print(OutStream &stream, Int indents=0) const;

}; // class

} } } // namespace

#endif
