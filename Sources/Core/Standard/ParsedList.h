/**
 * @file Core/Standard/ParsedList.h
 * Contains the header of class Core::Standard::ParsedList.
 *
 * @copyright Copyright (C) 2014 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <http://alusus.net/alusus_license_1_0>.
 */
//==============================================================================

#ifndef STANDARD_PARSED_LIST_H
#define STANDARD_PARSED_LIST_H

namespace Core { namespace Standard
{

/**
 * @brief A generic list to hold parsed data.
 * @ingroup standard
 *
 * This list is used to hold parsed data generated by the generic parsing
 * handler. Any element of this list can be any other IdentifiableObject class,
 * enabling the creation of trees needed for holding complete parsed data. This
 * generic list can hold parsed data for any grammar, enabling it and the
 * GenericParsingHandler to be used by default for any grammar production that
 * doesn't have a specific parsing handler. Despite being used by the
 * GenericParsingHandler, this class can be used publicly by any parsing
 * handler.
 */
class ParsedList : public ParsedItem
{
  //============================================================================
  // Type Info

  TYPE_INFO(ParsedList, ParsedItem, "Core.Standard", "Core", "alusus.net");


  //============================================================================
  // Member Variables

  /// The list of IdentifiableObject elements.
  private: std::vector<SharedPtr<IdentifiableObject> > elements;


  //============================================================================
  // Constructor / Destructor

  public: ParsedList(Word pid=UNKNOWN_ID, Int l=-1, Int c=-1) : ParsedItem(pid, l, c)
  {
  }

  public: ParsedList(Word pid, Int cnt, IdentifiableObject *first, ...);

  public: ParsedList(Word pid, Int cnt, SharedPtr<IdentifiableObject> const *first, ...);

  public: ParsedList(Word pid, Int l, Int c, Int cnt, IdentifiableObject *first, ...);

  public: ParsedList(Word pid, Int l, Int c, Int cnt, SharedPtr<IdentifiableObject> const *first, ...);

  public: virtual ~ParsedList()
  {
  }


  //============================================================================
  // Member Functions

  /**
   * @brief Push a new element into the end of this list.
   * @param data The parsed data to be added. If this pointer is not null, the
   *             users count will be incremented.
   * @return The index of the created element within the list.
   */
  public: Int pushElement(SharedPtr<IdentifiableObject> const &data)
  {
    this->elements.push_back(data);
    return this->elements.size()-1;
  }

  /// Get the count of elements in the list.
  public: Word getElementCount() const
  {
    return this->elements.size();
  }

  /**
   * @brief Set the given parsed data to a specific element.
   *
   * This replaces any existing element with the new one. The users count will
   * be updated for both the new and the old objects.
   */
  public: void setElement(Int index, SharedPtr<IdentifiableObject> const &data)
  {
    ASSERT(static_cast<Word>(index) < this->elements.size());
    this->elements[index] = data;
  }

  /// Get a smart pointer to a specific element in the list.
  public: SharedPtr<IdentifiableObject> const& getElement(Int index) const
  {
    ASSERT(static_cast<Word>(index) < this->elements.size());
    return this->elements[index];
  }

  /**
   * @brief Override the original implementation to search the tree if needed.
   * If the value is not yet set for this object and it has children, it will
   * call getLine on the children.
   */
  public: virtual Int getLine() const
  {
    if (ParsedItem::getLine() == -1) {
      for (Word i = 0; i < this->getElementCount(); ++i) {
        SharedPtr<ParsedItem> ptr = this->getElement(i).io_cast<ParsedItem>();
        if (ptr != 0) {
          Int l = ptr->getLine();
          if (l != -1) return l;
        }
      }
    }
    return ParsedItem::getLine();
  }

  /**
   * @brief Override the original implementation to search the tree if needed.
   * If the value is not yet set for this object and it has children, it will
   * call getColumn on the children.
   */
  public: virtual Int getColumn() const
  {
    if (ParsedItem::getColumn() == -1) {
      for (Word i = 0; i < this->getElementCount(); ++i) {
        SharedPtr<ParsedItem> ptr = this->getElement(i).io_cast<ParsedItem>();
        if (ptr != 0) {
          Int l = ptr->getColumn();
          if (l != -1) return l;
        }
      }
    }
    return ParsedItem::getColumn();
  }

}; // class

} } // namespace

#endif
