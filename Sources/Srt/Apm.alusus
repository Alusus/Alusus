import "Srl/Console.alusus";
import "Srl/System.alusus";
import "Srl/String.alusus";
import "Srl/Net.alusus";
import "Srl/Fs.alusus";
import "Zip.alusus";

module Apm {
    use Srl;
    def moduleName: array[Char, 250];
    def moduleAuthor: array[Char, 250];
    def moduleReleaseTag: array[Char, 250];
    def globalPackageName: ptr[array[Char]] = "";
    def localPackageName: ptr[array[Char]] = "";

    func importModule(packageName: ptr[array[Char]]): bool {
        def homeDir: ptr[array[Char]] = System.getEnv("HOME")~cast[ptr[array[Char]]];
        def packageWithReleaseTag: bool = 0;

        if (String.findChar(packageName,'@') != 0){
            String.scan(packageName, "%[^/]/%[^@]@%s", moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr);
            packageWithReleaseTag = 1;
        } else {
            String.scan(packageName, "%[^/]/%s", moduleAuthor~ptr, moduleName~ptr);
            packageWithReleaseTag = 0;
        };

        String.assign(globalPackageName, "%s/.apm/%s", homeDir, moduleName);
        String.assign(localPackageName, ".apm/%s", moduleName);

        fetchPackage(packageWithReleaseTag);
        return 1;
    };

    func fetchPackage(releaseTag: bool): Void {
        if(Fs.exists(localPackageName)){
            Core.importFile(localPackageName);
        } else if(Fs.exists(globalPackageName)){
            Core.importFile(globalPackageName);                
        } else {
            def result: ptr[array[Char]];
            def size: Int;
            if (releaseTag){
                def requestUrl: array[Char, 500];
                String.assign(requestUrl~ptr, "https://api.github.com/repos/%s/%s/releases/latest", moduleAuthor~ptr, moduleName~ptr);
                Net.get(requestUrl~ptr, result~ptr, size~ptr);
                urlRequestCallbackWithoutReleaseNameGlobal(result, size);
            } else {
                def requestUrl: array[Char, 500];
                String.assign(requestUrl~ptr, "https://api.github.com/repos/%s/%s/releases/latest", moduleAuthor~ptr, moduleName~ptr);
                Console.print("%sFetching %s info from: %s\n", Console.Style.fgBlue(), moduleName~ptr, requestUrl~ptr);
                if Net.get(requestUrl~ptr, result~ptr, size~ptr) {
                    Console.print("%sFetching successful.\n", Console.Style.fgBlue()); 
                } else {
                    Console.print("%sFetched failed\n", Console.Style.fgRed());
                };
                urlRequestCallbackGlobal(result, size);
            };

            Core.importFile(globalPackageName);
            Memory.free(result);
        };
    };

    // global install
    func installLatestReleaseGlobal(package: ptr[array[Char]]): Void {
        def result: ptr[array[Char]];
        def size: Int;
        if (String.findChar(package,'@') != 0){
            String.scan(package, "%[^/]/%[^@]@%s", moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr);
            def requestUrl: array[Char, 500];
            String.assign(requestUrl~ptr, "https://api.github.com/repos/%s/%s/releases/latest", moduleAuthor~ptr, moduleName~ptr);
            Net.get(requestUrl~ptr, result~ptr, size~ptr);
            urlRequestCallbackWithoutReleaseNameGlobal(result, size);
        } else {
            String.scan(package, "%[^/]/%s", moduleAuthor~ptr, moduleName~ptr);
            def requestUrl: array[Char, 500];
            String.assign(requestUrl~ptr, "https://api.github.com/repos/%s/%s/releases/latest", moduleAuthor~ptr, moduleName~ptr);
            Console.print("%sFetching %s info from: %s\n", Console.Style.fgBlue(), moduleName~ptr, requestUrl~ptr);
            if Net.get(requestUrl~ptr, result~ptr, size~ptr) {
                Console.print("%sFetching successful.\n", Console.Style.fgBlue()); 
            } else {
                Console.print("%sFetched failed\n", Console.Style.fgRed());
            };
            urlRequestCallbackGlobal(result, size);
        };

        Memory.free(result);
    };

    func urlRequestCallbackWithoutReleaseNameGlobal(result: ptr, size: Int): Void {
        def matches: ptr[String.RegexMatches] = String.regex("https://github.com/(.*)/(.*)/releases/tag/(.*)\",", result~cast[ptr[array[Char]]], 1);
        if matches~cnt.count >= 2 {
            String.assign(moduleAuthor~ptr, "%s", matches~cnt.matches(1)~ptr);
            String.assign(moduleName~ptr, "%s", matches~cnt.matches(2)~ptr);
            downloadModuleToGlobal(moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr);
        }else{
            String.assign("%scannot find the latest release", Console.Style.fgRed());
        };

        Memory.free(matches);
    };

    func urlRequestCallbackGlobal(result: ptr, size: Int): Void {
        def matches: ptr[String.RegexMatches] = String.regex("https://github.com/([^/]*)/([^/].*)/releases/tag/([^\"]*)\",", result~cast[ptr[array[Char]]], 1);
        if matches~cnt.count >= 2 {
            String.assign(moduleAuthor~ptr, "%s", matches~cnt.matches(1)~ptr);
            String.assign(moduleName~ptr, "%s", matches~cnt.matches(2)~ptr);
            String.assign(moduleReleaseTag~ptr, "%s", matches~cnt.matches(3)~ptr);
            downloadModuleToGlobal(moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr);
        }else{
            String.assign("%scannot find the latest release", Console.Style.fgRed());
        };

        Memory.free(matches);
    };
    
    func downloadModuleToGlobal(moduleAuthor: ptr[array[Char]], moduleName: ptr[array[Char]], moduleReleaseTag: ptr[array[Char]]): Bool {
        def downloadLink: array[Char, 100];
        def folderInTempDirectory: array[Char, 16000];
        def outToAPMModulesDirectory: array[Char, 16000];
        def dirOfAPMModulesDirectory: array[Char, 16000];
        def execCopyCommand: array[Char, 16000];
        def homeDir: ptr[array[Char]] = System.getEnv("HOME")~cast[ptr[array[Char]]];
        
        String.assign(folderInTempDirectory~ptr, "/tmp/temp_zip/%s-%s", moduleName, moduleReleaseTag);
        String.assign(outToAPMModulesDirectory~ptr, "%s/.apm/%s", homeDir, moduleName);
        String.assign(dirOfAPMModulesDirectory~ptr, "%s/.apm", homeDir);
        String.assign(execCopyCommand~ptr, "cp -rf %s %s", folderInTempDirectory~ptr, outToAPMModulesDirectory~ptr);
        String.assign(downloadLink~ptr, "https://github.com/%s/%s/archive/%s.zip", moduleAuthor, moduleName, moduleReleaseTag);
        if (Fs.exists(outToAPMModulesDirectory~ptr)){
            Console.print("%s%s is already installed.\n", Console.Style.fgRed(), outToAPMModulesDirectory~ptr);
            return 0;
        };
        Console.print("%sInstalling %s v%s\n", Console.Style.fgBlue(), moduleName, moduleReleaseTag);
        Console.print("%sRequest %s\n", Console.Style.fgBlue(), downloadLink~ptr);
        Console.print("%sDownloading %s to /tmp/temp.zip\n", Console.Style.fgYellow(), downloadLink~ptr);
        if(Net.get(downloadLink~ptr, "/tmp/temp.zip")){
            Console.print("%sDownloaded temp.zip\n", Console.Style.fgBlue());
            Console.print("%sunzip temp.zip to /tmp/temp_zip/\n", Console.Style.fgBlue());
            if(Zip.extractFromFile("/tmp/temp.zip", "/tmp/temp_zip", onExtractZip~ptr, 1) == 0){
                Console.print("%stemp.zip extracted.\n", Console.Style.fgBlue());
                if(Fs.exists(dirOfAPMModulesDirectory~ptr) || Fs.makeDir(dirOfAPMModulesDirectory~ptr)){
                    Console.print("%s`%s/.apm` created.\n", Console.Style.fgBlue(), homeDir);
                    Console.print("%smove module to `%s/.apm`.\n", Console.Style.fgBlue(), homeDir);
                    Console.print("%scopy from `%s` to `%s`.\n", Console.Style.fgYellow(), folderInTempDirectory~ptr, outToAPMModulesDirectory~ptr);
                    if(System.exec(execCopyCommand~ptr) == 0){
                        Console.print("%smoved to `%s/.apm`.\n", Console.Style.fgGreen(), homeDir);
                        Console.print("%s%s Installed.\n", Console.Style.fgGreen(), moduleName);
                    }else{
                        Console.print("%scannot move module to `%s/.apm`.\n", Console.Style.fgRed(), homeDir);
                    };
                }else{
                    Console.print("%scannot create `%s/.apm`.\n", Console.Style.fgRed(), homeDir);
                };
            }else{
                Console.print("%scannot extract temp.zip.\n", Console.Style.fgRed());
            };
        }else{
            Console.print("%scannot get %s.\n", Console.Style.fgRed(), downloadLink~ptr);
        };

        return 0;
    };

    // local install
    func installLatestReleaseLocal(package: ptr[array[Char]]): Void {
        def result: ptr[array[Char]];
        def size: Int;
        if (String.findChar(package,'@') != 0){
            String.scan(package, "%[^/]/%[^@]@%s", moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr);
            def requestUrl: array[Char, 500];
            String.assign(requestUrl~ptr, "https://api.github.com/repos/%s/%s/releases/latest", moduleAuthor~ptr, moduleName~ptr);
            Net.get(requestUrl~ptr, result~ptr, size~ptr);
            urlRequestCallbackWithoutReleaseNameLocal(result, size);
        }else{
            String.scan(package, "%[^/]/%s", moduleAuthor~ptr, moduleName~ptr);
            def requestUrl: array[Char, 500];
            String.assign(requestUrl~ptr, "https://api.github.com/repos/%s/%s/releases/latest", moduleAuthor~ptr, moduleName~ptr);
            Console.print("%sFetching %s info from: %s\n", Console.Style.fgBlue(), moduleName~ptr, requestUrl~ptr);
            if Net.get(requestUrl~ptr, result~ptr, size~ptr) {
              Console.print("%sFetching successful.\n", Console.Style.fgBlue()); 
            } else {
              Console.print("%sFetched failed\n", Console.Style.fgRed());
            };
            urlRequestCallbackLocal(result, size);
        };

        Memory.free(result);
    };

    func urlRequestCallbackWithoutReleaseNameLocal(result: ptr, size: Int): Void {
        def matches: ptr[String.RegexMatches] = String.regex("https://github.com/(.*)/(.*)/releases/tag/(.*)\",", result~cast[ptr[array[Char]]], 1);
        if matches~cnt.count >= 2 {
            String.assign(moduleAuthor~ptr, "%s", matches~cnt.matches(1)~ptr);
            String.assign(moduleName~ptr, "%s", matches~cnt.matches(2)~ptr);
            downloadModuleToLocal(moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr);
        }else{
            String.assign("%scannot find the latest release", Console.Style.fgRed());
        };

        Memory.free(matches);
    };

    func urlRequestCallbackLocal(result: ptr, size: Int): Void {
        def matches: ptr[String.RegexMatches] = String.regex("https://github.com/([^/]*)/([^/].*)/releases/tag/([^\"]*)\",", result~cast[ptr[array[Char]]], 1);
        if matches~cnt.count >= 2 {
            String.assign(moduleAuthor~ptr, "%s", matches~cnt.matches(1)~ptr);
            String.assign(moduleName~ptr, "%s", matches~cnt.matches(2)~ptr);
            String.assign(moduleReleaseTag~ptr, "%s", matches~cnt.matches(3)~ptr);
            downloadModuleToLocal(moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr);
        }else{
            String.assign("%scannot find the latest release", Console.Style.fgRed());
        };

        Memory.free(matches);
    };

    func downloadModuleToLocal(moduleAuthor: ptr[array[Char]], moduleName: ptr[array[Char]], moduleReleaseTag: ptr[array[Char]]): Bool {
        def downloadLink: array[Char, 100];
        def folderInTempDirectory: array[Char, 16000];
        def outToAPMModulesDirectory: array[Char, 16000];
        def execCopyCommand: array[Char, 16000];
        String.assign(folderInTempDirectory~ptr, "/tmp/temp_zip/%s-%s", moduleName, moduleReleaseTag);
        String.assign(outToAPMModulesDirectory~ptr, "./.apm/%s", moduleName);
        String.assign(execCopyCommand~ptr, "cp -rf %s %s", folderInTempDirectory~ptr, outToAPMModulesDirectory~ptr);
        String.assign(downloadLink~ptr, "https://github.com/%s/%s/archive/%s.zip", moduleAuthor, moduleName, moduleReleaseTag);
        if (Fs.exists(outToAPMModulesDirectory~ptr)){
            Console.print("%s%s is already installed.\n", Console.Style.fgRed(), outToAPMModulesDirectory~ptr);
            return 0;
        };
        Console.print("%sInstalling %s v%s\n", Console.Style.fgBlue(), moduleName, moduleReleaseTag);
        Console.print("%sRequest %s\n", Console.Style.fgBlue(), downloadLink~ptr);
        Console.print("%sDownloading %s to /tmp/temp.zip\n", Console.Style.fgYellow(), downloadLink~ptr);
        if(Net.get(downloadLink~ptr, "/tmp/temp.zip")){
            Console.print("%sDownloaded temp.zip\n", Console.Style.fgBlue());
            Console.print("%sunzip temp.zip to /tmp/temp_zip/\n", Console.Style.fgBlue());
            if(Zip.extractFromFile("/tmp/temp.zip", "/tmp/temp_zip", onExtractZip~ptr, 1) == 0){
                Console.print("%stemp.zip extracted.\n", Console.Style.fgBlue());
                if(Fs.exists(".apm") || Fs.makeDir(".apm")){
                    Console.print("`%s/.apm` created.\n", Console.Style.fgBlue());
                    Console.print("%smove module to `.apm`.\n", Console.Style.fgBlue());
                    Console.print("%scopy from `%s` to `%s`.\n", Console.Style.fgYellow(), folderInTempDirectory~ptr, outToAPMModulesDirectory~ptr);
                    if(System.exec(execCopyCommand~ptr) == 0){
                        Console.print("%smoved to `.apm`.\n", Console.Style.fgGreen());
                        Console.print("%s%s Installed.\n", Console.Style.fgGreen(), moduleName);
                    }else{
                        Console.print("%scannot move module to `.apm`.\n", Console.Style.fgRed());
                    };
                }else{
                    Console.print("%scannot create `.apm`.\n", Console.Style.fgRed());
                };
            }else{
                Console.print("%scannot extract temp.zip.\n", Console.Style.fgRed());
            };
        }else{
            Console.print("%scannot get %s.\n", Console.Style.fgRed(), downloadLink~ptr);
        };

        return 0;
    };
  
    func onExtractZip(filename: ptr[array[Char]], args: Int): Void {
        Console.print("%sextracted %s\n", Console.Style.fgGreen(), filename);
    };
};