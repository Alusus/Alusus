/**
 * @file Spp.alusus
 * Contains definitions of SPP's astMgr and buildMgr.
 *
 * @copyright Copyright (C) 2024 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "Core/Basic";
import "Srl/Map";
import "Srl/String";
import "Srl/refs_base";

@merge module Spp {
    def SeekerFlags: {
        def SKIP_OWNERS: 1u;
        def SKIP_OWNED: 2u;
        def SKIP_USES: 4u;
        def SKIP_CHILDREN: 0h10000u;
    };

    def DefinitionDomain: {
        def FUNCTION: 0;
        def OBJECT: 1;
        def GLOBAL: 2;
    };

    class GrammarMgr {
        @expname[Spp_GrammarMgr_addCustomCommand]
        handler this.addCustomCommand (
            qualifier: ptr[array[Char]], grammarAst: ref[Core.Basic.TiObject],
            handler: ptr[func (Srl.SrdRef[Core.Basic.TiObject]): Srl.SrdRef[Core.Basic.TiObject]]
        );

        @expname[Spp_GrammarMgr_addCustomGrammar]
        handler this.addCustomGrammar (
            qualifier: ptr[array[Char]], baseQualifier: ptr[array[Char]], grammarAst: ref[Core.Basic.TiObject]
        );
    };
    def grammarMgr: ref[GrammarMgr];

    class AstMgr {
        use Srl;
        use Core.Basic;

        @expname[Spp_AstMgr_findElements]
        handler this.findElements(
            comparison: ref[TiObject],
            target: ref[TiObject],
            flags: Word
        ): Array[ref[TiObject]];

        handler this.findElements(
            comparison: ref[TiObject],
            target: ref[TiObject],
            flags: Word,
            modifierKwd: CharsPtr,
            kwdTranslations: ref[Map[String, String]]
        ): Array[ref[TiObject]] {
            def elements: Array[ref[TiObject]] = this.findElements(comparison, parent, flags);
            def result: Array[ref[TiObject]];
            def i: Int;
            for i = 0, i < elements.getLength(), ++i {
                if modifierKwd != 0
                and this.findModifierForElement(elements(i), modifierKwd, kwdTranslations)~ptr == 0 {
                    continue;
                }
                result.add(elements(i));
            }
            return result;
        }

        handler this.getDefinitionName (element: ref[TiObject]): String {
            use Core.Data;
            def node: ref[Node](castRef[element, Node]);
            def d: ref[Ast.Definition](castRef[node.owner, Ast.Definition]);
            def binding: ref[Binding](getInterface[d, Binding]);
            return castRef[binding.getMember("name"), TiStr].value;
        }

        @expname[Spp_AstMgr_getModifiers]
        handler this.getModifiers(element: ref[TiObject]): ref[Containing];

        @expname[Spp_AstMgr_findModifier]
        handler this.findModifier(
            modifiers: ref[Containing], kwd: ptr[array[Char]]
        ): ref[TiObject];

        @expname[Spp_AstMgr_findModifierForElement]
        handler this.findModifierForElement(
            element: ref[TiObject], kwd: ptr[array[Char]]
        ): ref[TiObject];

        handler this.findModifierForElement (
            element: ref[TiObject],
            kwd: ptr[array[Char]],
            kwdTranslations: ref[Map[String, String]]
        ): ref[TiObject] {
            def modifiers: ref[Containing](this.getModifiers(element));
            if modifiers~ptr == 0 return nullRef[TiObject];
            def i: Int;
            for i = 0, i < modifiers.getElementCount()~cast[Int], ++i {
                def modifier: ref[TiObject](modifiers.getElement(i));
                if modifier~ptr == 0 continue;
                def modKwd: String = this.getModifierKeyword(modifier);
                def translatedKwd: String = kwdTranslations(modKwd);
                if translatedKwd == "" translatedKwd = modKwd;
                if translatedKwd == kwd return modifier;
            }
            return nullRef[TiObject];
        }

        @expname[Spp_AstMgr_getModifierKeyword]
        handler this.getModifierKeyword(modifier: ref[TiObject]): String;

        @expname[Spp_AstMgr_getModifierStringParams]
        handler this.getModifierStringParams(
            modifier: ref[TiObject], result: ref[Array[String]]
        ) => Word[1];

        handler this.getClassVars(parent: ref[TiObject]): Array[ref[TiObject]] {
            return this.findElements(
                (ast elementType == "var"),
                parent,
                SeekerFlags.SKIP_OWNERS | SeekerFlags.SKIP_USES | SeekerFlags.SKIP_CHILDREN
            );
        }

        handler this.getClassVars(
            parent: ref[TiObject], modifierKwd: CharsPtr, kwdTranslations: ref[Map[String, String]]
        ): Array[ref[TiObject]] {
            return this.findElements(
                (ast elementType == "var"),
                parent,
                SeekerFlags.SKIP_OWNERS | SeekerFlags.SKIP_USES | SeekerFlags.SKIP_CHILDREN,
                modifierKwd,
                kwdTranslations
            );
        }

        handler this.getClassVarNames(parent: ref[TiObject]): Array[String] {
            return this.getClassVarNames(parent, 0, Map[String, String]());
        }

        handler this.getClassVarNames(
            parent: ref[TiObject], modifierKwd: CharsPtr, kwdTranslations: ref[Map[String, String]]
        ): Array[String] {
            def vars: Array[ref[TiObject]] = this.getClassVars(parent, modifier, kwdTranslations);
            def result: Array[String];
            def i: Int;
            for i = 0, i < vars.getLength(), ++i {
                result.add(this.getDefinitionName(vars(i)));
            }
            return result;
        }

        handler this.getClassFuncs(parent: ref[TiObject]): Array[ref[TiObject]] {
            return this.findElements(
                (ast elementType == "function"),
                parent,
                SeekerFlags.SKIP_OWNERS | SeekerFlags.SKIP_USES | SeekerFlags.SKIP_CHILDREN
            );
        }

        handler this.getClassFuncs(
            parent: ref[TiObject], modifierKwd: CharsPtr, kwdTranslations: ref[Map[String, String]]
        ): Array[ref[TiObject]] {
            return this.findElements(
                (ast elementType == "function"),
                parent,
                SeekerFlags.SKIP_OWNERS | SeekerFlags.SKIP_USES | SeekerFlags.SKIP_CHILDREN,
                modifierKwd,
                kwdTranslations
            );
        }

        handler this.getClassFuncNames(parent: ref[TiObject]): Array[String] {
            return this.getClassFuncNames(parent, 0, Map[String, String]());
        }

        handler this.getClassFuncNames(
            parent: ref[TiObject], modifierKwd: CharsPtr, kwdTranslations: ref[Map[String, String]]
        ): Array[String] {
            def funcs: Array[ref[TiObject]] = this.getClassFuncs(parent, modifier, kwdTranslations);
            def result: Array[String];
            def i: Int;
            for i = 0, i < funcs.getLength(), ++i {
                result.add(this.getDefinitionName(funcs(i)));
            }
            return result;
        }

        handler this.getFuncArgTypes (element: ref[TiObject]): ref[TiObject] {
            def fnType: ref[TiObject](MapContainerOf[element].getElement("type"));
            return MapContainerOf[fnType].getElement("argTypes");
        }

        handler this.getFuncArgType (element: ref[TiObject], index: Int): ref[TiObject] {
            ContainerOf[this.getFuncArgTypes(element)].{
                if getElementCount()~cast[Int] <= index return nullRef[TiObject]
                else return getElement(index);
            }
        }

        @expname[Spp_AstMgr_getSourceFullPathForElement]
        handler this.getSourceFullPathForElement(element: ref[TiObject]) => String;

        handler this.getSourceDirectoryForElement(element: ref[TiObject]) => String {
            def fullPath: String = this.getSourceFullPathForElement(element);
            return fullPath.slice(0, fullPath.findLast('/') + 1);
        }

        @expname[Spp_AstMgr_insertAst]
        handler this.insertAst(element: ref[TiObject]) => Word[1];

        @expname[Spp_AstMgr_insertAst_plain]
        handler this.insertAst(
            element: ref[TiObject],
            interpolations: ref[Map[String, ref[TiObject]]]
        ) => Word[1];

        @expname[Spp_AstMgr_insertAst_shared]
        handler this.insertAst(
            element: ref[TiObject],
            interpolations: ref[Map[String, SrdRef[TiObject]]]
        ) => Word[1];

        @expname[Spp_AstMgr_buildAst_plain]
        handler this.buildAst(
            element: ref[TiObject],
            interpolations: ref[Map[String, ref[TiObject]]],
            result: ref[SrdRef[TiObject]]
        ) => Word[1];

        @expname[Spp_AstMgr_buildAst_shared]
        handler this.buildAst(
            element: ref[TiObject],
            interpolations: ref[Map[String, SrdRef[TiObject]]],
            result: ref[SrdRef[TiObject]]
        ) => Word[1];

        handler this.buildAst(
            tree: ref[TiObject], args: ref[Map[String, ref[TiObject]]]
        ): SrdRef[TiObject] {
            def result: SrdRef[TiObject];
            this.buildAst(tree, args, result);
            return result;
        }

        handler this.insertCopyHandlers(obj: ref[TiObject]) {
            def varNames: Array[String] = this.getVarNames(obj);
            def assignments: SrdRef[Ast.MergeList] = newSrdObj[Ast.MergeList];
            def assignContainer: DynContainerOf[assignments.obj];
            for i = 0, i < varNames.getLength(), ++i {
                def payloadAssignment: SrdRef[TiObject] = Spp.astMgr.buildAst(
                    (ast this.varName~no_deref = value.varName),
                    AstTemplateMap().set(String("varName"), Ast.Identifier(varNames(i)))
                );
                assignContainer.addElement(payloadAssignment.obj);
            }
            this.insertAst(
                ast {
                    handler this~init(ref[this_type]) { this = value }
                    handler this = ref[this_type] {
                        assignments
                    }
                },
                AstTemplateMap().{
                    set(String("assignments"), assignments.obj);
                }
            );
        }
        @member macro insertCopyHandlers [this] preprocess { this.insertCopyHandlers(this_type~ast) }

        handler this.insertMixin(obj: ref[TiObject]) {
            use Core.Data;
            use Core.Data.Ast;
            def bitwiseOp: ref[BitwiseOperator](dynCastRef[obj, BitwiseOperator]);
            if bitwiseOp~ptr != 0 {
                this.insertMixin(MapContainerOf[bitwiseOp].getElement("first"));
                this.insertMixin(MapContainerOf[bitwiseOp].getElement("second"));
                return;
            }
            if isDerivedFrom[obj, ParamPass] or isDerivedFrom[obj, LinkOperator] or isDerivedFrom[obj, Identifier] {
                def elements: Array[ref[TiObject]] = this.findElements(obj, castRef[obj, Node].owner, 0);
                if elements.getLength() == 0 {
                    buildMgr.raiseBuildNotice("SPPA1007", 1, obj);
                    return;
                }
                def i: Int;
                for i = 0, i < elements.getLength(), ++i this.insertMixin(elements(i));
                return;
            }
            def scope: ref[Scope](dynCastRef[obj, Scope]);
            if scope~ptr == 0 {
                this.insertAst(obj);
                return;
            }
            def container: ContainerOf[scope];
            def i: Word;
            for i = 0, i < container.getElementCount(), ++i {
                this.insertAst(container.getElement(i));
            }
        }
        @member macro insertMixin [this, target] preprocess { this.insertMixin(target~ast) }

        @expname[Spp_AstMgr_getCurrentPreprocessOwner]
        handler this.getCurrentPreprocessOwner(): ref[TiObject];

        @expname[Spp_AstMgr_getCurrentPreprocessInsertionPosition]
        handler this.getCurrentPreprocessInsertionPosition(): Int;

        @expname[Spp_AstMgr_getVariableDomain]
        handler this.getVariableDomain(element: ref[TiObject]) => Int;

        @expname[Spp_AstMgr_traceType]
        handler this.traceType(element: ref[TiObject]) => ref[Spp.Ast.Type];

        @expname[Spp_AstMgr_matchTemplateInstance]
        handler this.matchTemplateInstance(
            template: ref[Spp.Ast.Template], templateInput: ref[TiObject], result: ref[SrdRef[TiObject]]
        ) => Bool;

        @expname[Spp_AstMgr_isCastableTo]
        handler this.isCastableTo(srcTypeRef: ref[TiObject], targetTypeRef: ref[TiObject], implicit: Bool) => Bool;

        @expname[Spp_AstMgr_computeResultType]
        handler this.computeResultType(
            element: ref[TiObject], result: ref[ref[TiObject]], resultIsValue: ref[Bool]
        ) => Bool;

        @expname[Spp_AstMgr_cloneAst]
        handler this.cloneAst(
            element: ref[TiObject], sourceLocationNode: ref[TiObject]
        ): SrdRef[TiObject];
        handler this.cloneAst(element: ref[TiObject]): SrdRef[TiObject] {
            return this.cloneAst(element, nullRef[TiObject]);
        }

        @expname[Spp_AstMgr_dumpData]
        handler this.dumpData(obj: ref[TiObject]);

        @expname[Spp_AstMgr_getReferenceTypeFor]
        handler this.getReferenceTypeFor(astType: ref[TiObject]): ref[Spp.Ast.ReferenceType];

        @expname[Spp_AstMgr_tryGetDeepReferenceContentType]
        handler this.tryGetDeepReferenceContentType(astType: ref[Spp.Ast.Type]): ref[Spp.Ast.Type];

        @expname[Spp_AstMgr_isInjection]
        handler this.isInjection(obj: ref[TiObject]): Bool;
    };
    def astMgr: ref[AstMgr];

    class BuildMgr {
        @expname[Spp_BuildMgr_dumpLlvmIrForElement]
        handler this.dumpLlvmIrForElement (element: ref[Core.Basic.TiObject]);

        @expname[Spp_BuildMgr_buildObjectFileForElement]
        handler this.buildObjectFileForElement (
            element: ref[Core.Basic.TiObject], filename: ptr[array[Word[8]]], targetTriple: ptr[array[Word[8]]]
        ) => Word[1];

        @expname[Spp_BuildMgr_raiseBuildNotice]
        handler this.raiseBuildNotice (
            code: ptr[array[Word[8]]], severity: Int, astNode: ref[Core.Basic.TiObject]
        );
    };
    def buildMgr: ref[BuildMgr];
};

