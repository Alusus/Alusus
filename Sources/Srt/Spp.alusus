/**
 * @file Spp.alusus
 * Contains definitions of SPP's astMgr and buildMgr.
 *
 * @copyright Copyright (C) 2021 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "Core/Basic";
import "Srl/Map";
import "Srl/String";
import "Srl/refs";

@merge module Spp {
    def SeekerFlags: {
        def SKIP_OWNERS: 1u;
        def SKIP_OWNED: 2u;
        def SKIP_USES: 4u;
        def SKIP_CHILDREN: 0h10000u;
    };

    type GrammarMgr {
        @expname[Spp_GrammarMgr_addCustomCommand]
        handler this.addCustomCommand (
            qualifier: ptr[array[Char]], grammarAst: ref[Core.Basic.TiObject],
            handler: ptr[func (Srl.SrdRef[Core.Basic.TiObject]): Srl.SrdRef[Core.Basic.TiObject]]
        );
    };
    def grammarMgr: ref[GrammarMgr];

    type AstMgr {
        @expname[Spp_AstMgr_findElements]
        handler this.findElements(
            comparison: ref[Core.Basic.TiObject],
            target: ref[Core.Basic.TiObject],
            flags: Word
        ): Srl.Array[ref[Core.Basic.TiObject]];

        @expname[Spp_AstMgr_getModifiers]
        handler this.getModifiers(element: ref[Core.Basic.TiObject]): ref[Core.Basic.Containing];

        @expname[Spp_AstMgr_findModifier]
        handler this.findModifier(
            modifiers: ref[Core.Basic.Containing], kwd: ptr[array[Char]]
        ): ref[Core.Basic.TiObject];

        @expname[Spp_AstMgr_findModifierForElement]
        handler this.findModifierForElement(
            element: ref[Core.Basic.TiObject], kwd: ptr[array[Char]]
        ): ref[Core.Basic.TiObject];

        @expname[Spp_AstMgr_getModifierKeyword]
        handler this.getModifierKeyword(modifier: ref[Core.Basic.TiObject]): Srl.String;

        @expname[Spp_AstMgr_getModifierStringParams]
        handler this.getModifierStringParams(
            modifier: ref[Core.Basic.TiObject], result: ref[Srl.Array[Srl.String]]
        ) => Word[1];

        @expname[Spp_AstMgr_getSourceFullPathForElement]
        handler this.getSourceFullPathForElement(element: ref[Core.Basic.TiObject]) => Srl.String;

        @expname[Spp_AstMgr_insertAst]
        handler this.insertAst(element: ref[Core.Basic.TiObject]) => Word[1];

        @expname[Spp_AstMgr_insertAst_plain]
        handler this.insertAst(
            element: ref[Core.Basic.TiObject],
            interpolations: ref[Srl.Map[Srl.String, ref[Core.Basic.TiObject]]]
        ) => Word[1];

        @expname[Spp_AstMgr_insertAst_shared]
        handler this.insertAst(
            element: ref[Core.Basic.TiObject],
            interpolations: ref[Srl.Map[Srl.String, Srl.SrdRef[Core.Basic.TiObject]]]
        ) => Word[1];

        @expname[Spp_AstMgr_buildAst_plain]
        handler this.buildAst(
            element: ref[Core.Basic.TiObject],
            interpolations: ref[Srl.Map[Srl.String, ref[Core.Basic.TiObject]]],
            result: ref[Srl.SrdRef[Core.Basic.TiObject]]
        ) => Word[1];

        @expname[Spp_AstMgr_buildAst_shared]
        handler this.buildAst(
            element: ref[Core.Basic.TiObject],
            interpolations: ref[Srl.Map[Srl.String, Srl.SrdRef[Core.Basic.TiObject]]],
            result: ref[Srl.SrdRef[Core.Basic.TiObject]]
        ) => Word[1];
    };
    def astMgr: ref[AstMgr];

    type BuildMgr {
        @expname[Spp_BuildMgr_dumpLlvmIrForElement]
        handler this.dumpLlvmIrForElement (element: ref[Core.Basic.TiObject]);

        @expname[Spp_BuildMgr_buildObjectFileForElement]
        handler this.buildObjectFileForElement (
            element: ref[Core.Basic.TiObject], filename: ptr[array[Word[8]]], targetTriple: ptr[array[Word[8]]]
        ) => Word[1];
    };
    def buildMgr: ref[BuildMgr];
};

