import "Core/Basic";
import "Srl/Map";
import "Srl/String";

@merge module Spp {
    type AstMgr {
        @expname[Spp_AstMgr_getModifierStrings]
        function getModifierStrings(
            element: ptr, modifierKwd: ptr[array[Word[8]]],
            resultStrs: ptr[ptr[array[ptr[array[Word[8]]]]]],
            resultCount: ptr[Word]
        ) => Word[1];

        @expname[Spp_AstMgr_insertAst_plain]
        func insertAst(
            element: ptr, interpolations: ref[Srl.Map[Srl.String, ptr]]
        ) => Word[1];

        @expname[Spp_AstMgr_insertAst_shared]
        func insertAst(
            element: ptr, interpolations: ref[Srl.Map[Srl.String, SrdRef[Core.Basic.TiObject]]]
        ) => Word[1];

        func insertAst(element: ptr) => Word[1] {
            return this.insertAst(element, Srl.Map[Srl.String, ptr]());
        }

        @expname[Spp_AstMgr_buildAst_plain]
        func buildAst(
            element: ptr, interpolations: ref[Srl.Map[Srl.String, ptr]], ref[SrdRef[Core.Basic.TiObject]]
        ) => Word[1];

        @expname[Spp_AstMgr_buildAst_shared]
        func buildAst(
            element: ptr, interpolations: ref[Srl.Map[Srl.String, SrdRef[Core.Basic.TiObject]]],
            ref[SrdRef[Core.Basic.TiObject]]
        ) => Word[1];
    };
    def astMgr: ref[AstMgr];

    type BuildMgr {
        @expname[Spp_BuildMgr_dumpLlvmIrForElement]
        function dumpLlvmIrForElement (element: ptr);

        @expname[Spp_BuildMgr_buildObjectFileForElement]
        function buildObjectFileForElement (element: ptr, filename: ptr[array[Word[8]]]) => Word[1];
    };
    def buildMgr: ref[BuildMgr];
};

