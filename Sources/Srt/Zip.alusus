/**
 * @file Zip.alusus
 * Contains functions for dealing with zip files.
 *
 * @copyright Copyright (C) 2021 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "Srl/Fs.alusus";
import "Srl/String";
import "Core";
import "libkubazip.so" or "libkubazip.dylib";

def Zip: module {
  def zip_t: class {};
  def _zip_entry_open: @expname[zip_entry_open] function(archive: ptr[zip_t], filename: ptr[array[Char]]);
  def _zip_entry_write: @expname[zip_entry_write] function(
    archive: ptr[zip_t], content: ptr[array[Char]], contentLength: Int
  );
  def _zip_entry_close: @expname[zip_entry_close] function(archive: ptr[zip_t]);
  def _zip_close: @expname[zip_close] function(archive: ptr[zip_t]) => Int;
  def _zip_open: @expname[zip_open] function(
    filename: ptr[array[Char]], level: Int, extractType: array[Char]
  ) => ptr[zip_t];

  def extractFromFile: @expname[zip_extract] function(
    filename: ptr[array[Char]], extractDirectory: ptr[array[Char]],
    callbackFunction: ptr[function (ptr[array[Char]], ptr)=>Int], arguments: ptr
  ) => Int;

  def compressToFile: function(
    filename: ptr[array[Char]], files: ptr[array[ptr[array[Char]]]], filesCount: Int, extractType: ptr[array[Char]]
  ) => Int {
    def openZip: ptr[zip_t];
    openZip = _zip_open(filename, 6, extractType~cnt);

    def i: int;
    def outFileResult: ptr[array[Char]];
    def outFileCount: Int;
    for i=0, i<filesCount, i++ {
      _zip_entry_open(openZip, files~cnt(i));
      Srl.Fs.readFile(files~cnt(i), outFileResult~ptr~cast[ptr[ptr]], outFileCount~ptr);
      _zip_entry_write(openZip, outFileResult, outFileCount);
      _zip_entry_close(openZip);
    };
    return _zip_close(openZip);
  };
};
