import "Core";
import "Spp";
import "Srl/Console";
import "Srl/String";
import "Srl/System";
import "Srl/Memory";
import "Srl/Array";
import "Srl/Fs";

if Srl.String.compare(Process.language, "ar") == 0 {
  Core.importFile("Build/I18n/ar.alusus");
} else {
  Core.importFile("Build/I18n/en.alusus");
};

@merge module Build
{
    use Core.Basic;
    use Srl;

    function doesExecutableExist (filename: ptr[array[Char]]): Bool {
        def command: array[Char, 50];
        String.assign(command~ptr, "which %s", filename);
        def file: ptr[Fs.File] = Fs.openProcess(command~ptr, "r");
        def output: array[Char, 100];
        def result: ptr = Fs.readLine(output~ptr, 100, file);
        Fs.closeProcess(file);
        return result != 0;
    }

    type Unit {
        def element: ref[TiObject];
        def outputFilename: CharsPtr;
        def deps: Array[String];

        handler this~init() {}

        handler this~init(e: ref[TiObject], fn: CharsPtr) {
            this.element~no_deref = e;
            this.outputFilename = fn;
            this.addDependency(e);
        }

        function addDependency (d: String) {
            this.deps.add(d);
        }

        function addDependency (e: ref[TiObject]) => Bool {
            if !this.addDependenciesFromModifier(e, "deps") return false;
            if !this.addDependenciesFromModifier(e, "اعتماديات") return false;
            return true;
        }

        function addDependenciesFromModifier (e: ref[TiObject], modifierKwd: ptr[array[Char]]) => Bool {
            def modifier: ref[TiObject](Spp.astMgr.findModifierForElement(e, modifierKwd));
            if modifier~ptr != 0 {
                def deps: Array[String];
                if !Spp.astMgr.getModifierStringParams(modifier, deps) return false;
                def i: Word;
                for i = 0, i < deps.getLength(), ++i this.addDependency(deps(i));
            }
            return true;
        }
    }

    type Exe {
        @injection def unit: Unit;

        handler this~init(e: ref[TiObject], fn: CharsPtr) {
            this.unit~init(e, fn);
        }

        function getDepsString (): String {
            def depsString: String("");
            def i: Word;
            for i = 0, i < this.deps.getLength(), ++i {
                depsString += " -l:";
                depsString += this.deps(i);
            }
            return depsString;
        }

        function generate () => Bool {
            if !Spp.buildMgr.buildObjectFileForElement(this.element, "/tmp/output.o", 0) {
                Console.print(I18n.objectGenerationError, Console.Style.FG_RED, this.outputFilename);
                return false;
            }
            def linkerFilename: ptr[array[Char]] = getLinkerFilename();
            def cmd: array[Char, 600];
            String.assign(
                cmd~ptr, "%s -no-pie /tmp/output.o -o %s %s", linkerFilename,
                this.outputFilename, this.getDepsString().buf
            );
            if System.exec(cmd~ptr) != 0 {
                Console.print(I18n.exeGenerationError, Console.Style.FG_RED, this.outputFilename);
                return false;
            }
            return true;
        }

        @shared function getLinkerFilename (): ptr[array[Char]] {
            def envCmd: ptr[array[Char]] = envCmd = System.getEnv("ALUSUS_GCC");
            if envCmd != 0 and doesExecutableExist(envCmd) return envCmd
            else if doesExecutableExist("gcc") return "gcc"
            else {
                System.fail(1, "Building executable failed. Could not find gcc command. "
                    "Please install it using your system's package manager. "
                    "GCC is available in your operating system's standard repos. "
                    "Refer to your operating system's documentation on how "
                    "to install GCC.");
                return 0;
            }
        }
    }

    type Wasm {
        @injection def unit: Unit;

        handler this~init(e: ref[TiObject], fn: CharsPtr) {
            this.unit~init(e, fn);
        }

        function getDepsString (): String {
            def depsString: String("");
            def i: Word;
            for i = 0, i < this.deps.getLength(), ++i {
                depsString += " ";
                depsString += this.deps(i);
            }
            return depsString;
        }

        function generate () => Bool {
            if !Spp.buildMgr.buildObjectFileForElement(this.element, "/tmp/output.o", "wasm32-unknown-unknown") {
                Console.print(I18n.objectGenerationError, Console.Style.FG_RED, this.outputFilename);
                return false;
            }
            def linkerFilename: ptr[array[Char]] = getLinkerFilename();
            def cmd: array[Char, 600];
            String.assign(
                cmd~ptr, "%s --no-entry --allow-undefined --export-all %s /tmp/output.o -o %s ",
                linkerFilename, this.getDepsString().buf, this.outputFilename
            );
            if System.exec(cmd~ptr) != 0 {
                Console.print(I18n.exeGenerationError, Console.Style.FG_RED, this.outputFilename);
                return false;
            }
            return true;
        }

        @shared function getLinkerFilename (): ptr[array[Char]] {
            def envCmd: ptr[array[Char]] = envCmd = System.getEnv("ALUSUS_WASM_LD");
            if envCmd != 0 and doesExecutableExist(envCmd) return envCmd
            else if doesExecutableExist("wasm-ld") return "wasm-ld"
            else if doesExecutableExist("wasm-ld-10") return "wasm-ld-10"
            else if doesExecutableExist("wasm-ld-11") return "wasm-ld-11"
            else if doesExecutableExist("wasm-ld-12") return "wasm-ld-12"
            else {
                System.fail(1, "Building wasm failed. Could not find wasm-ld command. "
                    "Please install it using your system's package manager. "
                    "It's usually included in the lld package which is likely "
                    "already available in your operating system's default repos.");
                return 0;
            }
        }
    }

    function genExecutable (element: ref[TiObject], outputFilename: CharsPtr) => Bool
    {
        def exe: Exe(element, outputFilename);
        return exe.generate();
    }

    function genWasm (element: ref[TiObject], outputFilename: CharsPtr) => Bool
    {
        def wasm: Wasm(element, outputFilename);
        return wasm.generate();
    }
}
