/**
 * @file Srl/String.alusus
 * Contains the class Srl.String.
 *
 * @copyright Copyright (C) 2020 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "StringBase";

@merge module Srl
{
    def String: alias StringBase[Char];

    @merge type String {
        func append (i: Int[64]) {
            def buf: array[T, 20];
            assign(buf~ptr, "%ld", i);
            this.append(buf~ptr);
        };

        func append (f: Float[64]) {
            def buf: array[T, 20];
            assign(buf~ptr, "%f", f);
            this.append(buf~ptr);
        };

        @shared @expname[strchr]
        func find(s: ptr[Char], c: Int): ptr[Char];

        @shared @expname[memchr]
        func find(s: ptr[Void], c: Int, n: Int[64]): ptr[Void];

        @shared @expname[strrchr]
        func findLast(s: ptr[Char], c: Int): ptr[Char];

        @shared @expname[strstr]
        func find(haystack: ptr[Char], needle: ptr[Char]): ptr[Char];

        @shared @expname[strrstr]
        func findLast(haystack: ptr[Char], needle: ptr[Char]): ptr[Char];

        @shared @expname[strcmp]
        func compare(s1: ptr[Char], s2: ptr[Char]): Int;

        @shared @expname[strncmp]
        func compare(s1: ptr[Char], s2: ptr[Char], n: Int[64]): Int;

        @shared @expname[strcpy]
        func copy(dest: ptr[Char], src: ptr[Char]): ptr[Void];

        @shared @expname[strncpy]
        func copy(dest: ptr[Char], src: ptr[Char], n: Int[64]): ptr[Void];

        @shared @expname[strcat]
        func concat(dest: ptr[Char], src: ptr[Char]): ptr[Char];

        @shared @expname[strncat]
        func concat(dest: ptr[Char], src: ptr[Char], n: Int[64]): ptr[Char];

        @shared @expname[strlen]
        func getLength(s: ptr[Char]): Int[64];

        @shared @expname[sprintf]
        func assign(target: ptr[Char], format: ptr[Char], args: ...any): Int[32];

        @shared @expname[sscanf]
        func scan(source: ptr[Char], format: ptr[Char], args: ...any): Int[32];

        @shared @expname[toupper]
        func toUpper(c: int): int;

        @shared @expname[tolower]
        func toLower(c: int): int;
    };
};
