import "globals.alusus";
import "Srl/Memory.alusus";

@merge def Srl : module
{
  def String: module
  {
    def findChar: @expname[strchr] function (s: ptr[Char], c: Int) => ptr[Char];
    def findChar: @expname[memchr] function (s: ptr[Void], c: Int, n: Int[64]) => ptr[Void];
    def findLastChar: @expname[strrchr] function (s: ptr[Char], c: Int) => ptr[Char];
    def findString: @expname[strstr] function (haystack: ptr[Char], needle: ptr[Char]) => ptr[Char];
    def compare: @expname[strcmp] function (s1: ptr[Char], s2: ptr[Char]) => Int;
    def compare: @expname[strncmp] function (s1: ptr[Char], s2: ptr[Char], n: Int[64]) => Int;
    def copy: @expname[strcpy] function (dest: ptr[Char], src: ptr[Char]) => ptr[Void];
    def copy: @expname[strncpy] function (dest: ptr[Char], src: ptr[Char], n: Int[64]) => ptr[Void];
    def concat: @expname[strcat] function (dest: ptr[Char], src: ptr[Char]) => ptr[Char];
    def concat: @expname[strncat] function (dest: ptr[Char], src: ptr[Char], n: Int[64]) => ptr[Char];
    def getLength: @expname[strlen] function (s: ptr[Char]) => Int[64];
    def assign: @expname[sprintf] function (target: ptr[Char], format: ptr[Word[8]], args: ...any) => Int[32];
    def scan: @expname[sscanf] function (target: ptr[Char], format: ptr[Word[8]], args: ...any) => Int[32];

    def _maxChars: alias array[Char, 10240];

    def RegexMatches: type {
      def count: Int;
      def matches: array[_maxChars];
    };

    def regex_t: type {
      def buffer: ptr[Char];
      def allocated: Word[64];
      def used: Word[64];
      def syntax: Word[64];
      def fastmap: ptr[Char];
      def translate: ptr[Char];
      def re_nsub: Int;
      def flags: Word[8];
    };

    def regmatch_t: type {
        def rm_so: int;  // Byte offset from string's start to substring's start.
        def rm_eo: int;  // Byte offset from string's start to substring's end.
    };
    def regcomp: @expname[regcomp] function (preg: ptr[regex_t], pattern: ptr[array[Char]], cflags: Int) => Int[32];
    def regexec: @expname[regexec] function (preg: ptr[regex_t], pattern: ptr[array[Char]], size: Int, match: ptr[array[regmatch_t]], cflags: Int) => Int[32];
    def regfree: @expname[regfree] function (preg: ptr[regex_t]);

    def _results: array[_maxChars, 100];
    def _regmatch: array[regmatch_t, 255];
    def regex: function(pattern: ptr[array[Char]], string: ptr[array[Char]], mode: Int) => ptr[RegexMatches] {
      def i: Int;
      def len: int;
      def reg: regex_t;

      regcomp(reg~ptr, pattern, 1);
      if regexec(reg~ptr, string, _regmatch~size / regmatch_t~size, _regmatch~ptr, 1) == 0 {
        for i = 0, _regmatch(i).rm_so != -1, i++ {
          len = _regmatch(i).rm_eo - _regmatch(i).rm_so;
          Memory.copy(_results(i)~ptr, string~cnt(_regmatch(i).rm_so)~ptr, len);
          _results(i)(len) = 0;
        };
      } else {
        i = 0;
      };

      def matches: ptr[RegexMatches];
      matches = Memory.alloc(Int~size + (_maxChars~size * i))~cast[ptr[RegexMatches]];
      matches~cnt.count = i;
      Memory.copy(matches~cnt.matches~ptr, _results~ptr, i * _maxChars~size);

      regfree(reg~ptr);

      return matches;
    };
  };
};
