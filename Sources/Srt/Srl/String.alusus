/**
 * @file Srl/String.alusus
 * Contains the class Srl.String.
 *
 * @copyright Copyright (C) 2020 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "StringBase";

@merge module Srl
{
    def String: alias StringBase[Char];

    @merge type String {
        func append (i: Int[64]) {
            this._append(i, 1);
        }

        func _append (i: Int[64], minDigits: Int) {
            def buf: array[Char, 20];
            def strptr: ptr[Char] = buf(19)~ptr;
            strptr~cnt = 0;
            def negative: Bool = 0;
            if i < 0 {
                negative = 1;
                i = -i;
            }
            while minDigits-- > 0 || i > 0 {
                strptr = strptr - 1;
                strptr~cnt = '0' + i % 10;
                i /= 10;
            }
            if negative {
                strptr = strptr - 1;
                strptr~cnt = '-';
            }
            this.append(strptr~cast[CharsPtr]);
        };

        func append (f: Float[64]) {
            if f < 0 {
                f *= -1;
                this.append('-');
            }
            this.append(f~cast[Int[64]]);
            def fractions: Float[64] = f - f~cast[Int[64]];
            this.append('.');
            this._append((fractions * 1000000.0f64 + 0.5f64)~cast[Int[64]], 6);
        };

        @shared @expname[strchr]
        func find(s: ptr[Char], c: Int): ptr[Char];

        @shared @expname[memchr]
        func find(s: ptr[Void], c: Int, n: ArchInt): ptr[Void];

        @shared @expname[strrchr]
        func findLast(s: ptr[Char], c: Int): ptr[Char];

        @shared @expname[strstr]
        func find(haystack: ptr[Char], needle: ptr[Char]): ptr[Char];

        @shared @expname[strcmp]
        func compare(s1: ptr[Char], s2: ptr[Char]): Int;

        @shared @expname[strncmp]
        func compare(s1: ptr[Char], s2: ptr[Char], n: ArchInt): Int;

        @shared @expname[strcpy]
        func copy(dest: ptr[Char], src: ptr[Char]): ptr[Void];

        @shared @expname[strncpy]
        func copy(dest: ptr[Char], src: ptr[Char], n: ArchInt): ptr[Void];

        @shared @expname[strcat]
        func concat(dest: ptr[Char], src: ptr[Char]): ptr[Char];

        @shared @expname[strncat]
        func concat(dest: ptr[Char], src: ptr[Char], n: ArchInt): ptr[Char];

        @shared @expname[strlen]
        func getLength(s: ptr[Char]): ArchInt;

        @shared @expname[sprintf]
        func assign(target: ptr[Char], format: ptr[Char], args: ...any): Int[32];

        @shared @expname[sscanf]
        func scan(source: ptr[Char], format: ptr[Char], args: ...any): Int[32];

        @shared @expname[toupper]
        func toUpper(c: int): int;

        @shared @expname[tolower]
        func toLower(c: int): int;

        @shared
        func format(format: ptr[array[Char]], args: ...any): String {
            def str: String;
            while 1 {
                def pos: ptr[Char] = find(format, '%');
                if pos == 0 {
                    str += format;
                    break;
                } else {
                    str.append(format, pos~cast[ArchInt] - format~cast[ArchInt]);
                    def c: Char = (pos + 1)~cnt;
                    if c == 's' str += args~next_arg[ptr[array[Char]]]
                    else if c == 'c' str += args~next_arg[Char]
                    else if c == 'i' str += args~next_arg[Int]
                    else if c == 'l' str += args~next_arg[Int[64]]
                    else if c == 'f' str += args~next_arg[Float]
                    else if c == 'd' str += args~next_arg[Float[64]]
                    else if c == '%' str += '%';
                    format = (pos + 2)~cast[CharsPtr];
                }
            }
            return str;
        }
    };
};
