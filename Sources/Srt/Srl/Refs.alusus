import "Srl/Memory.alusus";

@merge module Srl
{
  // Shared Reference
  type SrdRef [T: type] {
    def refCount: ref[Int];
    def singleAllocation: ref[Bool];
    @injection def obj: ref[T];

    // Initialization

    handler this~init() this._init();

    handler this~init(r: ref[SrdRef[T]]) {
      this._init();
      this._assign(r);
    };

    handler this~terminate() this.release();

    // Member Functions

    func _init {
      this.refCount~ptr = 0;
      this.singleAllocation~ptr = 0;
      this.obj~ptr = 0;
    };

    func alloc ():ref[T] {
      this.release();
      def byteCount: Int = T~size + Int~size + Bool~size;
      this.refCount~ptr = Srl.Memory.alloc(byteCount)~cast[ptr[Int]];
      this.singleAllocation~ptr = (this.refCount~ptr~cast[Int[64]] + this.refCount~size)~cast[ptr[Bool]];
      this.obj~ptr = (this.singleAllocation~ptr~cast[Int[64]] + this.singleAllocation~size)~cast[ptr[T]];
      this.refCount = 1;
      this.singleAllocation = true;
      return this.obj;
    };

    func alloc (existingObjPtr: ptr[T]):ref[T] {
      this.release();
      def byteCount: Int = Int~size + Bool~size;
      this.refCount~ptr = Srl.Memory.alloc(byteCount)~cast[ptr[Int]];
      this.singleAllocation~ptr = (this.refCount~ptr~cast[Int[64]] + this.refCount~size)~cast[ptr[Bool]];
      this.obj~ptr = existingObjPtr;
      this.refCount = 1;
      this.singleAllocation = false;
      return this.obj;
    };

    @shared func new ():SrdRef[T] {
      def r: SrdRef[T];
      r.alloc()~deref~init();
      return r;
    };

    func release {
      if this.refCount~ptr != 0 {
        --this.refCount;
        if this.refCount == 0 {
          this.obj~deref~terminate();
          if !this.singleAllocation Srl.Memory.free(this.obj~ptr);
          Srl.Memory.free(this.refCount~ptr);
        }
        this._init();
      };
    };

    func _assign (r: ref[SrdRef[T]]) {
      this.release();
      this.refCount~ptr = r.refCount~ptr;
      this.singleAllocation~ptr = r.singleAllocation~ptr;
      this.obj~ptr = r.obj~ptr;
      if this.refCount~ptr != 0 {
        ++this.refCount;
      };
    };

    // Operators

    handler this = ref[SrdRef[T]] this._assign(value);

    handler this = ptr[T] this.alloc(value);

    handler this~cast[ref[T]] return this.obj;
  };

  // Unique Reference
  type UnqRef [T: type] {
    @injection def obj: ref[T];

    // Initialization

    handler this~init() this.obj~ptr = 0;

    handler this~init(r: ptr[T]) this.obj~ptr = r;

    handler this~terminate() this.release();

    // Member Functions

    func new {
      this.release();
      this.obj~ptr = Srl.Memory.alloc(T~size)~cast[ptr[T]];
      this.obj~deref~init();
    };

    func release {
      if this.obj~ptr != 0 {
        this.obj~deref~terminate();
        Srl.Memory.free(this.obj~ptr);
        this.obj~ptr = 0;
      }
    };

    // Operators

    handler this = ptr[T] {
      this.release();
      this.obj~ptr = value;
    };

    handler this~cast[ref[T]] return this.obj;

    handler this~cast[ptr[T]] return this.obj~ptr;
  };
};
