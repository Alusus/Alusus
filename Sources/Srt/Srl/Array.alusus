/**
 * @file Srl/Array.alusus
 * Contains the class Srl.Array.
 *
 * @copyright Copyright (C) 2020 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "Memory";

@merge module Srl
{
    type Array [T: type] {
        //=================
        // Member Variables

        @injection def data: ref[ArrayData[T]];

        //===============
        // Initialization

        handler this~init() this._init();

        handler this~init(ary: ref[Array[T]]) {
            this._init();
            this.assign(ary);
        };

        handler this~init(count: Int, items: ...T) {
            this._init();
            while count-- > 0 this.add(items~next_arg[T]);
        };

        handler this~terminate() this._release();

        //=================
        // Member Functions

        func _init {
            this.data~ptr = 0;
        };

        func _release {
            if this.data~ptr != 0 {
                if --this.refCount == 0 ArrayData[T].release(this.data);
                this._init();
            };
        };

        func reserve(size: ArchInt) {
            if this.data~ptr == 0 this.data~no_deref = ArrayData[T].alloc(size)
            else if size > this.bufSize this.data~no_deref = ArrayData[T].realloc(this.data, size);
        }

        func getLength (): ArchInt {
            if this.data~ptr == 0 return 0
            else return this.length;
        };

        func getBufSize (): ArchInt {
            if this.data~ptr == 0 return 0
            else return this.bufSize;
        };

        func assign (ary: ref[Array[T]]) {
            this._release();
            this.data~no_deref = ary.data;
            if this.data~ptr != 0 {
                ++this.refCount;
            };
        };

        func _prepareToModify (enlarge: Bool) {
            if this.data~ptr == 0 {
                this.data~no_deref = ArrayData[T].alloc(2);
            } else if this.refCount == 1 {
                if enlarge && this.length >= this.bufSize {
                    this.data~no_deref = ArrayData[T].realloc(this.data, this.bufSize + this.bufSize >> 1);
                }
            } else {
                def curData: ref[ArrayData[T]](this.data);
                --this.refCount;
                this.data~no_deref = ArrayData[T].alloc(curData.length + curData.length >> 1);
                def i: ArchInt;
                for i = 0, i < curData.length, ++i this.buf(i)~no_deref~init(curData.buf(i));
                this.length = curData.length;
            };
        };

        func add (item: T) {
            this._prepareToModify(true);
            this.buf(this.length)~no_deref~init(item);
            ++this.length;
        };

        func add (count: Int, items: ...[T, 1]) {
            while count-- > 0 this.add(items~next_arg[T]);
        };

        func set (index: ArchInt, item: T) {
            if index < 0 || index >= this.getLength() {
                this.add(item);
            } else {
                this.buf(index)~no_deref = item;
            };
        }

        func insert (index: ArchInt, item: T) {
            if index < 0 || index >= this.getLength() {
                this.add(item);
            } else {
                this._prepareToModify(true);
                Memory.copy(
                    this.buf(index + 1)~no_deref~ptr,
                    this.buf(index)~no_deref~ptr,
                    T~no_deref~size * (this.length - index)
                );
                this.buf(index)~no_deref~init(item);
                ++this.length;
            };
        };

        func remove (index: ArchInt) {
            if index >= 0 && index < this.getLength() {
                this._prepareToModify(false);
                this.buf(index)~no_deref~terminate();
                if index < this.getLength() - 1 {
                    Memory.copy(
                        this.buf(index)~no_deref~ptr, this.buf(index + 1)~no_deref~ptr,
                        T~no_deref~size * (this.length - (index + 1))
                    );
                };
                --this.length;
            };
        };

        func clear {
            this._release();
        };

        func findPos (val: ref[T]): ArchInt {
            def i: ArchInt;
            for i = 0, i < this.getLength(), ++i
                if this(i) == val return i;
            return -1;
        }

        //==========
        // Operators

        handler this = ref[Array[T]] this.assign(value);

        handler this(i: ArchInt): ref[T] {
            @shared def dummy: T;
            if i >= 0 && i < this.getLength() return this.buf(i) else return dummy;
        };
    };


    //==========================================================================
    // Internal Types

    type ArrayData [T: type] {
        //=================
        // Member Variables

        def refCount: ArchInt;
        def length: ArchInt;
        def bufSize: ArchInt;
        def buf: array[T, 1];

        //=================
        // Member Functions

        @shared func alloc (size: ArchInt): ref[ArrayData[T]] {
            if size < 2 size = 2;
            def byteCount: ArchInt = ArrayData[T]~size + T~no_deref~size * (size - 1);
            def data: ref[ArrayData[T]];
            data~ptr = Memory.alloc(byteCount)~cast[ptr[ArrayData[T]]];
            data.bufSize = size;
            data.length = 0;
            data.refCount = 1;
            return data;
        };

        @shared func realloc (data: ref[ArrayData[T]], newSize: ArchInt): ref[ArrayData[T]] {
            if newSize < 2 newSize = 2;
            def byteCount: ArchInt = ArrayData[T]~size + T~no_deref~size * (newSize - 1);
            data~ptr = Memory.realloc(data~ptr, byteCount)~cast[ptr[ArrayData[T]]];
            data.bufSize = newSize;
            return data;
        };

        @shared func release (data: ref[ArrayData[T]]) {
            def i: ArchInt;
            for i = 0, i < data.length, ++i data.buf(i)~no_deref~terminate();
            Memory.free(data~ptr);
        };
    };
};
