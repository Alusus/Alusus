/**
 * @file Srl/Fs.alusus
 * Contains the Srl.Fs module.
 *
 * @copyright Copyright (C) 2020 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "srl";
import "Memory";
import "String";

@merge def Srl : module
{
  def Fs: module
  {
    def FILENAME_LENGTH: 256;

    def File: type {};
    def Dir: type {};
    def DirEnt: type {
      def ino: Int[64];
      def off: Int[64];
      def reclen: Int[16];
      def dType: Int[8];
      def dName: array[Char, FILENAME_LENGTH];
    };
    def FileNames: type {
      def count: Int;
      def names: array[array[Char, FILENAME_LENGTH]];
    };

    def Seek: {
      def SET: 0;
      def CUR: 1;
      def END: 2;
    };

    // DIRECTORY & FILE FUNCTIONS

    def exists: function(filename: ptr[array[Char]]) => Bool
    {
      def file: ptr[File];
      file = openFile(filename, "rb");
      if file == 0 {
        return false;
      } else {
        closeFile(file);
        return true;
      }
    };

    def rename: @expname[rename] function (oldFilename: ptr[array[Char]], newFilename: ptr[array[Char]]) => Int[32];

    def remove: @expname[remove] function (filename: ptr[array[Char]]) => Bool;

    // FILE FUNCTIONS

    def openFile: @expname[fopen] function (filename: ptr[array[Char]], mode: ptr[array[Char]]) => ptr[File];

    def closeFile: @expname[fclose] function (file: ptr[File]) => Int[32];

    def print: @expname[fprintf] function (file: ptr[File], format: ptr[array[Char]], args: ...any) => Int[32];

    def scan: @expname[fscanf] function (file: ptr[File], format: ptr[array[Char]], args: ...any) => Int[32];

    def write: @expname[fwrite] function (content: ptr, size: Int[64], count: Int[64], file: ptr[File]) => Int[64];

    def read: @expname[fread] function (content: ptr, size: Int[64], count:Int[64], file: ptr[File]) => Int[64];

    def flush: @expname[fflush] function (file: ptr[File]) => Int[32];

    def tell: @expname[ftell] function (file: ptr[File]) => Int[32];

    def seek: @expname[fseek] function (file: ptr[File], offset: Int, seek: Int) => Int[32];

    def getAbsolutePath: @expname[realpath] function (
      path: ptr[array[Char]], resolvedPath: ptr[array[Char]]
    ): ptr[array[Char]];

    def createFile: function (filename: ptr[array[Char]], content: ptr, contentCount: Int) => Bool
    {
      def file: ptr[File];
      file = openFile(filename, "wb");
      if file == null return false;
      write(content, 1, contentCount, file);
      closeFile(file);
      return true;
    };

    def readFile: function (filename: ptr[array[Char]], result: ptr[ptr], size: ptr[Int]) => Bool
    {
      def file: ptr[File];
      def buffer: ptr[array[Char]];
      if exists(filename) {
        file = openFile(filename, "rb");
        seek(file, 0, Seek.END);
        size~cnt = tell(file);
        buffer = Srl.Memory.alloc(size~cnt + 1)~cast[ptr[array[Char]]];
        seek(file, 0, Seek.SET);
        read(buffer, size~cnt, 1, file);
        closeFile(file);
        buffer~cnt(size~cnt) = 0;
        result~cnt = buffer;
        return true;
      };
      buffer = 0;
      return false;
    };

    def readFile: function (filename: ptr[array[Char]], size: ptr[Int]) => ptr[array[Char]]
    {
      def file: ptr[File];
      def buffer: ptr[array[Char]];
      if !readFile(filename, buffer~ptr~cast[ptr[ptr]], size) return null;
      return buffer;
    };

    def readFile: function (filename: ptr[array[Char]]): String
    {
      def content: String;
      def file: ptr[File];
      if exists(filename) {
        file = openFile(filename, "rb");
        seek(file, 0, Seek.END);
        def size: Int = tell(file);
        content.alloc(size);
        seek(file, 0, Seek.SET);
        read(content.buf, size, 1, file);
        closeFile(file);
        content.buf~cnt(size) = 0;
      };
      return content;
    };

    // DIRECTORY FUNCTIONS

    def _mkdir: @expname[mkdir] function (directoryName: ptr[array[Char]], mode: Int) => Int;
    def makeDir: function (directoryName: ptr[array[Char]], mode: Int) => Bool
    {
      if _mkdir(directoryName, mode) == 0 return true
      else return false;
    };
    def makeDir: function (directoryName: ptr[array[Char]]) => Bool
    {
        return makeDir(directoryName, 0o755);
    };

    def openDir: @expname[opendir] function (directoryName: ptr[array[Char]]) => ptr[Dir];
    def closeDir: @expname[closedir] function (directory: ptr[Dir]) => Int[32];
    def rewindDir: @expname[rewinddir] function (directory: ptr[Dir]);

    def readDir: @expname[readdir] function (directory: ptr[Dir]) => ptr[DirEnt];
    def readDir: function (directoryName: ptr[array[Char]]) => ptr[FileNames]
    {
      def dir: ptr[Dir];
      def dirent: ptr[DirEnt];
      dir = openDir(directoryName);
      // Count the files in the directory.
      def count: Int;
      count = 0;
      while 1 {
        dirent = readDir(dir);
        if dirent == 0 break;
        ++count;
      };
      // Allocate a structure with the appropriate size.
      def fileNames: ptr[FileNames];
      fileNames = Srl.Memory.alloc(Int~size + array[Char, FILENAME_LENGTH]~size * count)~cast[ptr[FileNames]];
      fileNames~cnt.count = count;
      // Read the fielnames.
      rewindDir(dir);
      def i: Int;
      for i = 0, i < count, ++i {
        fileNames~cnt.names(i) = readDir(dir)~cnt.dName;
      };
      closeDir(dir);
      return fileNames;
    };
  };
};

