/**
 * @file Srl/Memory.alusus
 * Contains functions for memory management.
 *
 * @copyright Copyright (C) 2024 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "srl";

@merge module Srl
{
    module Memory
    {
        @expname[malloc]
        function sysAlloc (size: ArchInt) => ptr[Void];

        @expname[realloc]
        function sysRealloc (p: ptr[Void], newSize: ArchInt) => ptr[Void];

        @expname[aligned_alloc]
        function sysAllocAligned (alignment: ArchInt, size: ArchInt) => ptr[Void];

        @expname[free]
        function sysFree (pointer: ptr[Void]);

        @priority def alloc: ptr[function (size: ArchInt) => ptr[Void]](sysAlloc~ptr);
        @priority def realloc: ptr[function (p: ptr[Void], newSize: ArchInt) => ptr[Void]](sysRealloc~ptr);
        @priority def allocAligned: ptr[function (alignment: ArchInt, size: ArchInt) => ptr[Void]](sysAllocAligned~ptr);
        @priority def free: ptr[function (pointer: ptr[Void])](sysFree~ptr);

        function overrideAllocator(
            customAlloc: ptr[function (size: ArchInt) => ptr[Void]],
            customRealloc: ptr[function (p: ptr[Void], newSize: ArchInt) => ptr[Void]],
            customAllocAligned: ptr[function (alignment: ArchInt, size: ArchInt) => ptr[Void]],
            customFree: ptr[function (pointer: ptr[Void])]
        ) {
            alloc = customAlloc;
            realloc = customRealloc;
            allocAligned = customAllocAligned;
            free = customFree;
        }

        function resetAllocator() {
            alloc = sysAlloc~ptr;
            realloc = sysRealloc~ptr;
            allocAligned = sysAllocAligned~ptr;
            free = sysFree~ptr;
        }

        @expname[memcpy]
        function copy (dest: ptr[Void], src: ptr[Void], n: ArchInt) => ptr[Void];

        @expname[memmove]
        function move (dest: ptr[Void], src: ptr[Void], n: ArchInt) => ptr[Void];

        @expname[memcmp]
        function compare (s1: ptr[Void], s2: ptr[Void], n: ArchInt) => Int;

        @expname[memset]
        function set (s: ptr[Void], c: Int, n: ArchInt) => ptr[Void];
    };
};
