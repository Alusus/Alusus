/**
 * @file Srl/refs.alusus
 * Contains definitions of different reference types.
 *
 * @copyright Copyright (C) 2020 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "Memory";

@merge module Srl
{
    //==========================================================================
    // RefCounter
    // A ref counting object to be used by the shared references.
    type RefCounter {
        def count: Int;
        def singleAllocation: Bool;
        def terminator: ptr[@shared @no_bind function (p: ptr)];
        def managedObj: ptr;

        @shared func alloc(size: ArchInt, terminator: ptr[function (ptr)]): ref[RefCounter] {
            def refCounter: ref[RefCounter];
            refCounter~ptr = Memory.alloc(RefCounter~size + size)~cast[ptr[RefCounter]];
            refCounter.count = 0;
            refCounter.singleAllocation = 1;
            refCounter.terminator = terminator;
            refCounter.managedObj = (refCounter~ptr + 1)~cast[ptr];
            return refCounter;
        }

        @shared func alloc(managedObj: ptr, terminator: ptr[function (ptr)]): ref[RefCounter] {
            def refCounter: ref[RefCounter];
            refCounter~ptr = Memory.alloc(RefCounter~size)~cast[ptr[RefCounter]];
            refCounter.count = 0;
            refCounter.singleAllocation = 0;
            refCounter.terminator = terminator;
            refCounter.managedObj = managedObj;
            return refCounter;
        }

        @shared func release(refCounter: ref[RefCounter]) {
            refCounter.terminator(refCounter.managedObj);
            if !refCounter.singleAllocation {
                Memory.free(refCounter.managedObj);
            }
            Memory.free(refCounter~ptr);
        }
    };


    //==========================================================================
    // SharedRef
    // Shared Reference
    type SrdRef [T: type] {
        //=================
        // Member Variables

        def refCounter: ref[RefCounter];
        @injection def obj: ref[T];

        //===============
        // Initialization

        handler this~init() this._init();

        handler this~init(r: temp_ref[SrdRef[T]]) {
            this._init();
            this.assign(r);
        };

        handler this~init(r: temp_ref[WkRef[T]]) {
            this._init();
            this.assign(r);
        };

        handler this~init(c: ref[RefCounter], r: ref[T]) {
            this._init();
            this.assign(c, r);
        };

        handler this~init(p: ref[T]) {
            this._init();
            this.own(p);
        };

        handler this~terminate() this.release();

        //=================
        // Member Functions

        func _init {
            this.refCounter~ptr = 0;
            this.obj~ptr = 0;
        };

        func alloc ():ref[T] {
            this.release();
            this.refCounter~no_deref = RefCounter.alloc(T~size, terminate~ptr);
            this.refCounter.count = 1;
            this.obj~ptr = this.refCounter.managedObj~cast[ptr[T]];
            return this.obj;
        };

        @shared func alloc ():SrdRef[T] {
            def r: SrdRef[T];
            r.alloc()
            return r;
        };

        func construct () {
            this.alloc()~init();
        };

        @shared func construct ():SrdRef[T] {
            def r: SrdRef[T];
            r.construct();
            return r;
        };

        func own (existingObj: ref[T]) {
            if existingObj~ptr == this.obj~ptr return;
            this.release();
            if existingObj~ptr != 0 {
                this.refCounter~no_deref = RefCounter.alloc(existingObj~ptr, terminate~ptr);
                this.refCounter.count = 1;
                this.obj~ptr = existingObj~ptr;
            }
        };

        @shared func own (existingObj: ref[T]): SrdRef[T] {
            def r: SrdRef[T];
            r.own(existingObj);
            return r;
        }

        func release {
            if this.refCounter~ptr != 0 {
                if --this.refCounter.count == 0 RefCounter.release(this.refCounter);
                this._init();
            };
        };

       func assign (sr: ref[SrdRef[T]]) {
            this.assign(sr.refCounter, sr.obj);
        };

        func assign (wr: ref[WkRef[T]]) {
            this.assign(wr.refCounter, wr.obj);
        };

        func assign (c: ref[RefCounter], r: ref[T]) {
            if c~ptr != this.refCounter~ptr {
                this.release();
                this.refCounter~ptr = c~ptr;
                if this.refCounter~ptr != 0 {
                    ++this.refCounter.count;
                };
            }
            this.obj~ptr = r~ptr;
        };

        @shared func terminate (p: ptr) {
            p~cast[ptr[T]]~cnt~terminate();
        }

        //==========
        // Operators

        handler this = temp_ref[SrdRef[T]] this.assign(value);

        handler this = temp_ref[WkRef[T]] this.assign(value);

        handler this~cast[ref[T]] return this.obj;
    };


    //==========================================================================
    // WkRef
    // Weak Reference
    type WkRef [T: type] {
        //=================
        // Member Variables

        def refCounter: ref[RefCounter];
        @injection def obj: ref[T];

        //===============
        // Initialization

        handler this~init() this._init();

        handler this~init(r: temp_ref[SrdRef[T]]) {
            this._init();
            this.assign(r);
        };

        handler this~init(r: temp_ref[WkRef[T]]) {
            this._init();
            this.assign(r);
        };

        handler this~init(c: ref[RefCounter], r: ref[T]) {
            this._init();
            this.assign(c, r);
        };

        //=================
        // Member Functions

        func _init {
            this.refCounter~ptr = 0;
            this.obj~ptr = 0;
        };

        func release {
            this._init();
        };

        func assign (r: ref[WkRef[T]]) {
            this.refCounter~ptr = r.refCounter~ptr;
            this.obj~ptr = r.obj~ptr;
        };

        func assign (r: ref[SrdRef[T]]) {
            this.refCounter~ptr = r.refCounter~ptr;
            this.obj~ptr = r.obj~ptr;
        };

        func assign (c: ref[RefCounter], r: ref[T]) {
            this.refCounter~ptr = c~ptr;
            this.obj~ptr = r~ptr;
        };

        //==========
        // Operators

        handler this = temp_ref[SrdRef[T]] this.assign(value);

        handler this = temp_ref[WkRef[T]] this.assign(value);

        handler this~cast[ref[T]] return this.obj;
    };


    //==========================================================================
    // UnqRef
    // Unique Reference
    type UnqRef [T: type] {
        //=================
        // Member Variables

        @injection def obj: ref[T];

        //===============
        // Initialization

        handler this~init() this.obj~ptr = 0;

        handler this~init(r: ptr[T]) this.obj~ptr = r;

        handler this~terminate() this.release();

        func construct {
            this.release();
            this.obj~ptr = Memory.alloc(T~size)~cast[ptr[T]];
            this.obj~init();
        };

        func release {
            if this.obj~ptr != 0 {
                this.obj~terminate();
                Memory.free(this.obj~ptr);
                this.obj~ptr = 0;
            }
        };

        //==========
        // Operators

        handler this = ptr[T] {
            this.release();
            this.obj~ptr = value;
        };

        handler this~cast[ref[T]] return this.obj;

        handler this~cast[ptr[T]] return this.obj~ptr;
    };
};
