@merge def Gtk: module
{
  def Bin: type
  {
    def container: Container;
    
    @shared def getChild: @expname[gtk_bin_get_child] function (bin: ptr[Bin]) => ptr[Widget];
  };

  def Box: type
  {
    def container: Container;

    @shared def new: @expname[gtk_box_new] function (orientation: Int, spacing: Int) => ptr[Box];
    @shared def packStart: @expname[gtk_box_pack_start] function (
      box: ptr[Box], child: ptr[Widget], expand: Bool, fill: Bool, padding: Word
    );
    @shared def packEnd: @expname[gtk_box_pack_end] function (
      box: ptr[Box], child: ptr[Widget], expand: Bool, fill: Bool, padding: Word
    );
  };

  def ButtonBox: type
  {
    def box: Box;

    @shared def new: @expname[gtk_button_box_new] function (orientation: Int) => ptr[ButtonBox];
    @shared def setLayout: @expname[gtk_button_box_set_layout] function (widget: ptr[ButtonBox], style: Int);
  };

  def Paned: type
  {
    def container: Container;
    
    @shared def new: @expname[gtk_paned_new] function (orientation: Int) => ptr[Paned];
    @shared def pack1: @expname[gtk_paned_pack1] function (paned: ptr[Paned], widget: ptr[Widget], resize: Bool, shrink: Bool);
    @shared def pack2: @expname[gtk_paned_pack2] function (paned: ptr[Paned], widget: ptr[Widget], resize: Bool, shrink: Bool);
    @shared def setPosition: @expname[gtk_paned_set_position] function (paned: ptr[Paned], position: Int);
    @shared def getPosition: @expname[gtk_paned_get_position] function (paned: ptr[Paned]) => Int;
  };

  def Stack: type
  {
    def container: Container;
    
    @shared def new: @expname[gtk_stack_new] function () => ptr[Stack];
  };

  def StackSwitcher: type
  {
    def box: Box;
    
    @shared def new: @expname[gtk_stack_switcher_new] function () => ptr[StackSwitcher];
    @shared def setStack: @expname[gtk_stack_switcher_set_stack] function (
      stackSwitcher: ptr[StackSwitcher], stack: ptr[Stack]
    );
  };

  def ListBox: type
  {
    def container: Container;
    
    @shared def new: @expname[gtk_list_box_new] function () => ptr[ListBox];
    @shared def prepend: @expname[gtk_list_box_prepend] function (box: ptr[ListBox], child: ptr[Widget]);
    @shared def insert: @expname[gtk_list_box_insert] function (box: ptr[ListBox], child: ptr[Widget], position: Int);
    @shared def getSelectedRows: @expname[gtk_list_box_get_selected_rows] function (box: ptr[ListBox]) => ptr[Glib.List];
    @shared def setSelectionMode: @expname[gtk_list_box_set_selection_mode] function (box: ptr[ListBox], mode: Int);
  };

  def Button: type
  {
    def container: Bin;

    @shared def newWithLabel: @expname[gtk_button_new_with_label] function (label: ptr[Char]) => ptr[Button];
  };

  def ToggleButton: type
  {
    def button: Button;

    @shared def new: @expname[gtk_toggle_button_new_with_label] function (label: ptr[Char]) => ptr[ToggleButton];
    @shared def setActive: @expname[gtk_toggle_button_set_active] function (button: ptr[ToggleButton], active: Bool);
    @shared def getActive: @expname[gtk_toggle_button_get_active] function (button: ptr[ToggleButton]) => Bool;
  };

  def CheckButton: type
  {
    def button: ToggleButton;
    
    @shared def new: @expname[gtk_check_button_new_with_label] function (label: ptr[Char]) => ptr[CheckButton];
  };

  def MenuButton: type
  {
    def button: ToggleButton;
    
    @shared def new: @expname[gtk_menu_button_new] function () => ptr[MenuButton];
    @shared def setPopup: @expname[gtk_menu_button_set_popup] function (button: ptr[MenuButton], widget: ptr[Widget]);
  };

  def MenuShell: type
  {
    def container: Container;
    
    @shared def append: @expname[gtk_menu_shell_append] function (menuShell: ptr[MenuShell], child: ptr[Widget]);
    @shared def prepend: @expname[gtk_menu_shell_prepend] function (menuShell: ptr[MenuShell], child: ptr[Widget]);
    @shared def insert: @expname[gtk_menu_shell_insert] function (menuShel: ptr[MenuShell], child: ptr[Widget], pos: Int);
  };

  def Menu: type
  {
    def menuShell: MenuShell;

    @shared def new: @expname[gtk_menu_new] function () => ptr[Menu];
  };

  def MenuItem: type
  {
    def bin: Bin;
    
    @shared def new: @expname[gtk_menu_item_new_with_label] function (label: ptr[Char]) => ptr[MenuItem];
  };

  def Image: type
  {
    def widget: Widget;
    
    @shared def new: @expname[gtk_image_new_from_file] function (filename: ptr[Char]) => ptr[Image];
    @shared def setPixelSize: @expname[gtk_image_set_pixel_size] function (image: ptr[Image], size: Int);
  };

  def Label: type
  {
    def widget: Widget;

    @shared def new: @expname[gtk_label_new] function (str: ptr[Char]) => ptr[Label];
    @shared def setText: @expname[gtk_label_set_text] function (label: ptr[Label], text: ptr[Char]);
    @shared def getText: @expname[gtk_label_get_text] function (label: ptr[Label]) => ptr[Char];
  };

  def Entry: type
  {
    def widget: Widget;
    
    @shared def new: @expname[gtk_entry_new] function () => ptr[Entry];
    @shared def setText: @expname[gtk_entry_set_text] function (entry: ptr[Entry], text: ptr[Char]);
    @shared def getText: @expname[gtk_entry_get_text] function (entry: ptr[Entry]) => ptr[Char];
    @shared def getTextLength: @expname[gtk_entry_get_text_length] function (entry: ptr[Entry]) => Int[16];
    @shared def setVisibility: @expname[gtk_entry_set_visibility] function (entry: ptr[Entry], visible: Bool);
    @shared def setInvisibleChar: @expname[gtk_entry_set_invisible_char] function (entry: ptr[Entry], chr: Int[32]);
    @shared def setWidthChars: @expname[gtk_entry_set_width_chars] function (entry: ptr[Entry], nchars: Int);
    @shared def setHasFrame: @expname[gtk_entry_set_has_frame] function (entry: ptr[Entry], hasFrame: Bool);
    @shared def setAlignment: @expname[gtk_entry_set_alignment] function (entry: ptr[Entry], xalign: Float);
    @shared def setPlaceholderText: @expname[gtk_entry_set_placeholder_text] function (entry: ptr[Entry], text: ptr[Char]);
  };

  def TextView: type
  {
    def container: Container;
    
    @shared def new: @expname[gtk_text_view_new_with_buffer] function (buf: ptr[TextBuffer]) => ptr[TextView];
    @shared def setWrapMode: @expname[gtk_text_view_set_wrap_mode] function (textView: ptr[TextView], mode: Int);
    @shared def setEditable: @expname[gtk_text_view_set_editable] function (textView: ptr[TextView], setting: Bool);
    @shared def setCursorVisible: @expname[gtk_text_view_set_cursor_visible] function (textView: ptr[TextView], setting: Bool);
    @shared def setJustification: @expname[gtk_text_view_set_justification] function (textView: ptr[TextView], justification: Int);
  };

  def HeaderBar: type
  {
    def container: Container;
    
    @shared def new: @expname[gtk_header_bar_new] function () => ptr[HeaderBar];
    @shared def setTitle: @expname[gtk_header_bar_set_title] function (bar: ptr[HeaderBar], title: ptr[Char]);
    @shared def setSubtitle: @expname[gtk_header_bar_set_subtitle] function (bar: ptr[HeaderBar], subtitle: ptr[Char]);
    @shared def setCustomTitle: @expname[gtk_header_bar_set_custom_title] function (bar: ptr[HeaderBar], widget: ptr[Widget]);
    @shared def packStart: @expname[gtk_header_bar_pack_start] function (bar: ptr[HeaderBar], widget: ptr[Widget]);
    @shared def packEnd: @expname[gtk_header_bar_pack_end] function (bar: ptr[HeaderBar], widget: ptr[Widget]);
    @shared def setShowCloseButton: @expname[gtk_header_bar_set_show_close_button] function (bar: ptr[HeaderBar], setting: Bool);
  };
};

