import "Srl/Console.alusus";
import "Srl/System.alusus";
import "Srl/String.alusus";
import "Srl/Net.alusus";
import "Srl/Fs.alusus";
import "Zip.alusus";

@merge module Apm
{
  use Srl;
  def fileName: array[Char, 250];
  def moduleName: array[Char, 250];
  def moduleAuthor: array[Char, 250];
  def moduleReleaseTag: array[Char, 250];
  def globalPackageName: ptr[array[Char]];
  def localPackageName: ptr[array[Char]];

  func importFile(packageName: ptr[array[Char]], requestedFile: ptr[array[Char]]): bool
  {
    def homeDir: ptr[array[Char]] = System.getEnv("HOME")~cast[ptr[array[Char]]];

    if (String.findChar(packageName,'@') != 0){
      String.scan(packageName, "%[^/]/%[^@]@%s", moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr);
    } else {
      String.scan(packageName, "%[^/]/%s", moduleAuthor~ptr, moduleName~ptr);
    };

    if requestedFile == 0 {
      String.assign(fileName~ptr, "%s.alusus", moduleName~ptr);
    } else {
      String.assign(fileName~ptr, requestedFile);
    };

    def newSize: Int =
      String.getLength(homeDir) +
      String.getLength(packageName) +
      String.getLength(fileName~ptr) +
      String.getLength(moduleName~ptr);
    globalPackageName = Memory.alloc(newSize)~cast[ptr[array[Char]]];
    localPackageName = Memory.alloc(newSize)~cast[ptr[array[Char]]];
    String.assign(globalPackageName, "%s/.apm/%s/%s", homeDir, moduleName~ptr, fileName~ptr);
    String.assign(localPackageName, ".apm/%s/%s", moduleName~ptr, fileName~ptr);

    if Fs.exists(localPackageName) {
      Core.importFile(localPackageName);
    } else if Fs.exists(globalPackageName) {
      Core.importFile(globalPackageName);
    } else {
      installRelease(packageName, 1, 0);
      Core.importFile(globalPackageName);
    };

    Memory.free(globalPackageName);
    Memory.free(localPackageName);

    return 1;
  };

  func importFile(packageName: ptr[array[Char]]): bool
  {
    return importFile(packageName, 0);
  };

  func installRelease(package: ptr[array[Char]], global: bool, logs: bool): Void
  {
    def result: ptr[array[Char]];
    def size: Int;
    def useLatestRelease: Bool;

    if (String.findChar(package,'@') != 0) {
      String.scan(package, "%[^/]/%[^@]@%s", moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr);
      useLatestRelease = 0;
    } else {
      String.scan(package, "%[^/]/%s", moduleAuthor~ptr, moduleName~ptr);
      useLatestRelease = 1;
    };

    def requestUrl: array[Char, 500];
    String.assign(
      requestUrl~ptr, "https://api.github.com/repos/%s/%s/releases/latest", moduleAuthor~ptr, moduleName~ptr
    );
    if logs {
      Console.print(I18n.fetchingInfo, Console.Style.fgBlue(), moduleName~ptr, requestUrl~ptr);
    };

    if Net.get(requestUrl~ptr, result~ptr, size~ptr) {
      callbackWithPackageInfo(result, size, global, useLatestRelease, logs);
    } else {
      if logs {
        Console.print(I18n.fetchFailed, Console.Style.fgRed());
      };
    };

    Memory.free(result);
  };

  func callbackWithPackageInfo (pkgInfo: ptr[array[Char]], size: Int, global: bool, useLatestRelease: bool, logs: bool)
  {
    def matches: ptr[String.RegexMatches] =
      String.regex("https://github.com/([^/]*)/([^/].*)/releases/tag/([^\"]*)\",", pkgInfo, 1);
    if matches~cnt.count == 4 {
      String.assign(moduleAuthor~ptr, "%s", matches~cnt.matches(1)~ptr);
      String.assign(moduleName~ptr, "%s", matches~cnt.matches(2)~ptr);
      if useLatestRelease {
        String.assign(moduleReleaseTag~ptr, "%s", matches~cnt.matches(3)~ptr);
      };
      downloadModule(moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr, global, logs);
      if logs {
        Console.print(I18n.fetchSuccessful, Console.Style.fgBlue());
      };
    } else if logs {
      Console.print(I18n.tagNotFound, Console.Style.fgRed());
      Console.print(I18n.fetchFailed, Console.Style.fgRed());
    };
    Memory.free(matches);
  };

  func downloadModule(
    moduleAuthor: ptr[array[Char]], moduleName: ptr[array[Char]], moduleReleaseTag: ptr[array[Char]], global: bool,
    logs: bool
  ): Bool {
    def downloadLink: array[Char, 100];
    def folderInTempDirectory: array[Char, 16000];
    def outToAPMModulesDirectory: array[Char, 16000];
    def dirOfAPMModulesDirectory: array[Char, 16000];
    def execCopyCommand: array[Char, 16000];
    def homeDir: ptr[array[Char]] = System.getEnv("HOME")~cast[ptr[array[Char]]];

    if (global){
      String.assign(folderInTempDirectory~ptr, "/tmp/temp_zip/%s-%s", moduleName, moduleReleaseTag);
      String.assign(outToAPMModulesDirectory~ptr, "%s/.apm/%s", homeDir, moduleName);
      String.assign(dirOfAPMModulesDirectory~ptr, "%s/.apm", homeDir);
    } else {
      String.assign(folderInTempDirectory~ptr, "/tmp/temp_zip/%s-%s", moduleName, moduleReleaseTag);
      String.assign(outToAPMModulesDirectory~ptr, "./.apm/%s", moduleName);
      String.assign(dirOfAPMModulesDirectory~ptr, ".apm");
    };

    String.assign(execCopyCommand~ptr, "cp -rf %s %s", folderInTempDirectory~ptr, outToAPMModulesDirectory~ptr);
    String.assign(
      downloadLink~ptr, "https://github.com/%s/%s/archive/%s.zip", moduleAuthor, moduleName, moduleReleaseTag
    );

    if (Fs.exists(outToAPMModulesDirectory~ptr)){
      if logs {
        Console.print(I18n.pkgAlreadyInstalled, Console.Style.fgRed(), outToAPMModulesDirectory~ptr);
      };

      return 0;
    };

    if logs {
      Console.print(I18n.installingPkg, Console.Style.fgBlue(), moduleName, moduleReleaseTag);
      Console.print(I18n.pkgRequest, Console.Style.fgBlue(), downloadLink~ptr);
      Console.print(I18n.downloadingPkg, Console.Style.fgYellow(), downloadLink~ptr, "/tmp/temp.zip");
    };

    if Net.get(downloadLink~ptr, "/tmp/temp.zip") {
      if logs {
        Console.print(I18n.downloadedPkg, Console.Style.fgBlue());
        Console.print(I18n.unzipToTmp, Console.Style.fgBlue(), "temp.zip", "/tmp/temp_zip/");
      };

      if Zip.extractFromFile("/tmp/temp.zip", "/tmp/temp_zip", onFileExtracted~ptr, logs~ptr) == 0 {
        if logs {
          Console.print(I18n.archiveExtracted, Console.Style.fgBlue());
        };

        if(Fs.exists(dirOfAPMModulesDirectory~ptr) || Fs.makeDir(dirOfAPMModulesDirectory~ptr)){
          if logs {
            Console.print(I18n.created, Console.Style.fgBlue(), dirOfAPMModulesDirectory~ptr);
            Console.print(I18n.movePkg, Console.Style.fgBlue(), dirOfAPMModulesDirectory~ptr);
            Console.print(
              I18n.copyPkg, Console.Style.fgYellow(), folderInTempDirectory~ptr, outToAPMModulesDirectory~ptr
            );
          };

          if(System.exec(execCopyCommand~ptr) == 0){
            if logs {
              Console.print(I18n.pkgMoved, Console.Style.fgGreen(), dirOfAPMModulesDirectory~ptr);
              Console.print(I18n.pkgInstalled, Console.Style.fgGreen(), moduleName);
            };
          } else {
            if logs {
              Console.print(I18n.cannotMovePkg, Console.Style.fgRed(), dirOfAPMModulesDirectory~ptr);
            };
          };
        } else {
          if logs {
            Console.print(I18n.cannotCreatePkg, Console.Style.fgRed(), dirOfAPMModulesDirectory~ptr);
          };
        };
      } else {
        if logs {
          Console.print(I18n.cannotExtract, Console.Style.fgRed(), "temp.zip");
        };
      };
    } else {
      if logs {
        Console.print(I18n.cannotGet, Console.Style.fgRed(), downloadLink~ptr);
      };
    };

    return 0;
  };

  func onFileExtracted(fname: ptr[array[Char]], logs: ptr): Int
  {
    if(logs~cast[ptr[bool]]~cnt == 1){
      Console.print(I18n.fileExtracted, Console.Style.fgGreen(), fname);
    };
    return 0;
  };
};
