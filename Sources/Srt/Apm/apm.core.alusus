/**
 * @file Apm/apm.core.alusus
 *
 * @copyright Copyright (C) 2023 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "Srl/Console.alusus";
import "Srl/System.alusus";
import "Srl/String.alusus";
import "Srl/Array.alusus";
import "Srl/Regex.alusus";
import "Srl/Net.alusus";
import "Srl/Fs.alusus";
import "Zip.alusus";

@merge module Apm
{
  use Srl;
  def fileName: array[Char, 250];
  def moduleName: array[Char, 250];
  def moduleAuthor: array[Char, 250];
  def moduleReleaseTag: array[Char, 250];

  func importFile(packageName: ptr[array[Char]], requestedFileCount: Int, requestedFiles: ...ptr[array[Char]]): bool {
    def homeDir: ptr[array[Char]] = System.getEnv("HOME")~cast[ptr[array[Char]]];

    if (String.find(packageName,'@') != 0){
      String.scan(packageName, "%[^/]/%[^@]@%s", moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr);
    } else {
      String.scan(packageName, "%[^/]/%s", moduleAuthor~ptr, moduleName~ptr);
    };

    if requestedFileCount == 0 {
      String.assign(fileName~ptr, "%s.alusus", moduleName~ptr);
    } else {
      String.assign(fileName~ptr, requestedFiles~next_arg[ptr[array[Char]]]);
      --requestedFileCount;
    };

    def buffer: array[Char, 1024];
    def filePos: Int;
    // First try local cache.
    String.assign(buffer~ptr, ".apm/%s/", packageName);
    filePos = String.getLength(buffer~ptr);
    String.copy(buffer(filePos)~ptr, fileName~ptr);
    if !Fs.exists(buffer~ptr) {
      // Not found locally, try the global cache.
      String.assign(buffer~ptr, "%s/.apm/%s/", homeDir, packageName);
      filePos = String.getLength(buffer~ptr);
      String.copy(buffer(filePos)~ptr, fileName~ptr);
      if !Fs.exists(buffer~ptr) {
        installRelease(packageName, 1, 0);
      }
    }
    Core.importFile(buffer~ptr);

    // Import any extra files
    while requestedFileCount-- > 0 {
      String.copy(buffer(filePos)~ptr, requestedFiles~next_arg[ptr[array[Char]]]);
      Core.importFile(buffer~ptr);
    }

    return 1;
  };

  func importFile(packageName: ptr[array[Char]], requestedFile: ptr[array[Char]]): bool {
    return importFile(packageName, { requestedFile });
  }

  func importFile(packageName: ptr[array[Char]]): bool
  {
    return importFile(packageName, 0);
  };

  func installRelease(package: ptr[array[Char]], global: bool, logs: bool): Void
  {
    def result: ptr[array[Char]];
    def size: Int;
    def useLatestRelease: Bool;

    if (String.find(package,'@') != 0) {
      String.scan(package, "%[^/]/%[^@]@%s", moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr);
      useLatestRelease = 0;
    } else {
      String.scan(package, "%[^/]/%s", moduleAuthor~ptr, moduleName~ptr);
      useLatestRelease = 1;
    };

    def requestUrl: array[Char, 500];
    String.assign(
      requestUrl~ptr, "https://api.github.com/repos/%s/%s/releases/latest", moduleAuthor~ptr, moduleName~ptr
    );
    if logs {
      Console.print(I18n.fetchingInfo, Console.Style.FG_BLUE, moduleName~ptr, requestUrl~ptr);
    };

    if Net.get(requestUrl~ptr, result~ptr, size~ptr) {
      callbackWithPackageInfo(result, size, global, useLatestRelease, logs);
    } else {
      if logs {
        Console.print(I18n.fetchFailed, Console.Style.FG_RED);
      };
    };

    Memory.free(result);
  };

  func callbackWithPackageInfo (pkgInfo: ptr[array[Char]], size: Int, global: bool, useLatestRelease: bool, logs: bool)
  {
    def matches: Array[String] =
      Regex.match("https://github.com/([^/]*)/([^/].*)/releases/tag/([^\"]*)\",", pkgInfo, 1);
    if matches.getLength() == 4 {
      String.assign(moduleAuthor~ptr, "%s", matches(1).buf);
      String.assign(moduleName~ptr, "%s", matches(2).buf);
      if useLatestRelease {
        String.assign(moduleReleaseTag~ptr, "%s", matches(3).buf);
      };
      if downloadModule(moduleAuthor~ptr, moduleName~ptr, moduleReleaseTag~ptr, global, useLatestRelease, logs) {
        if logs Console.print(I18n.fetchSuccessful, Console.Style.FG_BLUE);
      }
    } else if logs {
      Console.print(I18n.tagNotFound, Console.Style.FG_RED);
      Console.print(I18n.fetchFailed, Console.Style.FG_RED);
    };
  };

  func downloadModule(
    moduleAuthor: ptr[array[Char]], moduleName: ptr[array[Char]], moduleReleaseTag: ptr[array[Char]], global: bool,
    useLatestRelease: bool, logs: bool
  ): Bool {
    def downloadLink: array[Char, 100];
    def folderInTempDirectory: array[Char, 1600];
    def modulePath: array[Char, 1600];
    def authorPath: array[Char, 1600];
    def symLinkPath: array[Char, 1600];
    def dirOfAPMModulesDirectory: array[Char, 1600];
    def execCreateDirCommand: array[Char, 1600];
    def execCopyCommand: array[Char, 1600];
    def execSymLinkCommand: array[Char, 1600];
    def homeDir: ptr[array[Char]] = System.getEnv("HOME")~cast[ptr[array[Char]]];

    if (global){
      String.assign(folderInTempDirectory~ptr, "/tmp/temp_zip/%s-%s", moduleName, moduleReleaseTag);
      String.assign(modulePath~ptr, "%s/.apm/%s/%s@%s", homeDir, moduleAuthor, moduleName, moduleReleaseTag);
      String.assign(authorPath~ptr, "%s/.apm/%s", homeDir, moduleAuthor);
      String.assign(dirOfAPMModulesDirectory~ptr, "%s/.apm", homeDir);
    } else {
      String.assign(folderInTempDirectory~ptr, "/tmp/temp_zip/%s-%s", moduleName, moduleReleaseTag);
      String.assign(modulePath~ptr, "./.apm/%s/%s@%s", moduleAuthor, moduleName, moduleReleaseTag);
      String.assign(authorPath~ptr, "./.apm/%s", moduleAuthor);
      String.assign(dirOfAPMModulesDirectory~ptr, ".apm");
    };
    String.assign(symLinkPath~ptr, "%s/%s", authorPath~ptr, moduleName);

    String.assign(execCreateDirCommand~ptr, "mkdir -p %s", authorPath~ptr);
    String.assign(execCopyCommand~ptr, "cp -rf %s %s", folderInTempDirectory~ptr, modulePath~ptr);
    String.assign(
      execSymLinkCommand~ptr, "ln -s ./%s@%s %s", moduleName, moduleReleaseTag, symLinkPath~ptr
    );
    String.assign(
      downloadLink~ptr, "https://github.com/%s/%s/archive/%s.zip", moduleAuthor, moduleName, moduleReleaseTag
    );


    if (Fs.exists(modulePath~ptr)){
      if logs {
        Console.print(I18n.pkgAlreadyInstalled, Console.Style.FG_RED, modulePath~ptr);
      };

      return 0;
    };

    if logs {
      Console.print(I18n.installingPkg, Console.Style.FG_BLUE, moduleName, moduleReleaseTag);
      Console.print(I18n.pkgRequest, Console.Style.FG_BLUE, downloadLink~ptr);
      Console.print(I18n.downloadingPkg, Console.Style.FG_YELLOW, downloadLink~ptr, "/tmp/temp.zip");
    };

    if Net.get(downloadLink~ptr, "/tmp/temp.zip") {
      if logs {
        Console.print(I18n.downloadedPkg, Console.Style.FG_BLUE);
        Console.print(I18n.unzipToTmp, Console.Style.FG_BLUE, "temp.zip", "/tmp/temp_zip/");
      };

      if Zip.extractFromFile("/tmp/temp.zip", "/tmp/temp_zip", onFileExtracted~ptr, logs~ptr) == 0 {
        if logs {
          Console.print(I18n.archiveExtracted, Console.Style.FG_BLUE);
        };

        if(Fs.exists(dirOfAPMModulesDirectory~ptr) || Fs.makeDir(dirOfAPMModulesDirectory~ptr)){
          if logs {
            Console.print(I18n.created, Console.Style.FG_BLUE, dirOfAPMModulesDirectory~ptr);
            Console.print(I18n.movePkg, Console.Style.FG_BLUE, dirOfAPMModulesDirectory~ptr);
            Console.print(
              I18n.copyPkg, Console.Style.FG_YELLOW, folderInTempDirectory~ptr, modulePath~ptr
            );
          };

          System.exec(execCreateDirCommand~ptr);
          if(System.exec(execCopyCommand~ptr) == 0){
            if logs Console.print(I18n.pkgMoved, Console.Style.FG_GREEN, dirOfAPMModulesDirectory~ptr);
            if useLatestRelease {
              if(System.exec(execSymLinkCommand~ptr) == 0){
                if logs {
                  Console.print(I18n.symLinkCreated, Console.Style.FG_GREEN, symLinkPath~ptr);
                  Console.print(I18n.pkgInstalled, Console.Style.FG_GREEN, moduleName);
                };
                return 1;
              } else {
                if logs Console.print(I18n.cannotCreateSymLink, Console.Style.FG_RED, symLinkPath~ptr);
              };
            } else {
              Console.print(I18n.pkgInstalled, Console.Style.FG_GREEN, moduleName);
            }
          } else {
            if logs {
              Console.print(I18n.cannotMovePkg, Console.Style.FG_RED, dirOfAPMModulesDirectory~ptr);
            };
          };
        } else {
          if logs {
            Console.print(I18n.cannotCreatePkg, Console.Style.FG_RED, dirOfAPMModulesDirectory~ptr);
          };
        };
      } else {
        if logs {
          Console.print(I18n.cannotExtract, Console.Style.FG_RED, "temp.zip");
        };
      };
    } else {
      if logs {
        Console.print(I18n.cannotGet, Console.Style.FG_RED, downloadLink~ptr);
      };
    };

    return 0;
  };

  func onFileExtracted(fname: ptr[array[Char]], logs: ptr): Int
  {
    if(logs~cast[ptr[bool]]~cnt == 1){
      Console.print(I18n.fileExtracted, Console.Style.FG_GREEN, fname);
    };
    return 0;
  };
};
