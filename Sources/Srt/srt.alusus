import "libalusus_spp.so";

def Char: alias Word[8];

def Srt : module
{
  def Memory: module
  {
    def alloc: @expname[malloc] function (size: Int[64]) => ptr[Void];
    def realloc: @expname[realloc] function (p: ptr[Void], newSize: Int[64]) => ptr[Void];
    def allocAligned: @expname[aligned_alloc] function (alignment: Int[64], size: Int[64]) => ptr[Void];
    def free: @expname[free] function (pointer: ptr[Void]);
    def copy: @expname[memcpy] function (dest: ptr[Void], src: ptr[Void], n: Int[64]) => ptr[Void];
    def compare: @expname[memcmp] function (s1: ptr[Void], s2: ptr[Void], n: Int[64]) => Int;
    def set: @expname[memset] function (s: ptr[Void], c: Int, n: Int[64]) => ptr[Void];
  };

  def String: module
  {
    def findChar: @expname[strchr] function (s: ptr[Char], c: Int) => ptr[Char];
    def findChar: @expname[memchr] function (s: ptr[Void], c: Int, n: Int[64]) => ptr[Void];
    def findLastChar: @expname[strrchr] function (s: ptr[Char], c: Int) => ptr[Char];
    def findString: @expname[strstr] function (haystack: ptr[Char], needle: ptr[Char]) => ptr[Char];
    def compare: @expname[strcmp] function (s1: ptr[Char], s2: ptr[Char]) => Int;
    def compare: @expname[strncmp] function (s1: ptr[Char], s2: ptr[Char], n: Int[64]) => Int;
    def copy: @expname[strcpy] function (dest: ptr[Char], src: ptr[Char]) => ptr[Void];
    def copy: @expname[strncpy] function (dest: ptr[Char], src: ptr[Char], n: Int[64]) => ptr[Void];
    def concat: @expname[strcat] function (dest: ptr[Char], src: ptr[Char]) => ptr[Char];
    def concat: @expname[strncat] function (dest: ptr[Char], src: ptr[Char], n: Int[64]) => ptr[Char];
    def getLength: @expname[strlen] function (s: ptr[Char]) => Int[64];
  };

  def File: module
  {
    def openFile: @expname[fopen] function (filename: ptr[Word[8]], mode: ptr[Word[8]]) => ptr[Void];
    def closeFile: @expname[fclose] function (file: ptr[Void]) => Int[32];
    def printToFile: @expname[fprintf] function (file: ptr[Void], format: ptr[Word[8]], args: ...any) => Int[32];
    def scanFromFile: @expname[fscanf] function (file: ptr[Void], format: ptr[Word[8]], args: ...any) => Int[32];
    def writeToFile: @expname[fwrite] function
      (content: ptr[Void], size: Int[32], count:Int[32], file: ptr[Void]) => Int[32];
    def readFromFile: @expname[fread] function
      (content: ptr[Void], size: Int[32], count:Int[32], file: ptr[Void]) => Int[32];
  };

  def Console: module
  {
    def getChar: @expname[getchar] function () => Int[32];
    def putChar: @expname[putchar] function (character: Int[32]) => Int[32];

    def print: @expname[printf] function (format: ptr[Word[8]], args: ...any) => Int[32];
    def print: function (i: Int[64])
    {
      print("%lld", i);
    };
    def print: function (f: Float[64])
    {
      print("%f", f);
    };
    def print: function (f: Float[64], d: Int)
    {
      print("%.*f", d, f);
    };

    def scan: @expname[scanf] function (format: ptr[Word[8]], args: ...any) => Int[32];
    def getInt: function () => Int
    {
      def i: Int;
      i = 0;
      scan("%d", i~ptr);
      return i;
    };
    def getFloat: function () => Float
    {
      def i: Float;
      i = 0;
      scan("%f", i~ptr);
      return i;
    };
    def getString: function (str: ptr[array[Char]], count: Word) => Void
    {
      def i: Word;
      def c: Char;
      i = 0;
      c = 0;
      while c != '\n' {
        c = getChar();
        if c != '\n' && i < count - 1 {
          str~cnt(i) = c;
          ++i;
        };
      };
      str~cnt(i) = 0;
    };
  };

  def Math: module
  {
    def abs: @expname[abs] function (n: Int[32]) => Int[32];
    def abs: @expname[llabs] function (n: Int[64]) => Int[64];
    def abs: @expname[fabsf] function (n: Float[32]) => Float[32];
    def abs: @expname[fabs] function (n: Float[64]) => Float[64];

    def mod: @expname[fmodf] function (x: Float[32], y: Float[32]) => Float[32];
    def mod: @expname[fmod] function (x: Float[64], y: Float[64]) => Float[64];

    def exp: @expname[expf] function (x: Float[32]) => Float[32];
    def exp: @expname[exp] function (x: Float[64]) => Float[64];

    def exp2: @expname[exp2f] function (x: Float[32]) => Float[32];
    def exp2: @expname[exp2] function (x: Float[64]) => Float[64];

    def log: @expname[logf] function (x: Float[32]) => Float[32];
    def log: @expname[log] function (x: Float[64]) => Float[64];

    def log2: @expname[log2f] function (x: Float[32]) => Float[32];
    def log2: @expname[log2] function (x: Float[64]) => Float[64];

    def log10: @expname[log10f] function (x: Float[32]) => Float[32];
    def log10: @expname[log10] function (x: Float[64]) => Float[64];

    def sqrt: @expname[sqrtf] function (x: Float[32]) => Float[32];
    def sqrt: @expname[sqrt] function (x: Float[64]) => Float[64];

    def cbrt: @expname[cbrtf] function (x: Float[32]) => Float[32];
    def cbrt: @expname[cbrt] function (x: Float[64]) => Float[64];

    def pow: @expname[powf] function (b: Float[32], e: Float[32]) => Float[32];
    def pow: @expname[pow] function (b: Float[64], e: Float[64]) => Float[64];

    def sin: @expname[sinf] function (x: Float[32]) => Float[32];
    def sin: @expname[sin] function (x: Float[64]) => Float[64];

    def asin: @expname[asinf] function (x: Float[32]) => Float[32];
    def asin: @expname[asin] function (x: Float[64]) => Float[64];

    def sinh: @expname[sinhf] function (x: Float[32]) => Float[32];
    def sinh: @expname[sinh] function (x: Float[64]) => Float[64];

    def asinh: @expname[asinhf] function (x: Float[32]) => Float[32];
    def asinh: @expname[asinh] function (x: Float[64]) => Float[64];

    def cos: @expname[cosf] function (x: Float[32]) => Float[32];
    def cos: @expname[cos] function (x: Float[64]) => Float[64];

    def acos: @expname[acosf] function (x: Float[32]) => Float[32];
    def acos: @expname[acos] function (x: Float[64]) => Float[64];

    def cosh: @expname[coshf] function (x: Float[32]) => Float[32];
    def cosh: @expname[cosh] function (x: Float[64]) => Float[64];

    def acosh: @expname[acoshf] function (x: Float[32]) => Float[32];
    def acosh: @expname[acosh] function (x: Float[64]) => Float[64];

    def tan: @expname[tanf] function (x: Float[32]) => Float[32];
    def tan: @expname[tan] function (x: Float[64]) => Float[64];

    def atan: @expname[atanf] function (x: Float[32]) => Float[32];
    def atan: @expname[atan] function (x: Float[64]) => Float[64];

    def atan2: @expname[atan2f] function (y: Float[32], x: Float[32]) => Float[32];
    def atan2: @expname[atan2] function (y: Float[64], x: Float[64]) => Float[64];

    def tanh: @expname[tanhf] function (x: Float[32]) => Float[32];
    def tanh: @expname[tanh] function (x: Float[64]) => Float[64];

    def atanh: @expname[atanhf] function (x: Float[32]) => Float[32];
    def atanh: @expname[atanh] function (x: Float[64]) => Float[64];

    def ceil: @expname[ceilf] function (x: Float[32]) => Float[32];
    def ceil: @expname[ceil] function (x: Float[64]) => Float[64];

    def floor: @expname[floorf] function (x: Float[32]) => Float[32];
    def floor: @expname[floor] function (x: Float[64]) => Float[64];

    def round: @expname[roundf] function (x: Float[32]) => Float[32];
    def round: @expname[round] function (x: Float[64]) => Float[64];

    def random: @expname[rand] function () => Int;
    def seedRandom: @expname[srand] function (s: Word);
  };
};
