/**
 * @file Core/Data.alusus
 * Interoperability definitions for the Core's data classes.
 *
 * @copyright Copyright (C) 2024 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "Basic";
import "Spp";
import "Srl/Map";
import "Srl/String";

@merge module Core {
    module Data {
        use Basic;

        class Node {
            @injection def tiObject: TiObject;
            def owner: ref[Node];

            handler this.isOwnedBy(obj: ref[TiObject]): Bool {
                def o: ref[Node](this.owner);
                while o~ptr != 0 && o~ptr != obj~ptr { o~no_deref = o.owner };
                return o~ptr == obj~ptr;
            }

            defTypeInfoGetter["alusus.org/Core/Core.Data.Node"];
        }

        module Ast {
            macro defTextAstType [name, uniqueName] {
                class name {
                    @injection def node: Node;
                    def binding: TiInterface;
                    def metaHaving: TiInterface;
                    def printable: TiInterface;
                    def value: TiStr;

                    preprocess {
                        use Srl;
                        def totalSize: ArchInt = getFromGlobalStorage(uniqueName)~cast[ptr[TypeInfo]]~cnt
                            .objectFactory.getSize();
                        def paddingSize: ArchInt = totalSize - Node~size - 3*TiInterface~size - TiStr~size;
                        Spp.astMgr.insertAst(
                            ast { def _data: array[Word[8], size] },
                            Map[String, ref[Core.Basic.TiObject]]().set(String("size"), TiInt(paddingSize))
                        );
                    }

                    handler this~init() {
                        getTypeInfo().objectFactory.initialize(this);
                    }
                    handler this~init(v: ptr[array[Char]]) {
                        getTypeInfo().objectFactory.initialize(this);
                        this.value = v;
                    }
                    handler this~terminate() {
                        getTypeInfo().objectFactory.terminate(this);
                        // We need to re-initialize value to avoid segfault caused by double termination of value when
                        // Alusus auto-destructor tries to destroy value which was already destroyed by the object
                        // factory.
                        this.value~init();
                    }

                    func create (v: ptr[array[Char]]): SrdRef[name] {
                        def r: SrdRef[name];
                        r.alloc()~init(v);
                        r.wkThis.assign(r.refCounter, r.tiObject);
                        return r;
                    }

                    defTypeInfoGetter[uniqueName];
                }
            }

            defTextAstType[Identifier, "alusus.org/Core/Core.Data.Ast.Identifier"];
            defTextAstType[IntegerLiteral, "alusus.org/Core/Core.Data.Ast.IntegerLiteral"];
            defTextAstType[FloatLiteral, "alusus.org/Core/Core.Data.Ast.FloatLiteral"];
            defTextAstType[CharLiteral, "alusus.org/Core/Core.Data.Ast.CharLiteral"];
            defTextAstType[StringLiteral, "alusus.org/Core/Core.Data.Ast.StringLiteral"];

            macro defAstType[name, uniqueName] {
                class name {
                    @injection def node: Core.Data.Node;

                    preprocess {
                        use Srl;
                        def factory: ref[Core.Basic.TiObjectFactory](
                            Core.Basic.getFromGlobalStorage(uniqueName)~cast[ptr[Core.Basic.TypeInfo]]~cnt.objectFactory
                        );
                        if factory~ptr != 0 {
                            def paddingSize: ArchInt = factory.getSize() - Core.Data.Node~size;
                            Spp.astMgr.insertAst(
                                ast { def _data: array[Word[8], size] },
                                Map[String, ref[Core.Basic.TiObject]]().set(String("size"), Core.Basic.TiInt(paddingSize))
                            );
                        }
                    }

                    handler this~init() {
                        getTypeInfo().objectFactory.initialize(this);
                    }
                    handler this~terminate() {
                        getTypeInfo().objectFactory.terminate(this);
                    }

                    Core.Basic.defTypeInfoGetter[uniqueName];
                }
            }

            defAstType[Alias, "alusus.org/Core/Core.Data.Ast.Alias"];
            defAstType[Bracket, "alusus.org/Core/Core.Data.Ast.Bracket"];
            defAstType[Bridge, "alusus.org/Core/Core.Data.Ast.Bridge"];
            defAstType[Definition, "alusus.org/Core/Core.Data.Ast.Definition"];
            defAstType[GenericCommand, "alusus.org/Core/Core.Data.Ast.GenericCommand"];
            defAstType[List, "alusus.org/Core/Core.Data.Ast.List"];
            defAstType[Map, "alusus.org/Core/Core.Data.Ast.Map"];
            defAstType[MergeList, "alusus.org/Core/Core.Data.Ast.MergeList"];
            defAstType[ParamPass, "alusus.org/Core/Core.Data.Ast.ParamPass"];
            defAstType[Scope, "alusus.org/Core/Core.Data.Ast.Scope"];
            defAstType[Token, "alusus.org/Core/Core.Data.Ast.Token"];
            defAstType[PrefixOperator, "alusus.org/Core/Core.Data.Ast.PrefixOperator"];
            defAstType[PostfixOperator, "alusus.org/Core/Core.Data.Ast.PostfixOperator"];
            defAstType[AssignmentOperator, "alusus.org/Core/Core.Data.Ast.AssignmentOperator"];
            defAstType[ComparisonOperator, "alusus.org/Core/Core.Data.Ast.ComparisonOperator"];
            defAstType[AdditionOperator, "alusus.org/Core/Core.Data.Ast.AdditionOperator"];
            defAstType[MultiplicationOperator, "alusus.org/Core/Core.Data.Ast.MultiplicationOperator"];
            defAstType[BitwiseOperator, "alusus.org/Core/Core.Data.Ast.BitwiseOperator"];
            defAstType[LogOperator, "alusus.org/Core/Core.Data.Ast.LogOperator"];
            defAstType[LinkOperator, "alusus.org/Core/Core.Data.Ast.LinkOperator"];
            defAstType[ConditionalOperator, "alusus.org/Core/Core.Data.Ast.ConditionalOperator"];
            defAstType[Passage, "alusus.org/Core/Core.Data.Ast.Passage"];
            addExtraContainerInitializer[Passage, "target", ref[TiObject]];
        }
    }
}
