/**
 * @file Core/Basic.alusus
 * Interoperability definitions for the Core's basic definitions.
 *
 * @copyright Copyright (C) 2021 Sarmad Khalid Abdullah
 *
 * @license This file is released under Alusus Public License, Version 1.0.
 * For details on usage and copying conditions read the full license in the
 * accompanying license file or at <https://alusus.org/license.html>.
 */
//==============================================================================

import "../Core";
import "Srl/refs";
import "Srl/String";

@merge module Core {
    module Basic {
        use Srl;

        @expname[getFromGlobalStorage]
        func getFromGlobalStorage (ptr[array[Word[8]]]): ptr;

        macro defTypeInfoGetter[typeName] {
            func getTypeInfo (): ref[Core.Basic.TypeInfo] {
                @shared def typeInfo: ref[Core.Basic.TypeInfo];
                if typeInfo~ptr == 0 {
                    typeInfo~ptr = Core.Basic.getFromGlobalStorage(typeName)~cast[ptr[Core.Basic.TypeInfo]];
                }
                return typeInfo;
            }
        }

        type TiObjectFactory {
            def createPlain: ptr[function ():ref[TiObject]];
            def createShared: ptr[function ():SrdRef[TiObject]];
            def initialize: ptr[function (ref[TiObject])];
            def terminate: ptr[function (ref[TiObject])];
            def getSize: ptr[function ():ArchInt];
        }

        type TypeInfo {
            def typeName: String;
            def typeNamespace: String;
            def packageName: String;
            def url: String;
            def uniqueName: String;
            def baseTypeInfo: ref[TypeInfo];
            def objectFactory: ref[TiObjectFactory];
        }

        type TiObject {
            def vtable: ptr;
            def wkThis: WkRef[this_type];

            @expname[TiObject_getMyTypeInfo]
            handler this.getMyTypeInfo (): ref[TypeInfo];

            @expname[TiObject_isDerivedFrom]
            handler this.isDerivedFrom (ref[TypeInfo]): Bool;

            @expname[TiObject_getInterface]
            handler this.getInterface (ref[TypeInfo]): ref[TiInterface];
        }

        type TiInterface {
            def vtable: ptr;

            @expname[TiInterface_getMyInterfaceInfo]
            handler this.getMyInterfaceInfo (): ref[TypeInfo];

            @expname[TiInterface_getTiObject]
            handler this.getTiObject (): ref[TiObject];
        }

        macro getInterface [obj, T] castRef[obj.getInterface(T.getTypeInfo()), T];
        macro isDerivedFrom [obj, T] obj.isDerivedFrom(T.getTypeInfo());

        macro dynCastRef [obj, T] ref[T]().{
            def self: ref[ref[T]](this);
            obj.{
                if this~ptr != 0 && this.isDerivedFrom(T.getTypeInfo())
                    self~deref~no_deref = castRef[this, T]
                else
                    self~deref~no_deref = nullRef[T];
            }
        };

        macro castSrdRef [r, T] SrdRef[T]().{
            def self: ref[SrdRef[T]](this);
            r.{
                self.assign(this.refCounter, castRef[this.obj, T]);
            }
        };

        macro dynCastSrdRef [r, T] SrdRef[T]().{
            def self: ref[SrdRef[T]](this);
            r.{
                if this.obj~ptr != 0 && this.obj.isDerivedFrom(T.getTypeInfo()) {
                    self.assign(this.refCounter, castRef[this.obj, T]);
                }
            }
        };

        macro defDynCastedRef [name, obj, T] {
            def name: ref[T];
            if obj~ptr != 0 && obj.isDerivedFrom(T.getTypeInfo())
                name~no_deref = castRef[obj, T]
            else
                name~ptr = 0;
        }

        macro newSrdObj [T] SrdRef[T]().{
            construct();
            wkThis.assign(this.refCounter, this.tiObject);
        };

        macro defTiBasicType [name, dataType, uniqueName] {
            type name {
                @injection def tiObject: TiObject;
                def value: dataType;
                handler this~init() {
                    getTypeInfo().objectFactory.initialize(this);
                }
                handler this~init(v: dataType) {
                    getTypeInfo().objectFactory.initialize(this);
                    this.value = v;
                }
                handler this~terminate() {
                    getTypeInfo().objectFactory.terminate(this);
                }
                handler this=dataType this.value = value;

                @shared func create (v: dataType): SrdRef[name] {
                    def r: SrdRef[name];
                    r.alloc()~init(v);
                    return r;
                }

                defTypeInfoGetter[uniqueName];
            }
        }

        macro addExtraInitializer [name, dataType] {
            @merge type name {
                handler this~init(v: dataType) {
                    getTypeInfo().objectFactory.initialize(this);
                    this.value = v;
                }
                handler this=dataType this.value = value;

                @shared func create (v: dataType): SrdRef[name] {
                    def r: SrdRef[name];
                    r.alloc()~init(v);
                    return r;
                }
            }
        }

        defTiBasicType[TiInt, Int, "alusus.org/Core/Core.Basic.TiNumber<alusus.org/Srl/Srl.Int,alusus.org/Core/Core.Basic.TiObject>"];
        defTiBasicType[TiWord, Word, "alusus.org/Core/Core.Basic.TiNumber<alusus.org/Srl/Srl.Word,alusus.org/Core/Core.Basic.TiObject>"];
        defTiBasicType[TiFloat, Float, "alusus.org/Core/Core.Basic.TiNumber<alusus.org/Srl/Srl.Float,alusus.org/Core/Core.Basic.TiObject>"];
        defTiBasicType[TiBool, Bool, "alusus.org/Core/Core.Basic.TiBoolBase<alusus.org/Core/Core.Basic.TiObject>"];
        defTiBasicType[TiStr, String, "alusus.org/Core/Core.Basic.TiStrBase<alusus.org/Core/Core.Basic.TiObject>"];
        addExtraInitializer[TiStr, ptr[array[Char]]];

        type Binding {
            @injection def tiInterface: TiInterface;

            @expname[Binding_setMemberByName]
            handler this.setMember (ptr[array[Char]], ref[TiObject]);

            @expname[Binding_setMemberByIndex]
            handler this.setMember (Int, ref[TiObject]);

            @expname[Binding_getMemberCount]
            handler this.getMemberCount ():Word;

            @expname[Binding_getMemberByName]
            handler this.getMember (ptr[array[Char]]):ref[TiObject];

            @expname[Binding_getMemberByIndex]
            handler this.getMember (Int):ref[TiObject];

            @expname[Binding_getMemberNeededTypeByName]
            handler this.getMemberNeededType (ptr[array[Char]]):ref[TypeInfo];

            @expname[Binding_getMemberNeededTypeByIndex]
            handler this.getMemberNeededType (Int):ref[TypeInfo];

            @expname[Binding_getMemberKey]
            handler this.getMemberKey (Int): Srl.String;

            @expname[Binding_findMemberIndex]
            handler this.findMemberIndex (ptr[array[Char]]): Int;

            defTypeInfoGetter["alusus.org/Core/Core.Basic.Binding"]
        }

        type Containing {
            @injection def tiInterface: TiInterface;

            @expname[Containing_setElement]
            handler this.setElement (Int, ref[TiObject]);

            @expname[Containing_getElementCount]
            handler this.getElementCount ():Word;

            @expname[Containing_getElement]
            handler this.getElement (Int):ref[TiObject];

            @expname[Containing_getElementNeededType]
            handler this.getElementNeededType (Int):ref[TypeInfo];

            defTypeInfoGetter["alusus.org/Core/Core.Basic.Containing<alusus.org/Core/Core.Basic.TiObject>"]
        }

        type DynamicContaining {
            @injection def containing: Containing;

            @expname[DynamicContaining_addElement]
            handler this.addElement (ref[TiObject]): Int;

            @expname[DynamicContaining_insertElement]
            handler this.insertElement (Int, ref[TiObject]);

            @expname[DynamicContaining_removeElement]
            handler this.removeElement (Int);

            @expname[DynamicContaining_getElementsNeededType]
            handler this.getElementsNeededType ():ref[TypeInfo];

            defTypeInfoGetter["alusus.org/Core/Core.Basic.DynamicContaining<alusus.org/Core/Core.Basic.TiObject>"]
        }

        type MapContaining {
            @injection def containing: Containing;

            @expname[MapContaining_setElement]
            handler this.setElement (ptr[array[Char]], ref[TiObject]): Int;

            @expname[MapContaining_getElement]
            handler this.getElement (ptr[array[Char]]): ref[TiObject];

            @expname[MapContaining_getElementNeededType]
            handler this.getElementNeededType (ptr[array[Char]]):ref[TypeInfo];

            @expname[MapContaining_getElementKey]
            handler this.getElementKey (Int): Srl.String;

            @expname[MapContaining_findElementIndex]
            handler this.findElementIndex (ptr[array[Char]]): Int;

            defTypeInfoGetter["alusus.org/Core/Core.Basic.MapContaining<alusus.org/Core/Core.Basic.TiObject>"]
        }

        type DynamicMapContaining {
            @injection def mapContaining: MapContaining;

            @expname[DynamicMapContaining_addElement]
            handler this.addElement (ptr[array[Char]], ref[TiObject]): Int;

            @expname[DynamicMapContaining_insertElement]
            handler this.insertElement (Int, ptr[array[Char]], ref[TiObject]);

            @expname[DynamicMapContaining_removeElementByIndex]
            handler this.removeElement (Int);

            @expname[DynamicMapContaining_removeElementByKey]
            handler this.removeElement (ptr[array[Char]]);

            @expname[DynamicMapContaining_getElementsNeededType]
            handler this.getElementsNeededType ():ref[TypeInfo];

            defTypeInfoGetter["alusus.org/Core/Core.Basic.DynamicMapContaining<alusus.org/Core/Core.Basic.TiObject>"]
        }

        macro ContainerOf [obj] ref[Core.Basic.Containing](Core.Basic.getInterface[obj, Core.Basic.Containing]);
        macro DynContainerOf [obj] ref[Core.Basic.DynamicContaining](
            Core.Basic.getInterface[obj, Core.Basic.DynamicContaining]
        );
        macro MapContainerOf [obj] ref[Core.Basic.MapContaining](
            Core.Basic.getInterface[obj, Core.Basic.MapContaining]
        );
        macro DynMapContainerOf [obj] ref[Core.Basic.DynamicMapContaining](
            Core.Basic.getInterface[obj, Core.Basic.DynamicMapContaining]
        );
    }
}
