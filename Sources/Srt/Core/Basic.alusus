import "../Core";
import "Srl/refs";
import "Srl/String";

@merge module Core {
    module Basic {
        use Srl;

        @expname[getFromGlobalStorage]
        func getFromGlobalStorage (ptr[array[Word[8]]]): ptr;

        macro defTypeInfoGetter[typeName] {
            @shared func getTypeInfo (): ref[TypeInfo] {
                @shared def typeInfo: ref[TypeInfo];
                if typeInfo~ptr == 0 {
                    typeInfo~ptr = getFromGlobalStorage(typeName)~cast[ptr[TypeInfo]];
                }
                return typeInfo;
            }
        }

        type TiObjectFactory {
            def createPlain: ptr[@shared @no_bind function ():ref[TiObject]];
            def createShared: ptr[@shared @no_bind function ():SrdRef[TiObject]];
            def initialize: ptr[@shared @no_bind function (ref[TiObject])];
            def terminate: ptr[@shared @no_bind function (ref[TiObject])];
        }

        type TypeInfo {
            def typeName: String;
            def typeNamespace: String;
            def packageName: String;
            def url: String;
            def uniqueName: String;
            def baseTypeInfo: ref[TypeInfo];
            def objectFactory: ref[TiObjectFactory];
        }

        type TiObject {
            def vtable: ptr;
            def wkThis: WkRef[this_type];

            @expname[TiObject_getMyTypeInfo]
            func getMyTypeInfo (): ref[TypeInfo];

            @expname[TiObject_isDerivedFrom]
            func isDerivedFrom (ref[TypeInfo]): Bool;

            @expname[TiObject_getInterface]
            func getInterface (ref[TypeInfo]): ref[TiInterface];
        }

        type TiInterface {
            def vtable: ptr;

            @expname[TiInterface_getMyInterfaceInfo]
            func getMyInterfaceInfo (): ref[TypeInfo];

            @expname[TiInterface_getTiObject]
            func getTiObject (): ref[TiObject];
        }

        macro getInterface [obj, T] castRef[obj.getInterface(T.getTypeInfo()), T];
        macro isDerivedFrom [obj, T] obj.isDerivedFrom(T.getTypeInfo());

        macro defDynCastedRef [name, obj, T] {
            def name: ref[T];
            if obj~ptr != 0 && obj.isDerivedFrom(T.getTypeInfo())
                name~ptr = castRef[obj, T]
            else
                name~ptr = 0;
        }

        macro defTiBasicType [name, dataType, uniqueName] {
            type name {
                @injection def tiObject: TiObject;
                def value: dataType;
                handler this~init() {
                    getTypeInfo().objectFactory.initialize(this);
                }
                handler this~init(v: dataType) {
                    getTypeInfo().objectFactory.initialize(this);
                    this.value = v;
                }
                handler this~terminate() {
                    getTypeInfo().objectFactory.terminate(this);
                }
                handler this=dataType this.value = value;

                @shared func create (v: dataType): SrdRef[name] {
                    def r: SrdRef[name];
                    r.alloc()~init(v);
                    return r;
                }

                defTypeInfoGetter[uniqueName];
            }
        }

        macro addExtraInitializer [name, dataType] {
            @merge type name {
                handler this~init(v: dataType) {
                    getTypeInfo().objectFactory.initialize(this);
                    this.value = v;
                }
                handler this=dataType this.value = value;

                @shared func create (v: dataType): SrdRef[name] {
                    def r: SrdRef[name];
                    r.alloc()~init(v);
                    return r;
                }
            }
        }

        defTiBasicType[TiInt, Int, "alusus.org/Core/Core.Basic.TiNumber<alusus.org/Srl/Srl.Int,alusus.org/Core/Core.Basic.TiObject>"];
        defTiBasicType[TiWord, Word, "alusus.org/Core/Core.Basic.TiNumber<alusus.org/Srl/Srl.Word,alusus.org/Core/Core.Basic.TiObject>"];
        defTiBasicType[TiFloat, Float, "alusus.org/Core/Core.Basic.TiNumber<alusus.org/Srl/Srl.Float,alusus.org/Core/Core.Basic.TiObject>"];
        defTiBasicType[TiBool, Bool, "alusus.org/Core/Core.Basic.TiBoolBase<alusus.org/Core/Core.Basic.TiObject>"];
        defTiBasicType[TiStr, String, "alusus.org/Core/Core.Basic.TiStrBase<alusus.org/Core/Core.Basic.TiObject>"];
        addExtraInitializer[TiStr, ptr[array[Char]]];

        type Binding {
            @injection def tiInterface: TiInterface;

            @expname[Binding_setMemberByName]
            func setMember (ptr[array[Char]], ref[TiObject]);

            @expname[Binding_setMemberByIndex]
            func setMember (Int, ref[TiObject]);

            @expname[Binding_getMemberCount]
            func getMemberCount ():Word;

            @expname[Binding_getMemberByName]
            func getMember (ptr[array[Char]]):ref[TiObject];

            @expname[Binding_getMemberByIndex]
            func getMember (Int):ref[TiObject];

            @expname[Binding_getMemberNeededTypeByName]
            func getMemberNeededType (ptr[array[Char]]):ref[TypeInfo];

            @expname[Binding_getMemberNeededTypeByIndex]
            func getMemberNeededType (Int):ref[TypeInfo];

            @expname[Binding_getMemberKey]
            func getMemberKey (Int): Srl.String;

            @expname[Binding_findMemberIndex]
            func findMemberIndex (ptr[array[Char]]): Int;

            defTypeInfoGetter["alusus.org/Core/Core.Basic.Binding"]
        }

        type Containing {
            @injection def tiInterface: TiInterface;

            @expname[Containing_setElement]
            func setElement (Int, ref[TiObject]);

            @expname[Containing_getElementCount]
            func getElementCount ():Word;

            @expname[Containing_getElement]
            func getElement (Int):ref[TiObject];

            @expname[Containing_getElementNeededType]
            func getElementNeededType (Int):ref[TypeInfo];

            defTypeInfoGetter["alusus.org/Core/Core.Basic.Containing<alusus.org/Core/Core.Basic.TiObject>"]
        }

        type DynamicContaining {
            @injection def containing: Containing;

            @expname[DynamicContaining_addElement]
            func addElement (ref[TiObject]): Int;

            @expname[DynamicContaining_insertElement]
            func insertElement (Int, ref[TiObject]);

            @expname[DynamicContaining_removeElement]
            func removeElement (Int);

            @expname[DynamicContaining_getElementsNeededType]
            func getElementsNeededType ():ref[TypeInfo];

            defTypeInfoGetter["alusus.org/Core/Core.Basic.DynamicContaining<alusus.org/Core/Core.Basic.TiObject>"]
        }

        type MapContaining {
            @injection def containing: Containing;

            @expname[MapContaining_setElement]
            func setElement (ptr[array[Char]], ref[TiObject]): Int;

            @expname[MapContaining_getElement]
            func getElement (ptr[array[Char]]): ref[TiObject];

            @expname[MapContaining_getElementNeededType]
            func getElementNeededType (ptr[array[Char]]):ref[TypeInfo];

            @expname[MapContaining_getElementKey]
            func getElementKey (Int): Srl.String;

            @expname[MapContaining_findElementIndex]
            func findElementIndex (ptr[array[Char]]): Int;

            defTypeInfoGetter["alusus.org/Core/Core.Basic.MapContaining<alusus.org/Core/Core.Basic.TiObject>"]
        }

        type DynamicMapContaining {
            @injection def mapContaining: MapContaining;

            @expname[DynamicMapContaining_addElement]
            func addElement (ptr[array[Char]], ref[TiObject]): Int;

            @expname[DynamicMapContaining_insertElement]
            func insertElement (Int, ptr[array[Char]], ref[TiObject]);

            @expname[DynamicMapContaining_removeElementByIndex]
            func removeElement (Int);

            @expname[DynamicMapContaining_removeElementByKey]
            func removeElement (ptr[array[Char]]);

            @expname[DynamicMapContaining_getElementsNeededType]
            func getElementsNeededType ():ref[TypeInfo];

            defTypeInfoGetter["alusus.org/Core/Core.Basic.DynamicMapContaining<alusus.org/Core/Core.Basic.TiObject>"]
        }
    }
}
